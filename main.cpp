// main.cpp
/**
 * @file main.cpp
 * @brief –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –∑–∞–ø—É—Å–∫ HTTP/3 –∏ HTTP/2 —Å–µ—Ä–≤–µ—Ä–æ–≤.
 *
 * –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö.
 * –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-22
 * @version 1.0
 * @license MIT
 */

#include "include/http3/quic_udp_proxy.hpp"
#include "include/http2/tcp_proxy.hpp"
#include "include/logger/logger.h"
#include <thread>
#include <iostream>
#include <string>
#include <stdexcept>
#include <csignal>

volatile sig_atomic_t running = true;

void signal_handler(int sig) {
    LOG_INFO("[INFO] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...", sig);
    running = false;
}

int main() {
    try {
        // üëá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        // –õ–æ–≥–≥–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ logger.h

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        const int http3_port = 443;
        const int http2_port = 443; // TCP-–ø—Ä–æ–∫—Å–∏ —Å–ª—É—à–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç
        const std::string backend_ip = "10.8.0.11"; // IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ WireGuard
        const int backend_port = 8586; // –ü–æ—Ä—Ç H3-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–§

        // üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
        QuicUdpProxy quic_proxy(http3_port, backend_ip, backend_port);
        TcpProxy tcp_proxy(http2_port, backend_ip, backend_port);

        // –ó–∞–ø—É—Å–∫ QUIC-UDP –ø—Ä–æ–∫—Å–∏
        std::thread quic_thread([http3_port, &quic_proxy]() { // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º http3_port –∏ quic_proxy
            LOG_INFO("üöÄ QUIC-UDP –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", http3_port);
            if (!quic_proxy.run()) {
                LOG_ERROR("‚ùå QUIC-UDP –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π");
                std::exit(EXIT_FAILURE);
            }
        });

        // –ó–∞–ø—É—Å–∫ TCP-–ø—Ä–æ–∫—Å–∏
        std::thread tcp_thread([http2_port, &tcp_proxy]() { // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º http2_port –∏ tcp_proxy
            LOG_INFO("üöÄ TCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", http2_port);
            if (!tcp_proxy.run()) {
                LOG_ERROR("‚ùå TCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π");
                std::exit(EXIT_FAILURE);
            }
        });

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        std::signal(SIGINT, signal_handler);
        std::signal(SIGTERM, signal_handler);

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        quic_thread.join();
        tcp_thread.join();

        LOG_INFO("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç.");
    }
    catch (const std::invalid_argument &e) {
        LOG_ERROR("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞: {}", e.what());
        return EXIT_FAILURE;
    }
    catch (const std::out_of_range &e) {
        LOG_ERROR("–ü–æ—Ä—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞:  {}", e.what());
        return EXIT_FAILURE;
    }
    catch (const std::exception &e) {
        LOG_ERROR("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e.what());
        return EXIT_FAILURE;
    }

    LOG_INFO("üõë –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
    return EXIT_SUCCESS;
}