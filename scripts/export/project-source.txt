

// "quic_udp_proxy.cpp"
/**
 * @file quic_udp_proxy.cpp
 * @brief Реализация методов, объявленных в соответствующем .h файле.
 *
 * Здесь реализуются методы, утилитные функции, бизнес-логика.
 * Файл работает с PostgreSQL через libpqxx и соответствует стандартам C++23.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-09-29
 * @version 1.0
 * @license MIT
 */

#include "quic_udp_proxy.hpp"
#include "include/quic_udp_deduplicator.hpp"

#include "server/logger.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <fcntl.h>
#include <arpa/inet.h>
#include <csignal>
#include <cerrno>
#include <sys/select.h>
#include <cstdio>
#include <ctime>  // Для std::time(nullptr)
#include <random> // Для std::mt19937, std::uniform_int_distribution

// === Инициализация глобальных переменных ===

// session_map теперь хранит ClientKey → ClientKey
std::unordered_map<ClientKey, ClientKey, ClientKeyHash> session_map;
// deduplicator — экземпляр класса для дедупликации
Deduplicator deduplicator;
// === Реализация функций ===

int set_nonblocking(int fd) noexcept
{
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1)
        return -1;
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK);
}

bool get_external_ip(std::string &ip_out) noexcept
{
    int sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock < 0)
        return false;

    struct sockaddr_in temp_addr{};
    temp_addr.sin_family = AF_INET;
    temp_addr.sin_port = htons(53);
    inet_pton(AF_INET, "8.8.8.8", &temp_addr.sin_addr);

    if (::connect(sock, (struct sockaddr *)&temp_addr, sizeof(temp_addr)) < 0)
    {
        ::close(sock);
        return false;
    }

    socklen_t len = sizeof(temp_addr);
    if (getsockname(sock, (struct sockaddr *)&temp_addr, &len) < 0)
    {
        ::close(sock);
        return false;
    }

    ip_out = inet_ntoa(temp_addr.sin_addr);
    ::close(sock);
    return true;
}

void print_hex(const uint8_t *data, size_t len, const std::string &label) noexcept
{
    if (!data || len == 0)
    {
        std::printf("[DEBUG] [%s:%d] %s: пустые данные\n", __FILE__, __LINE__, label.c_str());
        return;
    }

    std::printf("[DEBUG] [%s:%d] %s: ", __FILE__, __LINE__, label.c_str());
    for (size_t i = 0; i < std::min(len, 32UL); ++i)
    {
        std::printf("%02x ", data[i]);
    }
    if (len > 32)
        std::printf("...");
    std::printf("\n");
}

volatile sig_atomic_t running = true;

void signal_handler(int sig)
{
    std::printf("[INFO] [quic_udp_proxy.cpp:%d] Получен сигнал %d. Остановка...\n", __LINE__, sig);
    running = false;
}

// === Главный цикл ===

int main()
{
    int udp_fd = -1, wg_fd = -1;
    struct sockaddr_in client_addr{}, backend_addr{}, listen_addr{};
    socklen_t client_len = sizeof(client_addr);
    socklen_t backend_len = sizeof(backend_addr);

    // Инициализация генератора случайных чисел
    std::random_device rd;
    std::mt19937 gen(rd());

    // Регистрация обработчика сигналов
    std::signal(SIGINT, signal_handler);
    std::signal(SIGTERM, signal_handler);

    // --- Создание сокета для клиентов (порт 443) ---
    udp_fd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (udp_fd < 0)
    {
        std::perror("[ERROR] socket udp_fd failed");
        return 1;
    }

    int opt = 1;
    if (setsockopt(udp_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
    {
        std::perror("[ERROR] setsockopt SO_REUSEADDR failed");
    }
    if (setsockopt(udp_fd, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0)
    {
        std::perror("[ERROR] setsockopt SO_REUSEPORT failed");
    }

    if (set_nonblocking(udp_fd) == -1)
    {
        std::perror("[ERROR] set_nonblocking udp_fd failed");
        ::close(udp_fd);
        return 1;
    }

    // --- Привязка к порту ---
    memset(&listen_addr, 0, sizeof(listen_addr));
    listen_addr.sin_family = AF_INET;
    listen_addr.sin_addr.s_addr = INADDR_ANY;
    listen_addr.sin_port = htons(LISTEN_PORT);

    if (bind(udp_fd, (struct sockaddr *)&listen_addr, sizeof(listen_addr)) < 0)
    {
        std::perror("[ERROR] bind udp_fd failed");
        ::close(udp_fd);
        return 1;
    }

    // --- Создание сокета для отправки в РФ ---
    wg_fd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (wg_fd < 0)
    {
        std::perror("[ERROR] socket wg_fd failed");
        ::close(udp_fd);
        return 1;
    }

    if (set_nonblocking(wg_fd) == -1)
    {
        std::perror("[ERROR] set_nonblocking wg_fd failed");
        ::close(udp_fd);
        ::close(wg_fd);
        return 1;
    }

    memset(&backend_addr, 0, sizeof(backend_addr));
    backend_addr.sin_family = AF_INET;
    inet_pton(AF_INET, BACKEND_IP, &backend_addr.sin_addr);
    backend_addr.sin_port = htons(BACKEND_PORT);

    std::printf("[INFO] [quic_udp_proxy.cpp:%d] Запущен на порту %d, слушает 0.0.0.0, бэкенд: %s:%d\n",
                __LINE__, LISTEN_PORT, BACKEND_IP, BACKEND_PORT);

    char buf[MAX_PACKET_SIZE];
    fd_set read_fds;

    while (running)
    {
        FD_ZERO(&read_fds);
        FD_SET(udp_fd, &read_fds);
        FD_SET(wg_fd, &read_fds);
        int max_fd = std::max(udp_fd, wg_fd);

        timeval timeout{.tv_sec = 0, .tv_usec = 100000};
        int activity = select(max_fd + 1, &read_fds, nullptr, nullptr, &timeout);
        if (activity < 0 && errno != EINTR)
        {
            std::fprintf(stderr, "[ERROR] [quic_udp_proxy.cpp:%d] select error: %s\n", __LINE__, strerror(errno));
            continue;
        }
        // === НАПРАВЛЕНИЕ: КЛИЕНТ → СЕРВЕР ===
        if (FD_ISSET(udp_fd, &read_fds))
        {
            // === Получение пакета от клиента ===
            // n — количество прочитанных байт.
            // buf — буфер, в который записаны данные пакета.
            // client_addr — структура, содержащая IP-адрес и порт клиента.
            // client_len — размер структуры client_addr.
            ssize_t n = recvfrom(udp_fd, buf, sizeof(buf), 0,
                                 (struct sockaddr *)&client_addr, &client_len);

            if (n < 0 || static_cast<size_t>(n) >= MAX_PACKET_SIZE)
            {
                if (errno != EAGAIN && errno != EWOULDBLOCK)
                {
                    LOG_ERROR("recvfrom client failed: {}", strerror(errno));
                }
                continue;
            }

            // === Извлечение IP-адреса и порта клиента для логирования ===
            // client_ip — строковое представление IPv4-адреса клиента (например, "192.168.1.100").
            // Функция inet_ntoa преобразует 32-битное целое число (в сетевом порядке байт) в строку в формате "A.B.C.D".
            // Аргумент: client_addr.sin_addr.s_addr — это поле структуры sockaddr_in, содержащее IP-адрес клиента.
            std::string client_ip = inet_ntoa(client_addr.sin_addr);

            // client_port — номер порта клиента, на котором он установил соединение.
            // Функция ntohs преобразует 16-битное целое число из сетевого порядка байт (big-endian) в порядок хоста (host byte order).
            // Аргумент: client_addr.sin_port — это поле структуры sockaddr_in, содержащее порт клиента в сетевом порядке байт.
            uint16_t client_port = ntohs(client_addr.sin_port);

            LOG_INFO("=== [CLIENT → SERVER] ===");
            LOG_INFO("Получено {} байт от {}:{}",
                     n,
                     client_ip.c_str(),
                     client_port);
            // Выводим hex-дамп заголовка пакета для отладки.
            print_hex(reinterpret_cast<uint8_t *>(buf), static_cast<size_t>(n), "HEADER");
            // Проверка минимального размера пакета. QUIC-заголовок не может быть короче 6 байт.
            if (n < 6)
            {
                LOG_WARN("Слишком короткий пакет ({}) байт", n);
                continue;
            }
            // === Парсинг типа пакета ===
            // packet_type — первый байт пакета, определяющий тип заголовка.
            uint8_t packet_type = buf[0];
            // Проверяем, является ли пакет Long Header (биты 7-6 == 11).
            if ((packet_type & 0xC0) != 0xC0)
            {
                LOG_DEBUG("Short Header — пропускаем");
                continue;
            }

            // === Обработка Retry-пакета ===
            // Если пакет начинается с 0xF0 и его длина >= 9, это Retry-пакет.
            if (n >= 9 && static_cast<unsigned char>(buf[0]) == 0xF0)
            {
                LOG_INFO("Received Retry packet");
                // === Извлечение токена из Retry-пакета ===
                // token_offset — смещение до токена (байт 9).
                size_t token_offset = 9;
                // token_len — длина токена (хранится в байте 9).
                size_t token_len = buf[token_offset];
                // token — вектор, содержащий сам токен.
                std::vector<uint8_t> token(buf + token_offset + 1, buf + token_offset + 1 + token_len);
                // === Создание ключа для хранения токена ===
                // key — объект ClientKey, используемый как ключ в session_map.
                ClientKey key{};
                key.addr = client_addr.sin_addr.s_addr; // IPv4-адрес клиента.
                key.port = client_addr.sin_port;        // Порт клиента.
                                                        // cid — первые 8 байт SCID из Retry-пакета.
                std::memset(key.cid, 0, 8);
                std::memcpy(key.cid, buf + 9, 8); // Первые 8 байт после токена — это SCID.

                // === Сохранение токена в session_map ===
                key.token = token;
                session_map[key] = key;

                // === Пересылка Retry-пакета клиенту ===
                ssize_t sent = sendto(udp_fd, buf, n, 0,
                                      (struct sockaddr *)&client_addr, sizeof(client_addr));

                if (sent < 0)
                {
                    LOG_ERROR("sendto client failed: {}", strerror(errno));
                }
                else
                {
                    LOG_INFO("Retry packet sent to client");
                }
                continue; // Пропускаем дальнейшую обработку этого пакета.
            }

            // === Парсинг версии QUIC ===
            // version — 32-битное число, представляющее версию QUIC.
            uint32_t version = (buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4];

            // === Парсинг длин CID ===
            // pos — смещение до байта длин CID (байт 5).
            size_t pos = 5;
            // dcil — длина DCID (верхние 4 бита байта 5).
            uint8_t dcil = buf[pos];
            // scil — длина SCID (нижние 4 бита байта 5).
            uint8_t scil = buf[pos + 1];

            LOG_INFO("QUIC Версия: 0x{:08x}, DCIL={}, SCIL={}",
                     version,
                     static_cast<int>(dcil),
                     static_cast<int>(scil));

            // Проверка корректности длин CID.
            if (dcil == 0 || scil == 0 || pos + 2 + dcil + scil > static_cast<size_t>(n))
            {
                LOG_WARN("Некорректные CID длины");
                continue;
            }
            // === Извлечение SCID ===
            // scid — указатель на SCID в пакете.
            uint8_t *scid = reinterpret_cast<uint8_t *>(&buf[pos + 2 + dcil]);

            // === Создание ключа для поиска сессии ===
            ClientKey key{};
            key.addr = client_addr.sin_addr.s_addr;
            key.port = client_addr.sin_port;
            std::memset(key.cid, 0, 8);
            std::memcpy(key.cid, scid, std::min(static_cast<size_t>(scil), 8UL));

            // === Проверка на дубликат с помощью Deduplicator ===
            // Создаем объект PacketInfo для передачи в Deduplicator
            // info — объект типа Deduplicator::PacketInfo, содержащий информацию о пакете.
            Deduplicator::PacketInfo info;
            // info.scid — вектор, содержащий SCID из пакета.
            info.scid = std::vector<uint8_t>(scid, scid + scil);
            // info.token — вектор, содержащий токен (изначально пустой, так как это первый пакет).
            info.token = {}; // Изначально токен пустой

            // === Извлечение Packet Number ===
            size_t cid_offset = pos + 2;                 // Смещение до CID
            size_t pn_offset = cid_offset + dcil + scil; // Смещение до Packet Number

            // Проверка, что пакет достаточно длинный
            if (pn_offset >= static_cast<size_t>(n))
            {
                LOG_WARN("Пакет слишком короткий для Packet Number");
                continue;
            }

            // Извлечение Packet Number (максимум 4 байта)
            uint64_t packet_number = 0;
            for (size_t i = 0; i < 4 && pn_offset + i < static_cast<size_t>(n); ++i)
            {
                packet_number = (packet_number << 8) | buf[pn_offset + i];
            }

            // Проверяем, является ли пакет повторным
            // deduplicator.is_duplicate — метод класса Deduplicator, проверяющий, был ли уже обработан такой пакет.
            // Аргументы:
            //   key — ключ клиента (IP, порт, SCID).
            //   info.scid — SCID из пакета.
            //   info.token — токен из пакета.
            if (deduplicator.is_duplicate(key, info.scid, info.token, packet_number))
            {
                // Если пакет повторный — игнорируем его.
                LOG_INFO("Повторный пакет — игнорируем");
                continue; // Пропускаем дальнейшую обработку
            }

            // Это первый пакет — добавляем информацию о нем в Deduplicator
            // deduplicator.add_packet — метод класса Deduplicator, сохраняющий информацию о первом пакете.
            // Аргументы:
            //   key — ключ клиента.
            //   info — объект PacketInfo, содержащий SCID и токен.
            deduplicator.add_packet(key, info);

            // === Поиск сессии в session_map ===
            // it — итератор, указывающий на элемент в session_map.
            auto it = session_map.find(key);

            if (it == session_map.end())
            {
                // Новая сессия
                // session_map[key] = key — добавляем новую сессию в session_map.
                session_map[key] = key;
                LOG_INFO("Новая сессия: {}:{} → SCID: {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}",
                         client_ip.c_str(),
                         client_port,
                         key.cid[0],
                         key.cid[1],
                         key.cid[2],
                         key.cid[3],
                         key.cid[4],
                         key.cid[5],
                         key.cid[6],
                         key.cid[7]);
            }
            else
            {
                LOG_DEBUG("Reuse SCID: {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}",
                          key.cid[0],
                          key.cid[1],
                          key.cid[2],
                          key.cid[3],
                          key.cid[4],
                          key.cid[5],
                          key.cid[6],
                          key.cid[7]);
            }

            // Добавляем токен в пакет
            // it != session_map.end() — проверка, существует ли сессия.
            // it->second.token.size() > 0 — проверка, есть ли токен в сессии.
            if (it != session_map.end() && it->second.token.size() > 0)
            {
                // token_offset — смещение до токена в пакете (байт 9).
                size_t token_offset = 9;
                // Записываем длину токена в байт 9.
                buf[token_offset] = it->second.token.size();
                // Копируем токен в пакет.
                std::memcpy(buf + token_offset + 1, it->second.token.data(), it->second.token.size());
            }

            // === ЛОГИРОВАНИЕ ПАКЕТА ДО ОТПРАВКИ В РФ ===
            LOG_INFO("Пакет до отправки в РФ:");
            print_hex(reinterpret_cast<uint8_t *>(buf), static_cast<size_t>(n), "SEND_TO_RF");

            // Отправляем пакет без изменений
            ssize_t sent = sendto(wg_fd, buf, n, 0,
                                  (struct sockaddr *)&backend_addr, sizeof(backend_addr));
            if (sent < 0)
            {
                LOG_ERROR("sendto backend failed: {}", strerror(errno));
            }
            else
            {
                LOG_INFO("Переслано {} байт в РФ", sent);
            }
        }
              // === НАПРАВЛЕНИЕ: СЕРВЕР → КЛИЕНТ ===
        if (FD_ISSET(wg_fd, &read_fds))
        {
            // === Получение пакета от сервера в России ===
            ssize_t n = recvfrom(wg_fd, buf, sizeof(buf), 0,
                                 (struct sockaddr *)&backend_addr, &backend_len);
            // Проверка на ошибку или неблокирующий режим.
            if (n < 0 || static_cast<size_t>(n) >= MAX_PACKET_SIZE)
            {
                if (errno != EAGAIN && errno != EWOULDBLOCK)
                {
                    LOG_ERROR("recvfrom backend failed: {}", strerror(errno));
                }
                continue;
            }

            // === ЛОГИРОВАНИЕ ПАКЕТА ПОСЛЕ ПОЛУЧЕНИЯ ОТ РФ (СРАЗУ ПОСЛЕ recvfrom) ===
            LOG_INFO("Пакет после получения от РФ:");
            print_hex(reinterpret_cast<uint8_t *>(buf), static_cast<size_t>(n), "RECV_FROM_RF");

            // === Выводим заголовок для логирования ===
            LOG_INFO("=== [SERVER → CLIENT] ===");
            LOG_INFO("Получено {} байт от сервера", n);
            print_hex(reinterpret_cast<uint8_t *>(buf), static_cast<size_t>(n), "REPLY_HEADER");

            // Проверка минимального размера пакета. QUIC-заголовок не может быть короче 6 байт.
            if (n < 6)
            {
                LOG_WARN("Слишком короткий пакет ({}) байт", n);
                continue;
            }

            uint8_t packet_type = buf[0];
            // === Обработка Retry-пакета ===
            if ((packet_type & 0xC0) == 0xC0)
            { // Это Long Header
                // Проверяем, является ли пакет Retry
                // Retry-пакет имеет в поле версии значение 0x00000000 и в байтах 5-8 — нули.
                if (buf[5] == 0x00 && buf[6] == 0x00 && buf[7] == 0x00 && buf[8] == 0x00)
                {
                    // Это Retry-пакет
                    LOG_INFO("Received Retry packet");
                    // Извлекаем токен из Retry-пакета
                    size_t token_offset = 9;                                                                // Токен начинается с байта 9
                    size_t token_len = buf[token_offset];                                                   // Длина токена хранится в байте 9
                    std::vector<uint8_t> token(buf + token_offset + 1, buf + token_offset + 1 + token_len); // Сам токен

                    // Создаём ключ на основе IP и порта клиента (из client_addr)
                    ClientKey key{};
                    key.addr = client_addr.sin_addr.s_addr; // IPv4-адрес клиента
                    key.port = client_addr.sin_port;        // Порт клиента

                    // Первые 8 байт после токена — это SCID (используем их как CID)
                    std::memset(key.cid, 0, 8);       // Заполняем cid нулями
                    std::memcpy(key.cid, buf + 9, 8); // Копируем первые 8 байт после токена — это SCID

                    // Сохраняем токен в session_map
                    key.token = token;      // Присваиваем токен
                    session_map[key] = key; // Записываем весь объект ClientKey в session_map

                    // Пересылаем Retry-пакет клиенту
                    ssize_t sent = sendto(udp_fd, buf, n, 0,
                                          (struct sockaddr *)&client_addr, sizeof(client_addr));

                    if (sent < 0)
                    {
                        LOG_ERROR("sendto client failed: {}", strerror(errno));
                    }
                    else
                    {
                        LOG_INFO("Retry packet sent to client");
                    }

                    continue; // Пропускаем дальнейшую обработку этого пакета
                }
            } // === Конец обработки Retry-пакета ===

            // Проверяем, является ли пакет Short Header (биты 7-6 != 11).
            if ((packet_type & 0xC0) != 0xC0)
            {
                LOG_DEBUG("Short Header — пропускаем");
                continue;
            }

            // === Парсинг длин CID ===
            size_t pos = 5;              // Смещение до байта длин CID (байт 5)
            uint8_t dcil = buf[pos];     // Длина DCID (верхние 4 бита байта 5)
            uint8_t scil = buf[pos + 1]; // Длина SCID (нижние 4 бита байта 5)

            // Проверка корректности длин CID.
            if (dcil == 0 || scil == 0 || pos + 2 + dcil + scil > static_cast<size_t>(n))
            {
                LOG_WARN("Некорректные CID длины");
                continue;
            }

            // === Извлечение DCID ===
            uint8_t *dcid = reinterpret_cast<uint8_t *>(&buf[pos + 2]);

            // === Поиск сессии по DCID ===
            // Для ответа от сервера нужно найти сессию по DCID, который должен соответствовать SCID клиента.
            ClientKey key{};
            bool found = false;

            // Перебираем все сессии в session_map
            for (const auto &pair : session_map)
            {
                const ClientKey &stored_key = pair.first;
                // Проверяем, совпадает ли DCID из пакета с SCID, сохраненным в сессии
                // Сравниваем только те байты, которые есть в DCID и SCID
                size_t compare_len = std::min(static_cast<size_t>(scil), 8UL);
                if (std::memcmp(stored_key.cid, dcid, compare_len) == 0)
                {
                    // Нашли сессию!
                    key = stored_key;
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                LOG_WARN("Неизвестный DCID — пакет потерялся");
                continue;
            }

            // === Отправка пакета клиенту без изменений ===
            struct sockaddr_in client_dest{};
            client_dest.sin_family = AF_INET;
            client_dest.sin_addr.s_addr = key.addr;
            client_dest.sin_port = key.port;

            ssize_t sent = sendto(udp_fd, buf, n, 0,
                                  (struct sockaddr *)&client_dest, sizeof(client_dest));

            if (sent < 0)
            {
                LOG_ERROR("sendto client failed: {}", strerror(errno));
            }
            else
            {
                LOG_INFO("Отправлено {} байт клиенту {}:{}",
                         sent,
                         inet_ntoa(client_dest.sin_addr),
                         ntohs(client_dest.sin_port));
            }
        }
    }

    std::printf("[INFO] [quic_udp_proxy.cpp:%d] Прокси остановлен.\n", __LINE__);
    if (udp_fd != -1)
        ::close(udp_fd);
    if (wg_fd != -1)
        ::close(wg_fd);
    return 0;
}

// "quic_udp_proxy.hpp"
/**
 * @file quic_udp_proxy.hpp
 * @brief Краткое описание назначения заголовочного файла.
 *
 * Более подробное описание того, какие классы, функции, структуры объявляет файл.
 * Может содержать информацию о зависимости от других модулей или ограничениях использования.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-09-29
 * @version 1.0
 * @license MIT
 *
 * @note Этот файл требует стандарта C++23 (ISO/IEC 14882:2024).
 * Используются: std::vector, std::unordered_map, std::random_device, std::mt19937.
 *
 * @note Внешние зависимости:
 * - Стандартная библиотека C++23.
 * - Системные заголовки: <sys/socket.h>, <netinet/in.h>, <unistd.h>.
 * - Не требует сторонних библиотек.
 */

#pragma once

#include <iostream>
#include <cstring>
#include <unordered_map>
#include <vector>
#include <string>
#include <cstdint>   // Для uint8_t, uint16_t, uint32_t
#include <algorithm> // Для std::min, std::max
#include <cstdlib>   // Для std::srand, std::rand
#include "server/logger.h"
#include "include/client_key.hpp"


// === Глобальные константы ===
constexpr char BACKEND_IP[] = "10.8.0.11";   ///< IP сервера в РФ через WireGuard
constexpr int BACKEND_PORT = 8585;           ///< Порт H3-сервера в РФ
constexpr int LISTEN_PORT = 443;             ///< Порт, на котором слушает прокси (HTTPS)
constexpr size_t MAX_PACKET_SIZE = 1500;     ///< Максимальный размер UDP-пакета

static_assert(MAX_PACKET_SIZE <= 65536, "MAX_PACKET_SIZE должен быть <= 65536");

// === Глобальные переменные ===

/**
 * @brief Хеш-функция для std::vector<uint8_t>
 *
 * Используется для хеширования CID в session_map.
 */
struct VectorHash
{
    size_t operator()(const std::vector<uint8_t> &v) const noexcept;
};

/**
 * @brief Оператор сравнения для векторов байтов
 *
 * Используется для сравнения CID в reverse_map.
 */
struct VectorEqual
{
    bool operator()(const std::vector<uint8_t> &a, const std::vector<uint8_t> &b) const noexcept;
};


/**
 * @brief Маппинг ключа клиента → локальный CID.
 *
 * Используется для восстановления оригинального SCID при ответе от сервера.
 */
extern std::unordered_map<ClientKey, ClientKey, ClientKeyHash> session_map;

/**
 * @brief Обратный маппинг: локальный CID → ключ клиента.
 *
 * Используется для поиска клиента по CID при получении ответа от сервера.
 */
extern std::unordered_map<std::vector<uint8_t>, ClientKey, VectorHash, VectorEqual> reverse_map;

// === Функции ===

/**
 * @brief Устанавливает неблокирующий режим сокета
 * @param fd Дескриптор сокета
 * @return 0 при успехе, -1 при ошибке
 * @throws Никаких исключений — функция не выбрасывает.
 */
[[nodiscard]] int set_nonblocking(int fd) noexcept;

/**
 * @brief Генерирует случайный 8-байтовый CID
 * @return Вектор из 8 случайных байт
 * @throws Никаких исключений — функция не выбрасывает.
 */
[[nodiscard]] std::vector<uint8_t> generate_local_cid() noexcept;

/**
 * @brief Определяет внешний IP-адрес системы через подключение к 8.8.8.8:53
 * @param ip_out Строка для сохранения IP
 * @return true, если удалось определить
 * @throws Никаких исключений — функция не выбрасывает.
 * @warning Может вернуть неверный IP при нескольких интерфейсах
 */
[[nodiscard]] bool get_external_ip(std::string &ip_out) noexcept;

/**
 * @brief Выводит байты в hex-формате (первые 32 байта)
 * @param data Указатель на данные
 * @param len Длина данных
 * @param label Метка для вывода (например, "HEADER")
 * @throws Никаких исключений — функция не выбрасывает.
 */
void print_hex(const uint8_t *data, size_t len, const std::string &label) noexcept;

/**
 * @brief Обработчик сигналов завершения (SIGINT, SIGTERM)
 * @param sig Номер сигнала
 * @throws Никаких исключений — функция не выбрасывает.
 */
void signal_handler(int sig);

// "src/client_key.cpp"
/**
 * @file client_key.cpp
 * @brief Реализация методов, объявленных в соответствующем .h файле.
 *
 * Здесь реализуются методы, утилитные функции, бизнес-логика.
 * Файл работает с PostgreSQL через libpqxx и соответствует стандартам C++23.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-21
 * @version 1.0
 * @license MIT
 */

// src/client_key.cpp
#include "../include/client_key.hpp"

size_t ClientKeyHash::operator()(const ClientKey &k) const noexcept
{
    std::hash<uint32_t> hasher;
    size_t result = hasher(k.addr) ^
                    (std::hash<uint16_t>()(k.port) << 1) ^
                    std::hash<uint64_t>()(*reinterpret_cast<const uint64_t *>(k.cid));
    return result;
}

bool ClientKeyEqual::operator()(const ClientKey &a, const ClientKey &b) const noexcept
{
    return a.addr == b.addr && a.port == b.port &&
           std::memcmp(a.cid, b.cid, 8) == 0 &&
           a.token == b.token; // Добавлено сравнение токена
}

bool ClientKey::operator==(const ClientKey &other) const noexcept
{
    return addr == other.addr && port == other.port &&
           std::memcmp(cid, other.cid, 8) == 0 &&
           token == other.token; // Добавлено сравнение токена
}

// "src/quic_udp_deduplicator.cpp"
/**
 * @file quic_udp_deduplicator.cpp
 * @brief Реализация методов, объявленных в соответствующем .h файле.
 *
 * Здесь реализуются методы, утилитные функции, бизнес-логика.
 * Файл работает с PostgreSQL через libpqxx и соответствует стандартам C++23.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-21
 * @version 1.0
 * @license MIT
 */
// src/quic_udp_deduplicator.cpp
#include "../include/quic_udp_deduplicator.hpp"
#include "../include/client_key.hpp"
#include <cstring>

size_t Deduplicator::PacketKeyHash::operator()(const PacketKey &key) const noexcept
{
    size_t result = 0;
    // Хэшируем ClientKey
    result ^= std::hash<uint32_t>()(key.client_key.addr);
    result ^= std::hash<uint16_t>()(key.client_key.port);
    for (uint8_t b : key.client_key.cid)
    {
        result ^= std::hash<uint8_t>()(b) + 2654435761U + (result << 6) + (result >> 2);
    }
    // Хэшируем SCID
    for (uint8_t b : key.scid)
    {
        result ^= std::hash<uint8_t>()(b) + 2654435761U + (result << 6) + (result >> 2);
    }
    // Хэшируем DCID
    for (uint8_t b : key.dcid)
    {
        result ^= std::hash<uint8_t>()(b) + 2654435761U + (result << 6) + (result >> 2);
    }
    // Хэшируем Packet Number
    result ^= std::hash<uint64_t>()(key.packet_number);
    return result;
}

bool Deduplicator::PacketKeyEqual::operator()(const PacketKey &a, const PacketKey &b) const noexcept
{
    return a.client_key == b.client_key &&
           a.scid == b.scid &&
           a.dcid == b.dcid &&
           a.packet_number == b.packet_number;
}

void Deduplicator::add_packet(const ClientKey &key, const PacketInfo &info)
{
    PacketKey packet_key{};
    packet_key.client_key = key;
    packet_key.scid = info.scid;
    packet_key.dcid = {}; // DCID пока неизвестен, можно установить позже
    packet_key.packet_number = info.packet_number;

    seen_packets_[packet_key] = true;
}

bool Deduplicator::is_duplicate(const ClientKey &key, const std::vector<uint8_t> &scid, const std::vector<uint8_t> &dcid, uint64_t packet_number) const
{
    PacketKey packet_key{};
    packet_key.client_key = key;
    packet_key.scid = scid;
    packet_key.dcid = dcid;
    packet_key.packet_number = packet_number;

    auto it = seen_packets_.find(packet_key);
    if (it != seen_packets_.end())
    {
        return true; // Это дубликат
    }

    return false; // Это первый пакет
}

void Deduplicator::remove_connection(const ClientKey &key)
{
    (void)key; // Подавление предупреждения "unused parameter"
}

// "server/logger.h"
/**
 * @file logger.hpp
 * @brief Логгер для проекта на C++20/23 с поддержкой цветов и автоматического захвата контекста.
 *
 * Предоставляет удобный интерфейс для логирования с уровнями (DEBUG, INFO, WARN, ERROR, SUCCESS),
 * автоматическим добавлением файла, строки, функции и временной метки.
 * Поддерживает цветной вывод в терминале (ANSI escape codes) и эмодзи для визуального различения уровней.
 * Также предоставляет LOG_RAW для прямого вывода без контекста (например, для внешних библиотек).
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-09-29
 * @version 1.0
 * @license MIT
 */

#pragma once

#include <string>
#include <source_location>
#include <chrono>
#include <iostream>
#include <iomanip>
#include <mutex>

#ifdef _WIN32
    #include <io.h>
    #include <fcntl.h>
#else
    #include <unistd.h>
#endif

// Для fmt::format
#include <fmt/core.h>

/**
 * @brief Уровни логирования.
 */
enum class LogLevel {
    DEBUG,   ///< Отладочная информация (низкий приоритет)
    INFO,    ///< Общая информационная запись
    WARN,    ///< Предупреждение (возможная проблема)
    ERROR,   ///< Ошибка (нарушение нормального потока)
    SUCCESS  ///< Успешное завершение операции (визуально выделяется)
};

/**
 * @brief Внутреннее пространство имён для вспомогательных функций логгера.
 *
 * Все функции имеют внутреннюю линковку (static linkage) благодаря анонимному namespace.
 */
namespace {

/**
 * @brief Возвращает ANSI-код цвета для заданного уровня логирования.
 * @param level Уровень логирования.
 * @return Указатель на строку с ANSI-кодом цвета.
 */
const char* get_color_code(LogLevel level) {
    switch (level) {
        case LogLevel::DEBUG:   return "\033[36m"; // Cyan
        case LogLevel::INFO:    return "\033[34m"; // Blue
        case LogLevel::WARN:    return "\033[33m"; // Yellow
        case LogLevel::ERROR:   return "\033[31m"; // Red
        case LogLevel::SUCCESS: return "\033[32m"; // Green
        default:                return "\033[0m";
    }
}

/**
 * @brief Возвращает эмодзи, соответствующий уровню логирования.
 * @param level Уровень логирования.
 * @return Указатель на строковый литерал с эмодзи в кодировке UTF-8.
 * @warning Требуется поддержка UTF-8 в терминале для корректного отображения.
 */
const char* get_emoji(LogLevel level) {
    switch (level) {
        case LogLevel::DEBUG:   return "💟";
        case LogLevel::INFO:    return "🔵";
        case LogLevel::WARN:    return "⚠️";
        case LogLevel::ERROR:   return "❌";
        case LogLevel::SUCCESS: return "✅";
        default:                return "";
    }
}

/**
 * @brief ANSI-код для сброса цвета текста в терминале.
 */
const char* reset_color = "\033[0m";

/**
 * @brief Проверяет, является ли stdout терминалом.
 * @return true, если stdout подключён к TTY.
 */
bool is_stdout_tty() {
#ifdef _WIN32
    return _isatty(_fileno(stdout));
#else
    return isatty(fileno(stdout));
#endif
}

/**
 * @brief Получает текущую временную метку в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС".
 * @return Строка с временной меткой в локальном часовом поясе.
 * @throws std::runtime_error При ошибке форматирования времени.
 * @warning Использует потокобезопасные функции (localtime_r / localtime_s).
 */
std::string get_timestamp() {
    try {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);

#ifdef _WIN32
        std::tm local_time;
        if (std::localtime_s(&local_time, &time_t) != 0) {
            throw std::runtime_error("localtime_s failed");
        }
#else
        std::tm local_time;
        if (::localtime_r(&time_t, &local_time) == nullptr) {
            throw std::runtime_error("localtime_r failed");
        }
#endif

        char buffer[20];
        if (std::strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", &local_time) == 0) {
            throw std::runtime_error("strftime failed");
        }
        return std::string(buffer);
    } catch (const std::exception& e) {
        return "TIMESTAMP_ERROR";
    }
}

/**
 * @brief Мьютекс для потокобезопасности логгера.
 *
 * Используется для синхронизации вывода в cerr.
 * Может быть отключен, если логгер используется в однопоточном режиме.
 */
std::mutex log_mutex;

} // namespace

/**
 * @brief Основная шаблонная функция логирования с контекстом.
 *
 * Не вызывайте напрямую — используйте макросы LOG_DEBUG, LOG_INFO и т.д.
 *
 * @tparam Args Типы аргументов для форматирования.
 * @param level Уровень логирования.
 * @param location Информация о месте вызова (обычно std::source_location::current()).
 * @param format_str Строка формата (совместима с fmt::format).
 * @param args Аргументы для подстановки в строку формата.
 * @throws Никаких исключений — функция не выбрасывает.
 */
template<typename... Args>
void log_impl(LogLevel level,
              const std::source_location& location = std::source_location::current(),
              std::string_view format_str = "",
              Args&&... args) {
    const bool use_color = is_stdout_tty();
    const char* color_start = use_color ? get_color_code(level) : "";
    const char* color_reset = use_color ? reset_color : "";

    const char* level_name = [&]() -> const char* {
        switch (level) {
            case LogLevel::DEBUG:   return "DEBUG";
            case LogLevel::INFO:    return "INFO";
            case LogLevel::WARN:    return "WARN";
            case LogLevel::ERROR:   return "ERROR";
            case LogLevel::SUCCESS: return "SUCCESS";
            default:                return "UNKNOWN";
        }
    }();

    // Форматируем сообщение — используем fmt::runtime, чтобы избежать ошибки "not a constant expression"
    std::string message = fmt::format(fmt::runtime(format_str), args...);

    // Блокировка мьютекса (опционально, если нужна потокобезопасность)
    std::lock_guard<std::mutex> lock(log_mutex);

    // Выводим в cerr
    std::cerr << color_start
              << "[" << get_timestamp() << "] "
              << get_emoji(level) << "[" << level_name << "] "
              << "[" << location.file_name() << ":" << location.line() << " in " << location.function_name() << "] "
              << message
              << color_reset
              << std::endl;
}

/**
 * @brief Функция для "сырого" логирования без автоматического контекста.
 *
 * Используется для интеграции с внешними библиотеками (например, quiche),
 * которые передают готовые строки логов.
 *
 * @tparam Args Типы аргументов для форматирования.
 * @param format_str Строка формата.
 * @param args Аргументы для подстановки.
 * @throws Никаких исключений — функция не выбрасывает.
 */
template<typename... Args>
void log_raw_impl(const std::string& format_str, Args&&... args) {
    // Форматируем сообщение
    std::string message = fmt::format(fmt::runtime(format_str), args...);

    // Выводим в cerr
    std::cerr << message << std::endl;
}

/**
 * @brief Макрос для логирования уровня DEBUG.
 * @param ... Аргументы для форматирования (совместимы с fmt::format).
 * @throws Никаких исключений — функция не выбрасывает.
 * @warning Использует __FILE__, __LINE__, __func__ — может быть медленным в release-сборке.
 */
#define LOG_DEBUG(...) log_impl(LogLevel::DEBUG, std::source_location::current(), __VA_ARGS__)

/**
 * @brief Макрос для логирования уровня INFO.
 * @param ... Аргументы для форматирования (совместимы с fmt::format).
 * @throws Никаких исключений — функция не выбрасывает.
 * @warning Использует __FILE__, __LINE__, __func__ — может быть медленным в release-сборке.
 */
#define LOG_INFO(...)  log_impl(LogLevel::INFO,  std::source_location::current(), __VA_ARGS__)

/**
 * @brief Макрос для логирования уровня WARN.
 * @param ... Аргументы для форматирования (совместимы с fmt::format).
 * @throws Никаких исключений — функция не выбрасывает.
 * @warning Использует __FILE__, __LINE__, __func__ — может быть медленным в release-сборке.
 */
#define LOG_WARN(...)  log_impl(LogLevel::WARN,  std::source_location::current(), __VA_ARGS__)

/**
 * @brief Макрос для логирования уровня ERROR.
 * @param ... Аргументы для форматирования (совместимы с fmt::format).
 * @throws Никаких исключений — функция не выбрасывает.
 * @warning Использует __FILE__, __LINE__, __func__ — может быть медленным в release-сборке.
 */
#define LOG_ERROR(...) log_impl(LogLevel::ERROR, std::source_location::current(), __VA_ARGS__)

/**
 * @brief Макрос для логирования уровня SUCCESS.
 * @param ... Аргументы для форматирования (совместимы с fmt::format).
 * @throws Никаких исключений — функция не выбрасывает.
 * @warning Использует __FILE__, __LINE__, __func__ — может быть медленным в release-сборке.
 */
#define LOG_SUCCESS(...) log_impl(LogLevel::SUCCESS, std::source_location::current(), __VA_ARGS__)

/**
 * @brief Макрос для "сырого" логирования без контекста (время, файл, функция и т.д.).
 *
 * Используется, когда сообщение уже содержит всю необходимую информацию
 * или поступает из внешней библиотеки.
 *
 * @param ... Аргументы для форматирования (совместимы с fmt::format).
 * @throws Никаких исключений — функция не выбрасывает.
 * @warning Не добавляет временные метки, уровни или эмодзи — только то, что передано.
 */
#define LOG_RAW(...) log_raw_impl(__VA_ARGS__)

// "include/client_key.hpp"
// include/client_key.hpp
/**
 * @file client_key.hpp
 * @brief Краткое описание назначения заголовочного файла.
 *
 * Более подробное описание того, какие классы, функции, структуры объявляет файл.
 * Может содержать информацию о зависимости от других модулей или ограничениях использования.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-21
 * @version 1.0
 * @license MIT
 */
#pragma once
#include <vector>
#include <cstdint>
#include <cstring>
#include <unordered_map>

/**
 * @brief Структура для хранения ключа клиента.
 *
 * Используется как ключ в session_map и Deduplicator.
 */
struct ClientKey {
    uint32_t addr;          ///< IPv4-адрес клиента
    uint16_t port;          ///< Порт клиента
    uint8_t cid[8];         ///< Первые 8 байт SCID
    std::vector<uint8_t> token; ///< Токен из Retry-пакета

    bool operator==(const ClientKey &other) const noexcept;
};

/**
 * @brief Хеш-функция для ClientKey.
 */
struct ClientKeyHash {
    size_t operator()(const ClientKey &k) const noexcept;
};

/**
 * @brief Оператор сравнения для ClientKey.
 */
struct ClientKeyEqual {
    bool operator()(const ClientKey &a, const ClientKey &b) const noexcept;
};


// "include/quic_udp_deduplicator.hpp"
/**
 * @file quic_udp_deduplicator.hpp
 * @brief Краткое описание назначения заголовочного файла.
 *
 * Более подробное описание того, какие классы, функции, структуры объявляет файл.
 * Может содержать информацию о зависимости от других модулей или ограничениях использования.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-21
 * @version 1.0
 * @license MIT
 */
// include/quic_udp_deduplicator.hpp
// include/quic_udp_deduplicator.hpp

#pragma once
#include <unordered_map>
#include <vector>
#include <cstdint>
#include <string>
#include "client_key.hpp"

/**
 * @brief Класс для дедупликации QUIC-пакетов.
 *
 * Хранит информацию о первом Initial-пакете для каждого клиента.
 * Позволяет определить, является ли пакет повторным.
 */
class Deduplicator {
public:
    /**
     * @brief Структура для хранения информации о первом Initial-пакете.
     */
    struct PacketInfo {
        std::vector<uint8_t> token; ///< Токен из Retry-пакета
        std::vector<uint8_t> scid;  ///< SCID из первого Initial-пакета
        uint64_t packet_number;     ///< Номер пакета
        // Можно добавить другие поля, если нужно
    };

    /**
     * @brief Структура для ключа дедупликации.
     */
    struct PacketKey {
        ClientKey client_key;       ///< Ключ клиента (IP + порт)
        std::vector<uint8_t> scid;  ///< SCID
        std::vector<uint8_t> dcid;  ///< DCID
        uint64_t packet_number;     ///< Номер пакета
    };

    /**
     * @brief Хеш-функция для PacketKey.
     */
    struct PacketKeyHash {
        size_t operator()(const PacketKey &key) const noexcept;
    };

    /**
     * @brief Оператор сравнения для PacketKey.
     */
    struct PacketKeyEqual {
        bool operator()(const PacketKey &a, const PacketKey &b) const noexcept;
    };

    /**
     * @brief Конструктор.
     */
    Deduplicator() = default;

    /**
     * @brief Добавляет информацию о первом Initial-пакете.
     * @param key Ключ клиента.
     * @param info Информация о пакете.
     */
    void add_packet(const ClientKey &key, const PacketInfo &info);

    /**
     * @brief Проверяет, является ли пакет повторным.
     * @param key Ключ клиента.
     * @param scid SCID из пакета.
     * @param dcid DCID из пакета.
     * @param packet_number Номер пакета.
     * @return true, если пакет повторный, false — иначе.
     */
    [[nodiscard]] bool is_duplicate(const ClientKey &key, const std::vector<uint8_t> &scid, const std::vector<uint8_t> &dcid, uint64_t packet_number) const;

    /**
     * @brief Удаляет информацию о соединении.
     * @param key Ключ клиента.
     */
    void remove_connection(const ClientKey &key);

private:
    std::unordered_map<PacketKey, bool, PacketKeyHash, PacketKeyEqual> seen_packets_;
};