

// "main.cpp"
// main.cpp
/**
 * @file main.cpp
 * @brief –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –∑–∞–ø—É—Å–∫ HTTP/3 –∏ HTTP/2 —Å–µ—Ä–≤–µ—Ä–æ–≤.
 *
 * –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö.
 * –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-22
 * @version 1.0
 * @license MIT
 */

#include "include/http3/quic_udp_proxy.hpp"
#include "include/http2/tcp_proxy.hpp"
#include "include/http1/server.hpp"
#include "include/logger/logger.h"
#include <thread>
#include <iostream>
#include <string>
#include <stdexcept>
#include <csignal>

volatile sig_atomic_t running = true;

void signal_handler(int sig) {
    LOG_INFO("[INFO] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...", sig);
    running = false;
}

int main() {
    try {
        // üëá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        // –õ–æ–≥–≥–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ logger.h

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        // const int http3_port = 443;
        // const int http2_port = 443; // TCP-–ø—Ä–æ–∫—Å–∏ —Å–ª—É—à–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç
        const int http1_port = 443; // üëà –ò–°–ü–†–ê–í–õ–ï–ù–û: HTTP/1.1 —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç 443 –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        const std::string backend_ip = "10.8.0.11"; // IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ WireGuard
        // const int backend_http3_port = 8585; // –ü–æ—Ä—Ç H3-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–§
        // const int backend_http2_port = 8586;
        const int backend_http1_port = 8587; // üëà –ü–æ—Ä—Ç HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–§ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)

        // üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
        // QuicUdpProxy quic_proxy(http3_port, backend_ip, backend_http3_port);
        // TcpProxy tcp_proxy(http2_port, backend_ip, backend_http2_port);
      Http1Server http1_server(http1_port, backend_ip, backend_http1_port); // üëà –ü–µ—Ä–µ–¥–∞—ë–º backend_ip –∏ backend_http1_port

        // // –ó–∞–ø—É—Å–∫ QUIC-UDP –ø—Ä–æ–∫—Å–∏
        // std::thread quic_thread([http3_port, &quic_proxy]() {
        //     LOG_INFO("üöÄ QUIC-UDP –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", http3_port);
        //     if (!quic_proxy.run()) {
        //         LOG_ERROR("‚ùå QUIC-UDP –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π");
        //         std::exit(EXIT_FAILURE);
        //     }
        // });

        // // –ó–∞–ø—É—Å–∫ TCP-–ø—Ä–æ–∫—Å–∏
        // std::thread tcp_thread([http2_port, &tcp_proxy]() {
        //     LOG_INFO("üöÄ TCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", http2_port);
        //     if (!tcp_proxy.run()) {
        //         LOG_ERROR("‚ùå TCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π");
        //         std::exit(EXIT_FAILURE);
        //     }
        // });

          // –ó–∞–ø—É—Å–∫ HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞
        std::thread http1_thread([http1_port, &http1_server]() {
            LOG_INFO("üöÄ HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", http1_port);
            if (!http1_server.run()) {
                LOG_ERROR("‚ùå HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π");
                std::exit(EXIT_FAILURE);
            }
        });

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        std::signal(SIGINT, signal_handler);
        std::signal(SIGTERM, signal_handler);

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        // quic_thread.join();
        // tcp_thread.join();
        http1_thread.join();

        LOG_INFO("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç.");
    }
    catch (const std::invalid_argument &e) {
        LOG_ERROR("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞: {}", e.what());
        return EXIT_FAILURE;
    }
    catch (const std::out_of_range &e) {
        LOG_ERROR("–ü–æ—Ä—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞:  {}", e.what());
        return EXIT_FAILURE;
    }
    catch (const std::exception &e) {
        LOG_ERROR("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e.what());
        return EXIT_FAILURE;
    }

    LOG_INFO("üõë –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
    return EXIT_SUCCESS;
}

// "src/logger/logger.cpp"
/**
 * @file logger.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ ‚Äî –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CMake.
 *
 * –í—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–º —Ñ–∞–π–ª–µ logger.hpp,
 * –ø–æ—Å–∫–æ–ª—å–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏ std::source_location, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏ (CMake).
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-09-29
 * @version 1.0
 * @license MIT
 */

#include "logger/logger.h"

// –ù–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –≤—Å—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.

// "include/http1/server.hpp"
/**
 * @file server.hpp
 * @brief –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP/1.1 —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∏ HEAD –∑–∞–ø—Ä–æ—Å—ã.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∫—Å–∏.
 * –ù–µ —Ç—Ä–µ–±—É–µ—Ç TLS ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —á–∏—Å—Ç–æ–º TCP.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#pragma once

#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <atomic>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <fcntl.h>
#include <arpa/inet.h>
#include <csignal>
#include <cerrno>
#include <sys/select.h>
#include <thread>
#include "../logger/logger.h"

/**
 * @brief –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–≥–æ HTTP-–∑–∞–ø—Ä–æ—Å–∞.
 *
 * –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥, URL, –≤–µ—Ä—Å–∏—é, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞.
 */
struct HttpRequest
{
    std::string method;                                   ///< –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ (GET, POST –∏ —Ç.–¥.)
    std::string url;                                      ///< URL –∑–∞–ø—Ä–æ—Å–∞
    std::string version;                                  ///< –í–µ—Ä—Å–∏—è HTTP (HTTP/1.1)
    std::unordered_map<std::string, std::string> headers; ///< –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    std::string body;                                     ///< –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
};

/**
 * @brief –ö–ª–∞—Å—Å HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –°–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP/1.1 –∑–∞–ø—Ä–æ—Å—ã.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: GET, HEAD, favicon.ico, main.css, main.js.
 */
class Http1Server
{
public:
    /**
     * @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     * @param port –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å —Å–µ—Ä–≤–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8587).
     * @param backend_ip IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     * @param backend_port –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     */
    explicit Http1Server(int port = 8587, const std::string &backend_ip = "10.8.0.11", int backend_port = 8587);

    /**
     * @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/1.1 —Å–µ—Ä–≤–µ—Ä.
     * @return true –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    bool run();

    /**
     * @brief –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HTTP/1.1 —Å–µ—Ä–≤–µ—Ä.
     */
    void stop();

private:
    int listen_fd_;                            ///< –°–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    int port_;                                 ///< –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
    volatile sig_atomic_t running_{true};      ///< –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    std::unordered_map<int, int> connections_; ///< –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: client_fd -> backend_fd
    std::unordered_map<int, time_t> timeouts_; ///< –ö–∞—Ä—Ç–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤: client_fd -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    std::string backend_ip_;                   ///< IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏
    int backend_port_;                         ///< –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏

    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º —Å–æ–∫–µ—Ç–∞.
     * @param fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞.
     * @return true –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    [[nodiscard]] bool set_nonblocking(int fd) noexcept;

    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤ –†–æ—Å—Å–∏–∏.
     * @return –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –±—ç–∫–µ–Ω–¥–∞ –∏–ª–∏ -1 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    [[nodiscard]] int connect_to_backend() noexcept; // üëà –î–û–ë–ê–í–õ–ï–ù–û

    /**
     * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
     */
    void handle_new_connection() noexcept;

    /**
     * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.
     */
    void handle_io_events() noexcept;


/**
 * @brief –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º.
 * @param from_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
 * @param to_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
 * @param request_str –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞).
 * @return true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, false ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
 */
[[nodiscard]] bool forward_data(int from_fd, int to_fd, const std::string& request_str) noexcept;

/**
 * @brief –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É.
 * @param from_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
 * @param to_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
 * @return true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, false ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
 */
[[nodiscard]] bool forward_data(int from_fd, int to_fd) noexcept;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏.
     * @return –°—Ç—Ä–æ–∫–∞ —Å HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
     */
    [[nodiscard]] std::string generate_index_html() const;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è favicon.ico.
     * @return –°—Ç—Ä–æ–∫–∞ —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ favicon.
     */
    [[nodiscard]] std::string generate_favicon() const;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è main.css.
     * @return –°—Ç—Ä–æ–∫–∞ —Å CSS-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
     */
    [[nodiscard]] std::string generate_main_css() const;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è main.js.
     * @return –°—Ç—Ä–æ–∫–∞ —Å JS-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
     */
    [[nodiscard]] std::string generate_main_js() const;

    /**
     * @brief –ü–∞—Ä—Å–∏—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∏–∑ —Å—ã—Ä–æ–π —Å—Ç—Ä–æ–∫–∏.
     *
     * –†–∞–∑–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ (–º–µ—Ç–æ–¥, URL, –≤–µ—Ä—Å–∏—è) –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É `HttpRequest`.
     * –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–ª–æ –Ω–µ –ø–∞—Ä—Å—è—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞.
     *
     * @param request_str –°—ã—Ä–æ–π HTTP-–∑–∞–ø—Ä–æ—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
     * @return –û–±—ä–µ–∫—Ç `HttpRequest` —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
     */
    static HttpRequest parse_http_request(const std::string &request_str);
};

// "src/http1/server.cpp"
/**
 * @file server.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—ã—Ö HTTP/1.1 –∑–∞–ø—Ä–æ—Å–æ–≤ (GET, HEAD) –±–µ–∑ TLS.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∫—Å–∏.
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#include "../../include/http1/server.hpp"
#include <cstring>
#include <algorithm>
#include <sstream>
#include <poll.h>
#include <csignal>
// === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Http1Server ===

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
Http1Server::Http1Server(int port, const std::string &backend_ip, int backend_port)
    : listen_fd_(-1), port_(port), backend_ip_(backend_ip), backend_port_(backend_port)
{
    std::atomic<bool> should_stop{false};
    signal(SIGTERM, [](int)
           {
               LOG_INFO("–ü–æ–ª—É—á–µ–Ω SIGTERM ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...");
               // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –≤—ã–∑–≤–∞—Ç—å stop()
               // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ singleton
           });
    // –ü–µ—Ä–µ–¥ server.run():
    while (!should_stop)
    {
        if (!server.run())
            break;
    }
}

// üëá –°–¥–µ–ª–∞–ª–∏ parse_http_request —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–º –∫–ª–∞—Å—Å–∞
HttpRequest Http1Server::parse_http_request(const std::string& request_str) {
    HttpRequest req;
    size_t pos = request_str.find("\r\n");
    if (pos != std::string::npos) {
        std::string first_line = request_str.substr(0, pos);
        std::istringstream iss(first_line);
        iss >> req.method >> req.url >> req.version;
    }

    // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    size_t start = pos + 2; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º \r\n
    while (start < request_str.size()) {
        size_t end = request_str.find("\r\n", start);
        if (end == std::string::npos) break;

        std::string line = request_str.substr(start, end - start);
        if (line.empty()) { // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫–æ–Ω–µ—Ü –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            req.body = request_str.substr(end + 2); // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ \r\n\r\n
            break;
        }

        size_t colon_pos = line.find(':');
        if (colon_pos != std::string::npos) {
            std::string key = line.substr(0, colon_pos);
            std::string value = line.substr(colon_pos + 1);
            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
            key.erase(0, key.find_first_not_of(" \t"));
            key.erase(key.find_last_not_of(" \t") + 1);
            value.erase(0, value.find_first_not_of(" \t"));
            value.erase(value.find_last_not_of(" \t") + 1);
            req.headers[key] = value;
        }

        start = end + 2;
    }

    return req;
}

bool Http1Server::run() {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(port_);
    if (bind(listen_fd_, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_) {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        FD_SET(listen_fd_, &read_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const auto& [client_fd, backend_fd] : connections_) {
            FD_SET(client_fd, &read_fds);
            FD_SET(backend_fd, &read_fds);
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        int max_fd = listen_fd_;
        for (const auto& [client_fd, backend_fd] : connections_) {
            max_fd = std::max({max_fd, client_fd, backend_fd});
        }

        timeval timeout{.tv_sec = 1, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity < 0 && errno != EINTR) {
            LOG_ERROR("–û—à–∏–±–∫–∞ select: {}", strerror(errno));
            continue;
        }

        if (activity > 0) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if (FD_ISSET(listen_fd_, &read_fds)) {
                handle_new_connection();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
            handle_io_events();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end(); ) {
            if (now - it->second > 30) { // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                int client_fd = it->first;
                ::close(client_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}", client_fd);
            } else {
                ++it;
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto& [client_fd, backend_fd] : connections_) {
        ::close(client_fd);
        ::close(backend_fd);
    }
    connections_.clear();

    if (listen_fd_ != -1) {
        ::close(listen_fd_);
    }

    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return true;
}

void Http1Server::stop() {
    running_ = false;
}

bool Http1Server::set_nonblocking(int fd) noexcept {
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1) {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

// –ú–µ—Ç–æ–¥ connect_to_backend()
int Http1Server::connect_to_backend() noexcept { // üëà –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–¥–µ—Å—å
    int backend_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (backend_fd < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(backend_fd)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        ::close(backend_fd);
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    backend_addr.sin_port = htons(backend_port_);
    if (inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr) <= 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {}", backend_ip_);
        ::close(backend_fd);
        return -1;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    if (connect(backend_fd, (struct sockaddr*)&backend_addr, sizeof(backend_addr)) < 0) {
        if (errno != EINPROGRESS) {
            LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        LOG_DEBUG("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", backend_ip_, backend_port_);

        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        fd_set write_fds;
        FD_ZERO(&write_fds);
        FD_SET(backend_fd, &write_fds);

        timeval timeout{.tv_sec = 5, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        int activity = select(backend_fd + 1, nullptr, &write_fds, nullptr, &timeout);
        if (activity <= 0) {
            LOG_ERROR("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{} (errno={})", backend_ip_, backend_port_, errno);
            ::close(backend_fd);
            return -1;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        int error = 0;
        socklen_t len = sizeof(error);
        if (getsockopt(backend_fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0) {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }

        if (error != 0) {
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{}: {}", backend_ip_, backend_port_, strerror(error));
            ::close(backend_fd);
            return -1;
        }

        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", backend_ip_, backend_port_);
    } else {
        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)", backend_ip_, backend_port_);
    }

    return backend_fd;
}

void Http1Server::handle_new_connection() noexcept {
    struct sockaddr_in client_addr{};
    socklen_t client_len = sizeof(client_addr);
    int client_fd = accept(listen_fd_, (struct sockaddr*)&client_addr, &client_len);
    if (client_fd < 0) {
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            LOG_ERROR("–û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(client_fd)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // üëá –õ–û–ì–ò–†–£–ï–ú –ê–î–†–ï–° –ö–õ–ò–ï–ù–¢–ê –ò –ü–û–†–¢
    std::string client_ip_str = inet_ntoa(client_addr.sin_addr);
    uint16_t client_port_num = ntohs(client_addr.sin_port);
    LOG_INFO("üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏
    int backend_fd = connect_to_backend();
    if (backend_fd == -1) {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.");
        ::close(client_fd);
        return; // ‚ùó –í–ê–ñ–ù–û: –ù–ï –î–û–ë–ê–í–õ–Ø–¢–¨ –í connections_!
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connections_[client_fd] = backend_fd;
    timeouts_[client_fd] = time(nullptr); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
}

// –ó–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ handle_io_events()
void Http1Server::handle_io_events() noexcept {
    auto connections_copy = connections_;
    for (const auto& [client_fd, backend_fd] : connections_copy) {
        if (backend_fd == -1) { // üëà –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            LOG_WARN("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π backend_fd (-1) –¥–ª—è client_fd={}. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.", client_fd);
            ::close(client_fd);
            connections_.erase(client_fd);
            timeouts_.erase(client_fd);
            continue;
        }

        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        FD_SET(client_fd, &read_fds);
        FD_SET(backend_fd, &read_fds);
        int max_fd = std::max(client_fd, backend_fd);
        timeval timeout{.tv_sec = 0, .tv_usec = 10000}; // 10 –º—Å
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity <= 0) {
            continue;
        }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
        if (FD_ISSET(client_fd, &read_fds)) {
            LOG_INFO("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
            LOG_DEBUG("üîÑ –í—ã–∑–æ–≤ forward_data(client_fd={}, backend_fd={})", client_fd, backend_fd);

            // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            char buffer[8192];
            ssize_t bytes_read = recv(client_fd, buffer, sizeof(buffer), 0);
            if (bytes_read > 0) {
                std::string request_str(buffer, bytes_read); // üëà –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                LOG_INFO("‚úÖ  ( 2 )  –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({} –±–∞–π—Ç):", bytes_read);
            if (!request_str.empty()) {
                LOG_DEBUG("üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø—Ä–æ—Å–∞:\n{}", request_str);
            } else {
                LOG_DEBUG("üìù –ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π");
            }

                // üëá –ü–µ—Ä–µ–¥–∞—ë–º request_str –≤ forward_data
                bool keep_alive = forward_data(client_fd, backend_fd, request_str);
                LOG_DEBUG("‚¨ÖÔ∏è forward_data –≤–µ—Ä–Ω—É–ª: {}", keep_alive ? "true" : "false");

                if (!keep_alive) {
                    ::close(client_fd);
                    ::close(backend_fd);
                    connections_.erase(client_fd);
                    timeouts_.erase(client_fd);
                    LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
                } else {
                    timeouts_[client_fd] = time(nullptr);
                    LOG_DEBUG("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è client_fd={}: {}", client_fd, timeouts_[client_fd]);
                }
            } else if (bytes_read == 0) {
                LOG_INFO("‚úÖ  ( 3 )  –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (0 –±–∞–π—Ç):");
                LOG_INFO("üîö –ö–ª–∏–µ–Ω—Ç (client_fd={}) –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (recv –≤–µ—Ä–Ω—É–ª 0)", client_fd);
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (–±–ª–æ–∫ 2):: –∫–ª–∏–µ–Ω—Ç {}, backend_fd={}", client_fd, backend_fd);
            } else {
                LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (client_fd={}): {}", client_fd, strerror(errno));
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
            }
        }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
        if (FD_ISSET(backend_fd, &read_fds)) {
            LOG_INFO("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {}", backend_fd);
            if (!forward_data(backend_fd, client_fd)) {
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            } else {
                timeouts_[client_fd] = time(nullptr);
            }
        }
    }
}
bool Http1Server::forward_data(int from_fd, int to_fd, const std::string& request_str) noexcept {
    LOG_DEBUG("üîÑ –ù–∞—á–∞–ª–æ forward_data(from_fd={}, to_fd={}, request_str.size={})", from_fd, to_fd, request_str.size());

    // –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
    HttpRequest req = parse_http_request(request_str);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏
    std::string new_request = req.method + " " + req.url + " " + req.version + "\r\n";
    for (const auto& [key, value] : req.headers) {
        new_request += key + ": " + value + "\r\n";
    }
    new_request += "Connection: close\r\n"; // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    new_request += "\r\n";
    new_request += req.body;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –†–æ—Å—Å–∏–∏
    ssize_t total_sent = 0;
    while (total_sent < static_cast<ssize_t>(new_request.size())) {
        size_t remaining = static_cast<size_t>(new_request.size() - total_sent);
        ssize_t bytes_sent = send(to_fd, new_request.c_str() + total_sent, remaining, 0);
        if (bytes_sent < 0) {
            if (errno == EAGAIN || errno == EWOULDBLOCK) {
                continue;
            } else {
                LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
                ::close(from_fd);
                ::close(to_fd);
                return false;
            }
        }
        total_sent += bytes_sent;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏
    char buffer[8192];
    std::string response_str;
    ssize_t bytes_read;
    do {
        bytes_read = recv(to_fd, buffer, sizeof(buffer), 0);
        if (bytes_read > 0) {
            response_str.append(buffer, bytes_read);
        }
    } while (bytes_read > 0);

    LOG_DEBUG("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏: {}", response_str);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ HEAD-–∑–∞–ø—Ä–æ—Å–∞
    if (req.method == "HEAD") {
        size_t body_start = response_str.find("\r\n\r\n");
        if (body_start != std::string::npos) {
            response_str = response_str.substr(0, body_start + 4); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    total_sent = 0;
    while (total_sent < static_cast<ssize_t>(response_str.size())) {
        size_t remaining = static_cast<size_t>(response_str.size() - total_sent);
        ssize_t bytes_sent = send(from_fd, response_str.c_str() + total_sent, remaining, 0);
        if (bytes_sent < 0) {
            if (errno == EAGAIN || errno == EWOULDBLOCK) {
                continue;
            } else {
                LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {}", strerror(errno));
                ::close(from_fd);
                ::close(to_fd);
                return false;
            }
        }
        total_sent += bytes_sent;
    }

    return true;
}
bool Http1Server::forward_data(int from_fd, int to_fd) noexcept {
    LOG_DEBUG("üîÑ –ù–∞—á–∞–ª–æ forward_data(from_fd={}, to_fd=*) ‚Äî –±–µ–∑ request_str", from_fd);

    char buffer[8192];
    std::string data;

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–±—ç–∫–µ–Ω–¥)
    ssize_t bytes_read;
    do {
        bytes_read = recv(from_fd, buffer, sizeof(buffer), 0);
        if (bytes_read > 0) {
            data.append(buffer, bytes_read);
        }
    } while (bytes_read > 0);

    if (data.empty()) {
        LOG_WARN("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç fd={}", from_fd);
        return false;
    }

    LOG_DEBUG("üì• –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –æ—Ç fd={}", data.size(), from_fd);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–∫–ª–∏–µ–Ω—Ç)
    ssize_t total_sent = 0;
    while (total_sent < static_cast<ssize_t>(data.size())) {
        size_t remaining = static_cast<size_t>(data.size() - total_sent);
        ssize_t bytes_sent = send(to_fd, data.c_str() + total_sent, remaining, 0);
        if (bytes_sent < 0) {
            if (errno == EAGAIN || errno == EWOULDBLOCK) {
                continue;
            } else {
                LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ fd={}: {}", to_fd, strerror(errno));
                ::close(from_fd);
                ::close(to_fd);
                return false;
            }
        }
        total_sent += bytes_sent;
    }

    LOG_DEBUG("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç –Ω–∞ fd={}", data.size(), to_fd);
    return true;
}

// "CMakeLists.txt"
cmake_minimum_required(VERSION 3.26)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è VERSION
if(POLICY CMP0048)
    cmake_policy(SET CMP0048 NEW)
endif()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞
if(NOT DEFINED APP_VERSION)
    set(APP_VERSION "0.1.0" CACHE STRING "–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
endif()

# –ü—Ä–æ–µ–∫—Ç
project(quic-proxy VERSION ${APP_VERSION} LANGUAGES CXX)

message(STATUS "üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º quic-proxy v${APP_VERSION}")
message(STATUS "üîç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${CMAKE_CURRENT_SOURCE_DIR}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ C++
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
set(CMAKE_BUILD_TYPE Release)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
add_compile_options(-O2 -Wall -Wextra -Wpedantic)

# –ü–æ–∏—Å–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ fmt
find_package(fmt CONFIG REQUIRED)

# === –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ===
add_executable(quic_proxy
    main.cpp
    src/http2/tcp_proxy.cpp
    src/http3/quic_udp_proxy.cpp
    src/http3/client_key.cpp
    src/http3/quic_udp_deduplicator.cpp
    src/http1/server.cpp  # üëà –î–û–ë–ê–í–õ–ï–ù–û: —Ñ–∞–π–ª HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞
)

# –ü–æ–∏—Å–∫ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenSSL
find_package(OpenSSL REQUIRED)

# –õ–∏–Ω–∫–æ–≤–∫–∞: pthread –∏ fmt
target_link_libraries(quic_proxy PRIVATE
    pthread
    fmt::fmt
    OpenSSL::SSL
    OpenSSL::Crypto
)