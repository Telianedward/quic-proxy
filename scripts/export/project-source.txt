

// "main.cpp"
// main.cpp
/**
 * @file main.cpp
 * @brief –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –∑–∞–ø—É—Å–∫ HTTP/3 –∏ HTTP/2 —Å–µ—Ä–≤–µ—Ä–æ–≤.
 *
 * –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö.
 * –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-22
 * @version 1.0
 * @license MIT
 */

#include "include/http3/quic_udp_proxy.hpp"
#include "include/http2/tcp_proxy.hpp"
#include "include/logger/logger.h"
#include <thread>
#include <iostream>
#include <string>
#include <stdexcept>
#include <csignal>

volatile sig_atomic_t running = true;

void signal_handler(int sig) {
    LOG_INFO("[INFO] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...", sig);
    running = false;
}

int main() {
    try {
        // üëá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        // –õ–æ–≥–≥–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ logger.h

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        const int http3_port = 443;
        const int http2_port = 443; // TCP-–ø—Ä–æ–∫—Å–∏ —Å–ª—É—à–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç
        const std::string backend_ip = "10.8.0.11"; // IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ WireGuard
        const int backend_port = 8586; // –ü–æ—Ä—Ç H3-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–§

        // üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
        QuicUdpProxy quic_proxy(http3_port, backend_ip, backend_port);
        TcpProxy tcp_proxy(http2_port, backend_ip, backend_port);

        // –ó–∞–ø—É—Å–∫ QUIC-UDP –ø—Ä–æ–∫—Å–∏
        std::thread quic_thread([http3_port, &quic_proxy]() { // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º http3_port –∏ quic_proxy
            LOG_INFO("üöÄ QUIC-UDP –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", http3_port);
            if (!quic_proxy.run()) {
                LOG_ERROR("‚ùå QUIC-UDP –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π");
                std::exit(EXIT_FAILURE);
            }
        });

        // –ó–∞–ø—É—Å–∫ TCP-–ø—Ä–æ–∫—Å–∏
        std::thread tcp_thread([http2_port, &tcp_proxy]() { // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º http2_port –∏ tcp_proxy
            LOG_INFO("üöÄ TCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", http2_port);
            if (!tcp_proxy.run()) {
                LOG_ERROR("‚ùå TCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π");
                std::exit(EXIT_FAILURE);
            }
        });

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        std::signal(SIGINT, signal_handler);
        std::signal(SIGTERM, signal_handler);

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        quic_thread.join();
        tcp_thread.join();

        LOG_INFO("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç.");
    }
    catch (const std::invalid_argument &e) {
        LOG_ERROR("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞: {}", e.what());
        return EXIT_FAILURE;
    }
    catch (const std::out_of_range &e) {
        LOG_ERROR("–ü–æ—Ä—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞:  {}", e.what());
        return EXIT_FAILURE;
    }
    catch (const std::exception &e) {
        LOG_ERROR("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e.what());
        return EXIT_FAILURE;
    }

    LOG_INFO("üõë –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
    return EXIT_SUCCESS;
}

// "src/http3/quic_udp_proxy.cpp"
// src/quic_udp_proxy.cpp
/**
 * @file quic_udp_proxy.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è QUIC-UDP –ø—Ä–æ–∫—Å–∏.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ QUIC-–ø–∞–∫–µ—Ç–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π I/O (select) –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-22
 * @version 1.0
 * @license MIT
 */

#include "../../include/http3/quic_udp_proxy.hpp"
#include <cstdio>
#include <ctime>
#include <random>

// === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ QuicUdpProxy ===

QuicUdpProxy::QuicUdpProxy(int listen_port, const std::string& backend_ip, int backend_port)
    : listen_port_(listen_port), backend_port_(backend_port), backend_ip_(backend_ip) {}

bool QuicUdpProxy::run() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    std::random_device rd;
    std::mt19937 gen(rd());

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    std::signal(SIGINT, signal_handler);
    std::signal(SIGTERM, signal_handler);

    // --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ—Ä—Ç 443) ---
    udp_fd_ = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (udp_fd_ < 0) {
        LOG_ERROR("[ERROR] socket udp_fd failed: {}", strerror(errno));
        return false;
    }

    int opt = 1;
    if (setsockopt(udp_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("[ERROR] setsockopt SO_REUSEADDR failed: {}", strerror(errno));
    }
    if (setsockopt(udp_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("[ERROR] setsockopt SO_REUSEPORT failed: {}", strerror(errno));
    }
    if (set_nonblocking(udp_fd_) == -1) {
        LOG_ERROR("[ERROR] set_nonblocking udp_fd failed: {}", strerror(errno));
        ::close(udp_fd_);
        return false;
    }

    // --- –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ—Ä—Ç—É ---
    struct sockaddr_in listen_addr{};
    memset(&listen_addr, 0, sizeof(listen_addr));
    listen_addr.sin_family = AF_INET;
    listen_addr.sin_addr.s_addr = INADDR_ANY;
    listen_addr.sin_port = htons(listen_port_);

    if (bind(udp_fd_, (struct sockaddr *)&listen_addr, sizeof(listen_addr)) < 0) {
        LOG_ERROR("[ERROR] bind udp_fd failed: {}", strerror(errno));
        ::close(udp_fd_);
        return false;
    }

    // --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –†–§ ---
    wg_fd_ = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (wg_fd_ < 0) {
        LOG_ERROR("[ERROR] socket wg_fd failed: {}", strerror(errno));
        ::close(udp_fd_);
        return false;
    }
    if (set_nonblocking(wg_fd_) == -1) {
        LOG_ERROR("[ERROR] set_nonblocking wg_fd failed: {}", strerror(errno));
        ::close(udp_fd_);
        ::close(wg_fd_);
        return false;
    }

    struct sockaddr_in backend_addr{};
    memset(&backend_addr, 0, sizeof(backend_addr));
    backend_addr.sin_family = AF_INET;
    inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr);
    backend_addr.sin_port = htons(backend_port_);

    LOG_INFO("[INFO] –ó–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}, —Å–ª—É—à–∞–µ—Ç 0.0.0.0, –±—ç–∫–µ–Ω–¥: {}:{}",
             listen_port_, backend_ip_, backend_port_);

    char buf[MAX_PACKET_SIZE];
    fd_set read_fds;

    while (running_) {
        FD_ZERO(&read_fds);
        FD_SET(udp_fd_, &read_fds);
        FD_SET(wg_fd_, &read_fds);
        int max_fd = std::max(udp_fd_, wg_fd_);
        timeval timeout{.tv_sec = 0, .tv_usec = 100000}; // 100 –º—Å
        int activity = select(max_fd + 1, &read_fds, nullptr, nullptr, &timeout);

        if (activity < 0 && errno != EINTR) {
            LOG_ERROR("[ERROR] select error: {}", strerror(errno));
            continue;
        }

        // === –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–õ–ò–ï–ù–¢ ‚Üí –°–ï–†–í–ï–† ===
        if (FD_ISSET(udp_fd_, &read_fds)) {
            struct sockaddr_in client_addr{};
            socklen_t client_len = sizeof(client_addr);
            ssize_t n = recvfrom(udp_fd_, buf, sizeof(buf), 0,
                                 (struct sockaddr *)&client_addr, &client_len);
            if (n < 0 || static_cast<size_t>(n) >= MAX_PACKET_SIZE) {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
                    LOG_ERROR("recvfrom client failed: {}", strerror(errno));
                }
                continue;
            }
            handle_client_packet(buf, n, client_addr, client_len);
        }

        // === –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ï–†–í–ï–† ‚Üí –ö–õ–ò–ï–ù–¢ ===
        if (FD_ISSET(wg_fd_, &read_fds)) {
            struct sockaddr_in backend_addr{};
            socklen_t backend_len = sizeof(backend_addr);
            ssize_t n = recvfrom(wg_fd_, buf, sizeof(buf), 0,
                                 (struct sockaddr *)&backend_addr, &backend_len);
            if (n < 0 || static_cast<size_t>(n) >= MAX_PACKET_SIZE) {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
                    LOG_ERROR("recvfrom backend failed: {}", strerror(errno));
                }
                continue;
            }
            handle_backend_packet(buf, n, backend_addr, backend_len);
        }
    }

    LOG_INFO("[INFO] –ü—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    if (udp_fd_ != -1) {
        ::close(udp_fd_);
    }
    if (wg_fd_ != -1) {
        ::close(wg_fd_);
    }
    return true;
}

void QuicUdpProxy::stop() {
    running_ = false;
}

int QuicUdpProxy::set_nonblocking(int fd) noexcept {
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1) {
        return -1;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK);
}

std::vector<uint8_t> QuicUdpProxy::generate_local_cid() noexcept {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 255);
    std::vector<uint8_t> cid(8);
    for (auto &b : cid) {
        b = static_cast<uint8_t>(dis(gen));
    }
    return cid;
}

bool QuicUdpProxy::get_external_ip(std::string &ip_out) noexcept {
    int sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock < 0) {
        return false;
    }
    struct sockaddr_in temp_addr{};
    temp_addr.sin_family = AF_INET;
    temp_addr.sin_port = htons(53);
    inet_pton(AF_INET, "8.8.8.8", &temp_addr.sin_addr);
    if (::connect(sock, (struct sockaddr *)&temp_addr, sizeof(temp_addr)) < 0) {
        ::close(sock);
        return false;
    }
    socklen_t len = sizeof(temp_addr);
    if (getsockname(sock, (struct sockaddr *)&temp_addr, &len) < 0) {
        ::close(sock);
        return false;
    }
    ip_out = inet_ntoa(temp_addr.sin_addr);
    ::close(sock);
    return true;
}

void QuicUdpProxy::print_hex(const uint8_t *data, size_t len, const std::string &label) noexcept {
    if (!data || len == 0) {
        LOG_DEBUG("[DEBUG] {} : –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ", label);
        return;
    }
    LOG_DEBUG("[DEBUG] {} : ", label);
    for (size_t i = 0; i < std::min(len, 32UL); ++i) {
        LOG_DEBUG("{:02x} ", data[i]);
    }
    if (len > 32) {
        LOG_DEBUG("...");
    }
    LOG_DEBUG("");
}

void QuicUdpProxy::signal_handler(int sig) {
    LOG_INFO("[INFO] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...", sig);
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ main, –≥–¥–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω stop()
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å atomic_flag
    exit(0);
}

void QuicUdpProxy::handle_client_packet(char *buf, ssize_t n, const sockaddr_in &client_addr, socklen_t client_len) noexcept {
    (void)client_len; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è "unused parameter"

    std::string client_ip = inet_ntoa(client_addr.sin_addr);
    uint16_t client_port = ntohs(client_addr.sin_port);

    LOG_INFO("=== [CLIENT ‚Üí SERVER] ===");
    LOG_INFO("–ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –æ—Ç {}:{}",
             n,
             client_ip.c_str(),
             client_port);
    print_hex(reinterpret_cast<uint8_t *>(buf), static_cast<size_t>(n), "HEADER");

    if (n < 6) {
        LOG_WARN("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞–∫–µ—Ç ({}) –±–∞–π—Ç", n);
        return;
    }

    uint8_t packet_type = buf[0];

    if ((packet_type & 0xC0) != 0xC0) {
        LOG_DEBUG("Short Header ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Retry-–ø–∞–∫–µ—Ç–∞
    if (n >= 9 && static_cast<unsigned char>(buf[0]) == 0xF0) {
        LOG_INFO("Received Retry packet");
        size_t token_offset = 9;
        size_t token_len = buf[token_offset];
        std::vector<uint8_t> token(buf + token_offset + 1, buf + token_offset + 1 + token_len);

        ClientKey key{};
        key.addr = client_addr.sin_addr.s_addr;
        key.port = client_addr.sin_port;
        std::memset(key.cid, 0, 8);
        std::memcpy(key.cid, buf + 9, 8); // –ü–µ—Ä–≤—ã–µ 8 –±–∞–π—Ç –ø–æ—Å–ª–µ —Ç–æ–∫–µ–Ω–∞ ‚Äî —ç—Ç–æ SCID.

        key.token = token;
        session_map_[key] = key;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Retry-–ø–∞–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        ssize_t sent = sendto(udp_fd_, buf, n, 0,
                              (struct sockaddr *)&client_addr, sizeof(client_addr));
        if (sent < 0) {
            LOG_ERROR("sendto client failed: {}", strerror(errno));
        } else {
            LOG_INFO("Retry packet sent to client");
        }
        return;
    }

    uint32_t version = (buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4];
    size_t pos = 5;
    uint8_t dcil = (buf[pos] >> 4) & 0x0F;
    uint8_t scil = buf[pos] & 0x0F;

    LOG_INFO("QUIC –í–µ—Ä—Å–∏—è: 0x{:08x}, DCIL={}, SCIL={}",
             version,
             static_cast<int>(dcil),
             static_cast<int>(scil));

    if (dcil == 0 || scil == 0 || pos + 2 + dcil + scil > static_cast<size_t>(n)) {
        LOG_WARN("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ CID –¥–ª–∏–Ω—ã");
        return;
    }

    uint8_t *scid = reinterpret_cast<uint8_t *>(&buf[pos + 2 + dcil]);

    ClientKey key{};
    key.addr = client_addr.sin_addr.s_addr;
    key.port = client_addr.sin_port;
    std::memset(key.cid, 0, 8);
    std::memcpy(key.cid, scid, std::min(static_cast<size_t>(scil), 8UL));

    Deduplicator::PacketInfo info;
    info.scid = std::vector<uint8_t>(scid, scid + scil);
    info.token = {};

    size_t cid_offset = pos + 2;
    size_t pn_offset = cid_offset + dcil + scil;
    if (pn_offset >= static_cast<size_t>(n)) {
        LOG_WARN("–ü–∞–∫–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è Packet Number");
        return;
    }

    uint64_t packet_number = 0;
    for (size_t i = 0; i < 4 && pn_offset + i < static_cast<size_t>(n); ++i) {
        packet_number = (packet_number << 8) | buf[pn_offset + i];
    }

    if (deduplicator_.is_duplicate(key, info.scid, info.token, packet_number)) {
        LOG_INFO("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
        return;
    }

    deduplicator_.add_packet(key, info);

    auto it = session_map_.find(key);
    if (it == session_map_.end()) {
        session_map_[key] = key;
        reverse_map_[info.scid] = key;
        LOG_INFO("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {}:{} ‚Üí SCID: {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}",
                 client_ip.c_str(),
                 client_port,
                 key.cid[0],
                 key.cid[1],
                 key.cid[2],
                 key.cid[3],
                 key.cid[4],
                 key.cid[5],
                 key.cid[6],
                 key.cid[7]);
    } else {
        LOG_DEBUG("Reuse SCID: {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}",
                  key.cid[0],
                  key.cid[1],
                  key.cid[2],
                  key.cid[3],
                  key.cid[4],
                  key.cid[5],
                  key.cid[6],
                  key.cid[7]);
    }

    if (it != session_map_.end() && !it->second.token.empty()) {
        LOG_INFO("Adding token to packet for SCID: {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}",
                 key.cid[0], key.cid[1], key.cid[2], key.cid[3],
                 key.cid[4], key.cid[5], key.cid[6], key.cid[7]);
        if (static_cast<size_t>(n) < 9 + 1 + it->second.token.size()) {
            LOG_WARN("Packet too short to add token");
            return;
        }
        buf[9] = static_cast<uint8_t>(it->second.token.size());
        std::memcpy(buf + 10, it->second.token.data(), it->second.token.size());
        n = std::max(n, 10 + static_cast<ssize_t>(it->second.token.size()));
    }

    LOG_INFO("–ü–∞–∫–µ—Ç –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –†–§:");
    print_hex(reinterpret_cast<uint8_t *>(buf), static_cast<size_t>(n), "SEND_TO_RF");

    struct sockaddr_in backend_addr{};
    memset(&backend_addr, 0, sizeof(backend_addr));
    backend_addr.sin_family = AF_INET;
    inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr);
    backend_addr.sin_port = htons(backend_port_);

    ssize_t sent = sendto(wg_fd_, buf, n, 0,
                          (struct sockaddr *)&backend_addr, sizeof(backend_addr));
    if (sent < 0) {
        LOG_ERROR("sendto backend failed: {}", strerror(errno));
    } else {
        LOG_INFO("–ü–µ—Ä–µ—Å–ª–∞–Ω–æ {} –±–∞–π—Ç –≤ –†–§", sent);
    }
}

void QuicUdpProxy::handle_backend_packet(char *buf, ssize_t n, const sockaddr_in &backend_addr, socklen_t backend_len) noexcept {
    (void)backend_addr; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è "unused parameter"
    (void)backend_len; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è "unused parameter"

    LOG_INFO("–ü–∞–∫–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç –†–§:");
    print_hex(reinterpret_cast<uint8_t *>(buf), static_cast<size_t>(n), "RECV_FROM_RF");
    LOG_INFO("=== [SERVER ‚Üí CLIENT] ===");
    LOG_INFO("–ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", n);
    print_hex(reinterpret_cast<uint8_t *>(buf), static_cast<size_t>(n), "REPLY_HEADER");

    if (n < 6) {
        LOG_WARN("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞–∫–µ—Ç ({}) –±–∞–π—Ç", n);
        return;
    }

    uint8_t packet_type = buf[0];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Retry-–ø–∞–∫–µ—Ç–∞
    if ((packet_type & 0xF0) == 0xF0) {
        LOG_INFO("Received Retry packet from server");
        if (n < 9) {
            LOG_WARN("Retry packet too short");
            return;
        }
        size_t pos = 5;
        uint8_t dcil = (buf[pos] >> 4) & 0x0F;
        uint8_t scil = buf[pos] & 0x0F;
        LOG_INFO("Retry packet: DCIL={}, SCIL={}", static_cast<int>(dcil), static_cast<int>(scil));

        size_t min_retry_size = pos + 1 + dcil + scil + 1;
        if (static_cast<size_t>(n) < min_retry_size) {
            LOG_WARN("Retry packet too short for CID fields");
            return;
        }

        uint8_t *scid = reinterpret_cast<uint8_t *>(&buf[pos + 1 + dcil]);
        size_t token_offset = pos + 1 + dcil + scil;
        size_t token_len = buf[token_offset];
        if (token_offset + 1 + token_len > static_cast<size_t>(n)) {
            LOG_WARN("Invalid token length in Retry packet");
            return;
        }
        std::vector<uint8_t> token(buf + token_offset + 1, buf + token_offset + 1 + token_len);

        ClientKey key{};
        key.addr = 0; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ reverse_map
        key.port = 0;
        std::memset(key.cid, 0, 8);
        std::memcpy(key.cid, scid, std::min(static_cast<size_t>(scil), 8UL));
        key.token = token;

        // –ü–æ–∏—Å–∫ –∫–ª—é—á–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ SCID
        auto it = reverse_map_.find(std::vector<uint8_t>(scid, scid + scil));
        if (it == reverse_map_.end()) {
            LOG_WARN("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π SCID ‚Äî –ø–∞–∫–µ—Ç –ø–æ—Ç–µ—Ä—è–ª—Å—è");
            return;
        }
        key = it->second;

        session_map_[key] = key;
        LOG_INFO("Saved Retry token for client: SCID={:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}",
                 key.cid[0], key.cid[1], key.cid[2], key.cid[3],
                 key.cid[4], key.cid[5], key.cid[6], key.cid[7]);

        struct sockaddr_in client_dest{};
        client_dest.sin_family = AF_INET;
        client_dest.sin_addr.s_addr = key.addr;
        client_dest.sin_port = key.port;

        ssize_t sent = sendto(udp_fd_, buf, n, 0,
                              (struct sockaddr *)&client_dest, sizeof(client_dest));
        if (sent < 0) {
            LOG_ERROR("sendto client failed: {}", strerror(errno));
        } else {
            LOG_INFO("Retry packet sent to client");
        }
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö Long Header –ø–∞–∫–µ—Ç–æ–≤
    if ((packet_type & 0xC0) == 0xC0) {
        size_t pos = 5;
        uint8_t dcil = (buf[pos] >> 4) & 0x0F;
        uint8_t scil = buf[pos] & 0x0F;
        LOG_INFO("Long Header: DCIL={}, SCIL={}", static_cast<int>(dcil), static_cast<int>(scil));

        if (pos + 1 + dcil + scil > static_cast<size_t>(n)) {
            LOG_WARN("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ CID –¥–ª–∏–Ω—ã: dcil={}, scil={}, packet_size={}",
                     dcil, scil, n);
            return;
        }

        uint8_t *dcid = reinterpret_cast<uint8_t *>(&buf[pos + 1]);
        auto it = reverse_map_.find(std::vector<uint8_t>(dcid, dcid + dcil));
        if (it == reverse_map_.end()) {
            LOG_WARN("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π DCID ‚Äî –ø–∞–∫–µ—Ç –ø–æ—Ç–µ—Ä—è–ª—Å—è");
            return;
        }
        ClientKey key = it->second;

        struct sockaddr_in client_dest{};
        client_dest.sin_family = AF_INET;
        client_dest.sin_addr.s_addr = key.addr;
        client_dest.sin_port = key.port;

        ssize_t sent = sendto(udp_fd_, buf, n, 0,
                              (struct sockaddr *)&client_dest, sizeof(client_dest));
        if (sent < 0) {
            LOG_ERROR("sendto client failed: {}", strerror(errno));
        } else {
            LOG_INFO("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç –∫–ª–∏–µ–Ω—Ç—É {}:{}",
                     sent,
                     inet_ntoa(client_dest.sin_addr),
                     ntohs(client_dest.sin_port));
        }
    } else {
        LOG_DEBUG("Short Header ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
    }
}

// "src/http3/quic_udp_deduplicator.cpp"
/**
 * @file quic_udp_deduplicator.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º .h —Ñ–∞–π–ª–µ.
 *
 * –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –º–µ—Ç–æ–¥—ã, —É—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞.
 * –§–∞–π–ª —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL —á–µ—Ä–µ–∑ libpqxx –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º C++23.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-21
 * @version 1.0
 * @license MIT
 */
// src/quic_udp_deduplicator.cpp
#include "../../include/http3/quic_udp_deduplicator.hpp"
#include "../../include/http3/client_key.hpp"
#include <cstring>

size_t Deduplicator::PacketKeyHash::operator()(const PacketKey &key) const noexcept
{
    size_t result = 0;
    // –•—ç—à–∏—Ä—É–µ–º ClientKey
    result ^= std::hash<uint32_t>()(key.client_key.addr);
    result ^= std::hash<uint16_t>()(key.client_key.port);
    for (uint8_t b : key.client_key.cid)
    {
        result ^= std::hash<uint8_t>()(b) + 2654435761U + (result << 6) + (result >> 2);
    }
    // –•—ç—à–∏—Ä—É–µ–º SCID
    for (uint8_t b : key.scid)
    {
        result ^= std::hash<uint8_t>()(b) + 2654435761U + (result << 6) + (result >> 2);
    }
    // –•—ç—à–∏—Ä—É–µ–º DCID
    for (uint8_t b : key.dcid)
    {
        result ^= std::hash<uint8_t>()(b) + 2654435761U + (result << 6) + (result >> 2);
    }
    // –•—ç—à–∏—Ä—É–µ–º Packet Number
    result ^= std::hash<uint64_t>()(key.packet_number);
    return result;
}

bool Deduplicator::PacketKeyEqual::operator()(const PacketKey &a, const PacketKey &b) const noexcept
{
    return a.client_key == b.client_key &&
           a.scid == b.scid &&
           a.dcid == b.dcid &&
           a.packet_number == b.packet_number;
}

void Deduplicator::add_packet(const ClientKey &key, const PacketInfo &info)
{
    PacketKey packet_key{};
    packet_key.client_key = key;
    packet_key.scid = info.scid;
    packet_key.dcid = {}; // DCID –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ
    packet_key.packet_number = info.packet_number;

    seen_packets_[packet_key] = true;
}

bool Deduplicator::is_duplicate(const ClientKey &key, const std::vector<uint8_t> &scid, const std::vector<uint8_t> &dcid, uint64_t packet_number) const
{
    PacketKey packet_key{};
    packet_key.client_key = key;
    packet_key.scid = scid;
    packet_key.dcid = dcid;
    packet_key.packet_number = packet_number;

    auto it = seen_packets_.find(packet_key);
    if (it != seen_packets_.end())
    {
        return true; // –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
    }

    return false; // –≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø–∞–∫–µ—Ç
}

void Deduplicator::remove_connection(const ClientKey &key)
{
    (void)key; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è "unused parameter"
}

// "src/http3/client_key.cpp"
/**
 * @file client_key.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º .h —Ñ–∞–π–ª–µ.
 *
 * –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –º–µ—Ç–æ–¥—ã, —É—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞.
 * –§–∞–π–ª —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL —á–µ—Ä–µ–∑ libpqxx –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º C++23.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-21
 * @version 1.0
 * @license MIT
 */

// src/client_key.cpp
#include "../../include/http3/client_key.hpp"

size_t ClientKeyHash::operator()(const ClientKey &k) const noexcept
{
    std::hash<uint32_t> hasher;
    size_t result = hasher(k.addr) ^
                    (std::hash<uint16_t>()(k.port) << 1) ^
                    std::hash<uint64_t>()(*reinterpret_cast<const uint64_t *>(k.cid));
    return result;
}

bool ClientKeyEqual::operator()(const ClientKey &a, const ClientKey &b) const noexcept
{
    return a.addr == b.addr && a.port == b.port &&
           std::memcmp(a.cid, b.cid, 8) == 0 &&
           a.token == b.token; // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
}

bool ClientKey::operator==(const ClientKey &other) const noexcept
{
    return addr == other.addr && port == other.port &&
           std::memcmp(cid, other.cid, 8) == 0 &&
           token == other.token; // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
}

// "src/http2/tcp_proxy.cpp"
// src/tcp_proxy.cpp
/**
 * @file tcp_proxy.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è TCP-–ø—Ä–æ–∫—Å–∏ –¥–ª—è HTTP/2 –∏ HTTP/1.1.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π I/O (select) –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-22
 * @version 1.0
 * @license MIT
 */

#include "../../include/http2/tcp_proxy.hpp"
#include <cstring>
#include <algorithm>

TcpProxy::TcpProxy(int listen_port, const std::string& backend_ip, int backend_port)
    : listen_fd_(-1), backend_port_(backend_port), backend_ip_(backend_ip), listen_port_(listen_port) {}

bool TcpProxy::run() {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(listen_port_);

    if (bind(listen_fd_, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", listen_port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    LOG_INFO("TCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {} –¥–ª—è {}:{}",
             listen_port_, backend_ip_, backend_port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_) {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        FD_SET(listen_fd_, &read_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const auto& [client_fd, backend_fd] : connections_) {
            FD_SET(client_fd, &read_fds);
            FD_SET(backend_fd, &read_fds);
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        int max_fd = listen_fd_;
        for (const auto& [client_fd, backend_fd] : connections_) {
            max_fd = std::max({max_fd, client_fd, backend_fd});
        }

        timeval timeout{.tv_sec = 1, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);

        if (activity < 0 && errno != EINTR) {
            LOG_ERROR("–û—à–∏–±–∫–∞ select: {}", strerror(errno));
            continue;
        }

        if (activity > 0) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if (FD_ISSET(listen_fd_, &read_fds)) {
                handle_new_connection();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
            handle_io_events();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end(); ) {
            if (now - it->second > 30) { // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                int client_fd = it->first;
                int backend_fd = connections_[client_fd];
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            } else {
                ++it;
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto& [client_fd, backend_fd] : connections_) {
        ::close(client_fd);
        ::close(backend_fd);
    }
    connections_.clear();

    if (listen_fd_ != -1) {
        ::close(listen_fd_);
    }

    LOG_INFO("TCP-–ø—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return true;
}

void TcpProxy::stop() {
    running_ = false;
}

bool TcpProxy::set_nonblocking(int fd) noexcept {
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1) {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

int TcpProxy::connect_to_backend() noexcept {
    int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É: {}", strerror(errno));
        return -1;
    }

    if (!set_nonblocking(sock)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –±—ç–∫–µ–Ω–¥–∞");
        ::close(sock);
        return -1;
    }

    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr);
    backend_addr.sin_port = htons(backend_port_);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—ç–∫–µ–Ω–¥—É
    if (::connect(sock, (struct sockaddr*)&backend_addr, sizeof(backend_addr)) < 0) {
        if (errno != EINPROGRESS) { // EINPROGRESS –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å–æ–∫–µ—Ç–∞
            LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—ç–∫–µ–Ω–¥—É {}: {}", backend_ip_, strerror(errno));
            ::close(sock);
            return -1;
        }
    }

    return sock;
}

void TcpProxy::handle_new_connection() noexcept {
    struct sockaddr_in client_addr{};
    socklen_t client_len = sizeof(client_addr);

    int client_fd = accept(listen_fd_, (struct sockaddr*)&client_addr, &client_len);
    if (client_fd < 0) {
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            LOG_ERROR("–û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(client_fd)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—ç–∫–µ–Ω–¥—É
    int backend_fd = connect_to_backend();
    if (backend_fd == -1) {
        ::close(client_fd);
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connections_[client_fd] = backend_fd;
    timeouts_[client_fd] = time(nullptr); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç

    LOG_INFO("–ù–æ–≤–æ–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç {}:{}, –±—ç–∫–µ–Ω–¥ {}:{}",
             inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port),
             backend_ip_, backend_port_);
}

void TcpProxy::handle_io_events() noexcept {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    auto connections_copy = connections_;

    for (const auto& [client_fd, backend_fd] : connections_copy) {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);

        FD_SET(client_fd, &read_fds);
        FD_SET(backend_fd, &read_fds);

        int max_fd = std::max(client_fd, backend_fd);
        timeval timeout{.tv_sec = 0, .tv_usec = 10000}; // 10 –º—Å

        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);

        if (activity <= 0) {
            continue;
        }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ –±—ç–∫–µ–Ω–¥—É
        if (FD_ISSET(client_fd, &read_fds)) {
            if (!forward_data(client_fd, backend_fd)) {
                // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                timeouts_[client_fd] = time(nullptr);
            }
        }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
        if (FD_ISSET(backend_fd, &read_fds)) {
            if (!forward_data(backend_fd, client_fd)) {
                // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                timeouts_[client_fd] = time(nullptr);
            }
        }
    }
}

bool TcpProxy::forward_data(int from_fd, int to_fd) noexcept {
    char buffer[8192];
    ssize_t bytes_read = recv(from_fd, buffer, sizeof(buffer), 0);

    if (bytes_read > 0) {
        ssize_t total_sent = 0;
        while (total_sent < bytes_read) {
            ssize_t bytes_sent = send(to_fd, buffer + total_sent, bytes_read - total_sent, 0);
            if (bytes_sent < 0) {
                if (errno == EAGAIN || errno == EWOULDBLOCK) {
                    // –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
                    LOG_DEBUG("–ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ");
                    return true; // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                } else {
                    LOG_ERROR("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {}", strerror(errno));
                    return false;
                }
            }
            total_sent += bytes_sent;
        }
        LOG_DEBUG("–ü–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –æ—Ç {} –∫ {}", bytes_read, from_fd, to_fd);
        return true;
    } else if (bytes_read == 0) {
        // –ö–ª–∏–µ–Ω—Ç –∏–ª–∏ –±—ç–∫–µ–Ω–¥ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        return false;
    } else {
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            LOG_ERROR("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {}", strerror(errno));
            return false;
        }
        return true; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
}

// "src/logger/logger.cpp"
/**
 * @file logger.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ ‚Äî –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CMake.
 *
 * –í—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–º —Ñ–∞–π–ª–µ logger.hpp,
 * –ø–æ—Å–∫–æ–ª—å–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏ std::source_location, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏ (CMake).
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-09-29
 * @version 1.0
 * @license MIT
 */

#include "logger/logger.h"

// –ù–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –≤—Å—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.

// "include/http3/quic_udp_proxy.hpp"
// include/quic_udp_proxy.hpp
/**
 * @file quic_udp_proxy.hpp
 * @brief –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è QUIC-UDP –ø—Ä–æ–∫—Å–∏.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ QUIC-–ø–∞–∫–µ—Ç–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π I/O (select) –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-22
 * @version 1.0
 * @license MIT
 */
#pragma once
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <cstdint>
#include <random>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <fcntl.h>
#include <arpa/inet.h>
#include <csignal>
#include <cerrno>
#include <sys/select.h>
#include <thread>
#include "../logger/logger.h"
#include "client_key.hpp"
#include "quic_udp_deduplicator.hpp"

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
constexpr size_t MAX_PACKET_SIZE = 1500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä UDP-–ø–∞–∫–µ—Ç–∞

// === –•—ç—à-—Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–ª—è std::vector<uint8_t> ===
struct VectorHash {
    size_t operator()(const std::vector<uint8_t> &v) const noexcept {
        size_t result = 0;
        for (uint8_t b : v) {
            result ^= static_cast<size_t>(b);
            result *= 2654435761U; // FNV prime
        }
        return result;
    }
};

struct VectorEqual {
    bool operator()(const std::vector<uint8_t> &a, const std::vector<uint8_t> &b) const noexcept {
        if (a.size() != b.size())
            return false;
        return std::equal(a.begin(), a.end(), b.begin());
    }
};

/**
 * @brief –ö–ª–∞—Å—Å QUIC-UDP –ø—Ä–æ–∫—Å–∏.
 *
 * –°–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ QUIC-–ø–∞–∫–µ—Ç—ã –Ω–∞ –ø–æ—Ä—Ç—É 443 –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –†–æ—Å—Å–∏–∏ (—á–µ—Ä–µ–∑ WireGuard).
 */
class QuicUdpProxy {
public:
    /**
     * @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     * @param listen_port –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ (–æ–±—ã—á–Ω–æ 443).
     * @param backend_ip IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     * @param backend_port –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     */
    QuicUdpProxy(int listen_port, const std::string& backend_ip, int backend_port);

    /**
     * @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç QUIC-UDP –ø—Ä–æ–∫—Å–∏.
     * @return true –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    bool run();

    /**
     * @brief –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç QUIC-UDP –ø—Ä–æ–∫—Å–∏.
     */
    void stop();

private:
    int udp_fd_;              ///< –°–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    int wg_fd_;               ///< –°–æ–∫–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –†–æ—Å—Å–∏–∏
    int listen_port_;         ///< –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç –ø—Ä–æ–∫—Å–∏
    int backend_port_;        ///< –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏
    std::string backend_ip_;  ///< IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏
    volatile sig_atomic_t running_{true}; ///< –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∫—Å–∏

    // Map: ClientKey -> ClientKey (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞)
    std::unordered_map<ClientKey, ClientKey, ClientKeyHash, ClientKeyEqual> session_map_;
    // Reverse map: DCID -> ClientKey (–¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ DCID)
    std::unordered_map<std::vector<uint8_t>, ClientKey, VectorHash, VectorEqual> reverse_map_;
    Deduplicator deduplicator_; // –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞

    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º —Å–æ–∫–µ—Ç–∞.
     * @param fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞.
     * @return 0 –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, -1 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    [[nodiscard]] int set_nonblocking(int fd) noexcept;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 8-–±–∞–π—Ç–æ–≤—ã–π CID.
     * @return –í–µ–∫—Ç–æ—Ä –∏–∑ 8 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç.
     */
    [[nodiscard]] std::vector<uint8_t> generate_local_cid() noexcept;

    /**
     * @brief –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã.
     * @param ip_out –°—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è IP.
     * @return true, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å.
     */
    [[nodiscard]] bool get_external_ip(std::string &ip_out) noexcept;

    /**
     * @brief –í—ã–≤–æ–¥–∏—Ç –±–∞–π—Ç—ã –≤ hex-—Ñ–æ—Ä–º–∞—Ç–µ.
     * @param data –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ.
     * @param len –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö.
     * @param label –ú–µ—Ç–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞.
     */
    void print_hex(const uint8_t *data, size_t len, const std::string &label) noexcept;

    /**
     * @brief –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
     * @param sig –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞.
     */
    static void signal_handler(int sig);

    /**
     * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
     * @param buf –ë—É—Ñ–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞.
     * @param n –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞.
     * @param client_addr –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞.
     * @param client_len –†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–¥—Ä–µ—Å–∞.
     */
    void handle_client_packet(char *buf, ssize_t n, const sockaddr_in &client_addr, socklen_t client_len) noexcept;

    /**
     * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     * @param buf –ë—É—Ñ–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞.
     * @param n –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞.
     * @param backend_addr –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞.
     * @param backend_len –†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–¥—Ä–µ—Å–∞.
     */
    void handle_backend_packet(char *buf, ssize_t n, const sockaddr_in &backend_addr, socklen_t backend_len) noexcept;
};

// "include/http3/quic_udp_deduplicator.hpp"
/**
 * @file quic_udp_deduplicator.hpp
 * @brief –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
 *
 * –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã, —Ñ—É–Ω–∫—Ü–∏–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä—è–≤–ª—è–µ—Ç —Ñ–∞–π–ª.
 * –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-21
 * @version 1.0
 * @license MIT
 */
// include/quic_udp_deduplicator.hpp
// include/quic_udp_deduplicator.hpp

#pragma once
#include <unordered_map>
#include <vector>
#include <cstdint>
#include <string>
#include "client_key.hpp"

/**
 * @brief –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ QUIC-–ø–∞–∫–µ—Ç–æ–≤.
 *
 * –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º Initial-–ø–∞–∫–µ—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–∫–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–º.
 */
class Deduplicator {
public:
    /**
     * @brief –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–≤–æ–º Initial-–ø–∞–∫–µ—Ç–µ.
     */
    struct PacketInfo {
        std::vector<uint8_t> token; ///< –¢–æ–∫–µ–Ω –∏–∑ Retry-–ø–∞–∫–µ—Ç–∞
        std::vector<uint8_t> scid;  ///< SCID –∏–∑ –ø–µ—Ä–≤–æ–≥–æ Initial-–ø–∞–∫–µ—Ç–∞
        uint64_t packet_number;     ///< –ù–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    };

    /**
     * @brief –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–ª—é—á–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏.
     */
    struct PacketKey {
        ClientKey client_key;       ///< –ö–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞ (IP + –ø–æ—Ä—Ç)
        std::vector<uint8_t> scid;  ///< SCID
        std::vector<uint8_t> dcid;  ///< DCID
        uint64_t packet_number;     ///< –ù–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞
    };

    /**
     * @brief –•–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è PacketKey.
     */
    struct PacketKeyHash {
        size_t operator()(const PacketKey &key) const noexcept;
    };

    /**
     * @brief –û–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è PacketKey.
     */
    struct PacketKeyEqual {
        bool operator()(const PacketKey &a, const PacketKey &b) const noexcept;
    };

    /**
     * @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     */
    Deduplicator() = default;

    /**
     * @brief –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º Initial-–ø–∞–∫–µ—Ç–µ.
     * @param key –ö–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞.
     * @param info –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ.
     */
    void add_packet(const ClientKey &key, const PacketInfo &info);

    /**
     * @brief –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–∫–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–º.
     * @param key –ö–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞.
     * @param scid SCID –∏–∑ –ø–∞–∫–µ—Ç–∞.
     * @param dcid DCID –∏–∑ –ø–∞–∫–µ—Ç–∞.
     * @param packet_number –ù–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞.
     * @return true, –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π, false ‚Äî –∏–Ω–∞—á–µ.
     */
    [[nodiscard]] bool is_duplicate(const ClientKey &key, const std::vector<uint8_t> &scid, const std::vector<uint8_t> &dcid, uint64_t packet_number) const;

    /**
     * @brief –£–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.
     * @param key –ö–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞.
     */
    void remove_connection(const ClientKey &key);

private:
    std::unordered_map<PacketKey, bool, PacketKeyHash, PacketKeyEqual> seen_packets_;
};

// "include/http3/client_key.hpp"
// include/client_key.hpp
/**
 * @file client_key.hpp
 * @brief –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
 *
 * –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã, —Ñ—É–Ω–∫—Ü–∏–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä—è–≤–ª—è–µ—Ç —Ñ–∞–π–ª.
 * –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-21
 * @version 1.0
 * @license MIT
 */
#pragma once
#include <vector>
#include <cstdint>
#include <cstring>
#include <unordered_map>

/**
 * @brief –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞ –∫–ª–∏–µ–Ω—Ç–∞.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∫–ª—é—á –≤ session_map –∏ Deduplicator.
 */
struct ClientKey {
    uint32_t addr;          ///< IPv4-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
    uint16_t port;          ///< –ü–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
    uint8_t cid[8];         ///< –ü–µ—Ä–≤—ã–µ 8 –±–∞–π—Ç SCID
    std::vector<uint8_t> token; ///< –¢–æ–∫–µ–Ω –∏–∑ Retry-–ø–∞–∫–µ—Ç–∞

    bool operator==(const ClientKey &other) const noexcept;
};

/**
 * @brief –•–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è ClientKey.
 */
struct ClientKeyHash {
    size_t operator()(const ClientKey &k) const noexcept;
};

/**
 * @brief –û–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è ClientKey.
 */
struct ClientKeyEqual {
    bool operator()(const ClientKey &a, const ClientKey &b) const noexcept;
};


// "include/http2/tcp_proxy.hpp"
// include/http2/tcp_proxy.hpp
/**
 * @file tcp_proxy.hpp
 * @brief –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è TCP-–ø—Ä–æ–∫—Å–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ HTTP/2 –∏ HTTP/1.1.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π I/O (select) –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-22
 * @version 1.0
 * @license MIT
 */
#pragma once
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <fcntl.h>
#include <arpa/inet.h>
#include <csignal>
#include <cerrno>
#include <sys/select.h>
#include <thread>
#include "../logger/logger.h"
/**
 * @brief –ö–ª–∞—Å—Å TCP-–ø—Ä–æ–∫—Å–∏ –¥–ª—è HTTP/2 –∏ HTTP/1.1.
 *
 * –°–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É 443 –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –†–æ—Å—Å–∏–∏ (—á–µ—Ä–µ–∑ WireGuard).
 */
class TcpProxy {
public:
    /**
     * @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     * @param listen_port –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ (–æ–±—ã—á–Ω–æ 443).
     * @param backend_ip IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     * @param backend_port –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     */
    TcpProxy(int listen_port, const std::string& backend_ip, int backend_port);

    /**
     * @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç TCP-–ø—Ä–æ–∫—Å–∏.
     * @return true –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    bool run();

    /**
     * @brief –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TCP-–ø—Ä–æ–∫—Å–∏.
     */
    void stop();

private:
    int listen_fd_;          ///< –°–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    int backend_port_;       ///< –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏
    std::string backend_ip_; ///< IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏
    int listen_port_;        ///< –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç –ø—Ä–æ–∫—Å–∏
    volatile sig_atomic_t running_{true}; ///< –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∫—Å–∏

    // –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: client_fd -> backend_fd
    std::unordered_map<int, int> connections_;
    // –ö–∞—Ä—Ç–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤: client_fd -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    std::unordered_map<int, time_t> timeouts_;

    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º —Å–æ–∫–µ—Ç–∞.
     * @param fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞.
     * @return true –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    [[nodiscard]] bool set_nonblocking(int fd) noexcept;

    /**
     * @brief –°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–æ–∫–µ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     * @return –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∏–ª–∏ -1 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    [[nodiscard]] int connect_to_backend() noexcept;

    /**
     * @brief –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º.
     * @param client_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
     * @param backend_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.
     * @return true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, false ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
     */
    [[nodiscard]] bool forward_data(int client_fd, int backend_fd) noexcept;

    /**
     * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
     */
    void handle_new_connection() noexcept;

    /**
     * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.
     */
    void handle_io_events() noexcept;
};

// "CMakeLists.txt"
cmake_minimum_required(VERSION 3.26)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è VERSION
if(POLICY CMP0048)
    cmake_policy(SET CMP0048 NEW)
endif()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞
if(NOT DEFINED APP_VERSION)
    set(APP_VERSION "0.1.0" CACHE STRING "–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
endif()

# –ü—Ä–æ–µ–∫—Ç
project(quic-proxy VERSION ${APP_VERSION} LANGUAGES CXX)

message(STATUS "üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º quic-proxy v${APP_VERSION}")
message(STATUS "üîç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${CMAKE_CURRENT_SOURCE_DIR}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ C++
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
set(CMAKE_BUILD_TYPE Release)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
add_compile_options(-O2 -Wall -Wextra -Wpedantic)

# –ü–æ–∏—Å–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ fmt
find_package(fmt CONFIG REQUIRED)

# === –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ===
add_executable(quic_proxy
    main.cpp
    src/http2/tcp_proxy.cpp
    src/http3/quic_udp_proxy.cpp
    src/http3/client_key.cpp
    src/http3/quic_udp_deduplicator.cpp
)

# –õ–∏–Ω–∫–æ–≤–∫–∞: pthread –∏ fmt
target_link_libraries(quic_proxy PRIVATE
    pthread
    fmt::fmt
)