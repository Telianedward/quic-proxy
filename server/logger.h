/**
 * @file logger.hpp
 * @brief –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ C++20/23 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–≤–µ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
 *
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏ (DEBUG, INFO, WARN, ERROR, SUCCESS),
 * –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞, —Å—Ç—Ä–æ–∫–∏, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (ANSI escape codes) –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π.
 * –¢–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç LOG_RAW –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–≤–æ–¥–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫).
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-09-29
 * @version 1.0
 * @license MIT
 */

#pragma once

#include <string>
#include <source_location>
#include <chrono>
#include <iostream>
#include <iomanip>
#include <mutex>

#ifdef _WIN32
    #include <io.h>
    #include <fcntl.h>
#else
    #include <unistd.h>
#endif

/**
 * @brief –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
enum class LogLevel {
    DEBUG,   ///< –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    INFO,    ///< –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
    WARN,    ///< –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
    ERROR,   ///< –û—à–∏–±–∫–∞ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
    SUCCESS  ///< –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è)
};

/**
 * @brief –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ª–æ–≥–≥–µ—Ä–∞.
 *
 * –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ª–∏–Ω–∫–æ–≤–∫—É (static linkage) –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É namespace.
 */
namespace {

/**
 * @brief –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ANSI-–∫–æ–¥ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param level –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @return –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å ANSI-–∫–æ–¥–æ–º —Ü–≤–µ—Ç–∞.
 */
const char* get_color_code(LogLevel level) {
    switch (level) {
        case LogLevel::DEBUG:   return "\033[36m"; // Cyan
        case LogLevel::INFO:    return "\033[34m"; // Blue
        case LogLevel::WARN:    return "\033[33m"; // Yellow
        case LogLevel::ERROR:   return "\033[31m"; // Red
        case LogLevel::SUCCESS: return "\033[32m"; // Green
        default:                return "\033[0m";
    }
}

/**
 * @brief –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param level –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @return –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ª–∏—Ç–µ—Ä–∞–ª —Å —ç–º–æ–¥–∑–∏ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.
 * @warning –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ UTF-8 –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
const char* get_emoji(LogLevel level) {
    switch (level) {
        case LogLevel::DEBUG:   return "üíü";
        case LogLevel::INFO:    return "üîµ";
        case LogLevel::WARN:    return "‚ö†Ô∏è";
        case LogLevel::ERROR:   return "‚ùå";
        case LogLevel::SUCCESS: return "‚úÖ";
        default:                return "";
    }
}

/**
 * @brief ANSI-–∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.
 */
const char* reset_color = "\033[0m";

/**
 * @brief –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ stdout —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º.
 * @return true, –µ—Å–ª–∏ stdout –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ TTY.
 */
bool is_stdout_tty() {
#ifdef _WIN32
    return _isatty(_fileno(stdout));
#else
    return isatty(fileno(stdout));
#endif
}

/**
 * @brief –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°".
 * @return –°—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.
 * @warning –ò—Å–ø–æ–ª—å–∑—É–µ—Ç std::localtime, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö.
 *          –î–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å std::localtime_s (C11) –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏.
 */
std::string get_timestamp() {
    auto now = std::chrono::system_clock::now();
    auto time_t = std::chrono::system_clock::to_time_t(now);
    // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ ‚Äî —Å–º. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã—à–µ
    auto local_time = *std::localtime(&time_t);

    char buffer[20];
    std::strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", &local_time);
    return std::string(buffer);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—å—é—Ç–µ–∫—Å –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
std::mutex log_mutex;

} // namespace

/**
 * @brief –û—Å–Ω–æ–≤–Ω–∞—è —à–∞–±–ª–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
 *
 * –ù–µ –≤—ã–∑—ã–≤–∞–π—Ç–µ –Ω–∞–ø—Ä—è–º—É—é ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–∫—Ä–æ—Å—ã LOG_DEBUG, LOG_INFO –∏ —Ç.–¥.
 *
 * @tparam Args –¢–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param level –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param file –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–±—ã—á–Ω–æ __FILE__).
 * @param line –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–æ–±—ã—á–Ω–æ __LINE__).
 * @param func –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±—ã—á–Ω–æ __func__).
 * @param format_str –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å fmt::format –∏–ª–∏ std::format).
 * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞.
 */
template<typename... Args>
void log_impl(LogLevel level,
              const char* file,
              int line,
              const char* func,
              const std::string& format_str,
              Args&&... args) {
    const bool use_color = is_stdout_tty();
    const char* color_start = use_color ? get_color_code(level) : "";
    const char* color_reset = use_color ? reset_color : "";

    const char* level_name = [&]() -> const char* {
        switch (level) {
            case LogLevel::DEBUG:   return "DEBUG";
            case LogLevel::INFO:    return "INFO";
            case LogLevel::WARN:    return "WARN";
            case LogLevel::ERROR:   return "ERROR";
            case LogLevel::SUCCESS: return "SUCCESS";
            default:                return "UNKNOWN";
        }
    }();

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    std::string message = std::vformat(format_str, std::make_format_args(args...));

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º—å—é—Ç–µ–∫—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    std::lock_guard<std::mutex> lock(log_mutex);

    // –í—ã–≤–æ–¥–∏–º –≤ cerr
    std::cerr << color_start
              << "[" << get_timestamp() << "] "
              << get_emoji(level) << "[" << level_name << "] "
              << "[" << file << ":" << line << " in " << func << "] "
              << message
              << color_reset
              << std::endl;
}

/**
 * @brief –§—É–Ω–∫—Ü–∏—è –¥–ª—è "—Å—ã—Ä–æ–≥–æ" –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, quiche),
 * –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç –≥–æ—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤.
 *
 * @tparam Args –¢–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param format_str –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞.
 * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.
 */
template<typename... Args>
void log_raw_impl(const std::string& format_str, Args&&... args) {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    std::string message = std::vformat(format_str, std::make_format_args(args...));

    // –í—ã–≤–æ–¥–∏–º –≤ cerr
    std::cerr << message << std::endl;
}

/**
 * @brief –ú–∞–∫—Ä–æ—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è DEBUG.
 * @param ... –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å std::format).
 */
#define LOG_DEBUG(...) log_impl(LogLevel::DEBUG, __FILE__, __LINE__, __func__, __VA_ARGS__)

/**
 * @brief –ú–∞–∫—Ä–æ—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è INFO.
 * @param ... –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å std::format).
 */
#define LOG_INFO(...)  log_impl(LogLevel::INFO,  __FILE__, __LINE__, __func__, __VA_ARGS__)

/**
 * @brief –ú–∞–∫—Ä–æ—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è WARN.
 * @param ... –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å std::format).
 */
#define LOG_WARN(...)  log_impl(LogLevel::WARN,  __FILE__, __LINE__, __func__, __VA_ARGS__)

/**
 * @brief –ú–∞–∫—Ä–æ—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è ERROR.
 * @param ... –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å std::format).
 */
#define LOG_ERROR(...) log_impl(LogLevel::ERROR, __FILE__, __LINE__, __func__, __VA_ARGS__)

/**
 * @brief –ú–∞–∫—Ä–æ—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è SUCCESS.
 * @param ... –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å std::format).
 */
#define LOG_SUCCESS(...) log_impl(LogLevel::SUCCESS, __FILE__, __LINE__, __func__, __VA_ARGS__)

/**
 * @brief –ú–∞–∫—Ä–æ—Å –¥–ª—è "—Å—ã—Ä–æ–≥–æ" –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤—Ä–µ–º—è, —Ñ–∞–π–ª, —Ñ—É–Ω–∫—Ü–∏—è –∏ —Ç.–¥.).
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 * –∏–ª–∏ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
 *
 * @param ... –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å std::format).
 * @warning –ù–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏, —É—Ä–æ–≤–Ω–∏ –∏–ª–∏ —ç–º–æ–¥–∑–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ.
 */
#define LOG_RAW(...) log_raw_impl(__VA_ARGS__)