/**
 * @file server.hpp
 * @brief –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP/1.1 —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∏ HEAD –∑–∞–ø—Ä–æ—Å—ã.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∫—Å–∏.
 * –ù–µ —Ç—Ä–µ–±—É–µ—Ç TLS ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —á–∏—Å—Ç–æ–º TCP.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#pragma once

#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <atomic>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <fcntl.h>
#include <arpa/inet.h>
#include <csignal>
#include <cerrno>
#include <sys/select.h>
#include <thread>
#include "../logger/logger.h"

/**
 * @brief –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–≥–æ HTTP-–∑–∞–ø—Ä–æ—Å–∞.
 *
 * –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥, URL, –≤–µ—Ä—Å–∏—é, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞.
 */
struct HttpRequest
{
    std::string method;                                   ///< –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ (GET, POST –∏ —Ç.–¥.)
    std::string url;                                      ///< URL –∑–∞–ø—Ä–æ—Å–∞
    std::string version;                                  ///< –í–µ—Ä—Å–∏—è HTTP (HTTP/1.1)
    std::unordered_map<std::string, std::string> headers; ///< –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    std::string body;                                     ///< –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
};

/**
 * @brief –ö–ª–∞—Å—Å HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –°–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP/1.1 –∑–∞–ø—Ä–æ—Å—ã.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: GET, HEAD, favicon.ico, main.css, main.js.
 */
class Http1Server
{
public:
    /**
     * @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     * @param port –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å —Å–µ—Ä–≤–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8587).
     * @param backend_ip IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     * @param backend_port –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
     */
    explicit Http1Server(int port = 8587, const std::string &backend_ip = "10.8.0.11", int backend_port = 8587);

    /**
     * @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/1.1 —Å–µ—Ä–≤–µ—Ä.
     * @return true –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    bool run();

    /**
     * @brief –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HTTP/1.1 —Å–µ—Ä–≤–µ—Ä.
     */
    void stop();

private:
    int listen_fd_;                            ///< –°–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    int port_;                                 ///< –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
    volatile sig_atomic_t running_{true};      ///< –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    std::unordered_map<int, int> connections_; ///< –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: client_fd -> backend_fd
    std::unordered_map<int, time_t> timeouts_; ///< –ö–∞—Ä—Ç–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤: client_fd -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    std::string backend_ip_;                   ///< IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏
    int backend_port_;                         ///< –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏

    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º —Å–æ–∫–µ—Ç–∞.
     * @param fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞.
     * @return true –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    [[nodiscard]] bool set_nonblocking(int fd) noexcept;

    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤ –†–æ—Å—Å–∏–∏.
     * @return –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –±—ç–∫–µ–Ω–¥–∞ –∏–ª–∏ -1 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    [[nodiscard]] int connect_to_backend() noexcept; // üëà –î–û–ë–ê–í–õ–ï–ù–û

    /**
     * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
     */
    void handle_new_connection() noexcept;

    /**
     * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.
     */
    void handle_io_events() noexcept;

    /**
     * @brief –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º.
     * @param from_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
     * @param to_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
     * @param request_str –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞).
     * @return true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, false ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
     */
    [[nodiscard]] bool forward_data(int from_fd, int to_fd, const std::string &request_str) noexcept;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏.
     * @return –°—Ç—Ä–æ–∫–∞ —Å HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
     */
    [[nodiscard]] std::string generate_index_html() const;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è favicon.ico.
     * @return –°—Ç—Ä–æ–∫–∞ —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ favicon.
     */
    [[nodiscard]] std::string generate_favicon() const;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è main.css.
     * @return –°—Ç—Ä–æ–∫–∞ —Å CSS-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
     */
    [[nodiscard]] std::string generate_main_css() const;

    /**
     * @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è main.js.
     * @return –°—Ç—Ä–æ–∫–∞ —Å JS-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
     */
    [[nodiscard]] std::string generate_main_js() const;

    /**
     * @brief –ü–∞—Ä—Å–∏—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∏–∑ —Å—ã—Ä–æ–π —Å—Ç—Ä–æ–∫–∏.
     *
     * –†–∞–∑–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ (–º–µ—Ç–æ–¥, URL, –≤–µ—Ä—Å–∏—è) –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É `HttpRequest`.
     * –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–ª–æ –Ω–µ –ø–∞—Ä—Å—è—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞.
     *
     * @param request_str –°—ã—Ä–æ–π HTTP-–∑–∞–ø—Ä–æ—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
     * @return –û–±—ä–µ–∫—Ç `HttpRequest` —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
     */
    static HttpRequest parse_http_request(const std::string &request_str);
};