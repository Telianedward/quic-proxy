// src/test_client.cpp
/**
 * @file test_client.cpp
 * @brief –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –†–æ—Å—Å–∏–∏.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏ –∏ WireGuard-—Ç—É–Ω–Ω–µ–ª—è.
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π IP –∏ –ø–æ—Ä—Ç.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#include "logger/logger.h"
#include <iostream>
#include <string>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>

int main()
{
    try
    {
        // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
        const std::string backend_ip = "10.8.0.11"; // IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ WireGuard
        const int backend_port = 8585;              // –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (–º–æ–∂–Ω–æ –ª—é–±–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π)
        const std::string message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö! üá≥üá± ‚Üí üá∑üá∫";

        LOG_INFO("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...");
        LOG_INFO("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {}:{}", backend_ip, backend_port);

        // --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ ---
        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
        if (sock < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç: {}", strerror(errno));
            return EXIT_FAILURE;
        }
        LOG_SUCCESS("‚úÖ –°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: fd={}", sock);

        // --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
        struct sockaddr_in server_addr{};
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(backend_port);
        if (inet_pton(AF_INET, backend_ip.c_str(), &server_addr.sin_addr) <= 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å: {}", backend_ip);
            close(sock);
            return EXIT_FAILURE;
        }

        // --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        ssize_t sent_bytes = sendto(sock, message.c_str(), message.size(), 0,
                                    (struct sockaddr *)&server_addr, sizeof(server_addr));
        if (sent_bytes < 0)
        {
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", strerror(errno));
            close(sock);
            return EXIT_FAILURE;
        }

        LOG_SUCCESS("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: \"{}\" ({} –±–∞–π—Ç)", message, sent_bytes);

        // --- –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞ ---
        close(sock);
        LOG_INFO("üõë –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.");
    }
    catch (const std::exception &e)
    {
        LOG_ERROR("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e.what());
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}