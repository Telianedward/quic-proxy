// src/server/test_server.cpp
/**
 * @file test_server.cpp
 * @brief –¢–µ—Å—Ç–æ–≤—ã–π HTTP/2 —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏—ë–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø—Ä–æ–∫—Å–∏ –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö.
 *
 * –°–ª—É—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç (8587) –∏ –≤—ã–≤–æ–¥–∏—Ç –ª—é–±–æ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥.
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç —Å–ª–æ–≤–∞ "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏!" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏ –∏ WireGuard-—Ç—É–Ω–Ω–µ–ª—è.
 * –ù–µ —Ç—Ä–µ–±—É–µ—Ç SSL/TLS, —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —á–∏—Å—Ç–æ–º TCP.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#include "logger/logger.h"
#include <iostream>
#include <string>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <fcntl.h> // –î–ª—è fcntl

int main()
{
    try
    {
        // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
        const int listen_port = 8587; // –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ–º (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç)
        const std::string listen_ip = "10.8.0.11"; // IP-–∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WireGuard

        LOG_INFO("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞...");
        LOG_INFO("–°–ª—É—à–∞—é –ø–æ—Ä—Ç {} –Ω–∞ –∞–¥—Ä–µ—Å–µ {}", listen_port, listen_ip);

        // --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ ---
        int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
        if (sock < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç: {}", strerror(errno));
            return EXIT_FAILURE;
        }
        LOG_SUCCESS("‚úÖ –°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: fd={}", sock);

        // --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) ---
        int flags = fcntl(sock, F_GETFL, 0);
        if (flags == -1)
        {
            LOG_WARN("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥–∏ —Å–æ–∫–µ—Ç–∞");
        }
        else
        {
            if (fcntl(sock, F_SETFL, flags | O_NONBLOCK) == -1)
            {
                LOG_WARN("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º");
            }
        }

        // --- –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∞–¥—Ä–µ—Å—É ---
        struct sockaddr_in server_addr{};
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(listen_port);
        if (inet_pton(AF_INET, listen_ip.c_str(), &server_addr.sin_addr) <= 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å: {}", listen_ip);
            close(sock);
            return EXIT_FAILURE;
        }

        if (bind(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –∞–¥—Ä–µ—Å—É: {}", strerror(errno));
            close(sock);
            return EXIT_FAILURE;
        }
        LOG_SUCCESS("‚úÖ –°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥—Ä–µ—Å—É {}:{}", listen_ip, listen_port);

        // --- –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ---
        if (listen(sock, SOMAXCONN) < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
            close(sock);
            return EXIT_FAILURE;
        }
        LOG_SUCCESS("‚úÖ –°–µ—Ä–≤–µ—Ä –Ω–∞—á–∞–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç—É {}", listen_port);

        // --- –¶–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ---
        char buffer[1024];
        struct sockaddr_in client_addr{};
        socklen_t client_len = sizeof(client_addr);

        LOG_INFO("‚è≥ –û–∂–∏–¥–∞—é –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");

        while (true)
        {
            int client_fd = accept(sock, (struct sockaddr *)&client_addr, &client_len);
            if (client_fd >= 0)
            {
                std::string client_ip = inet_ntoa(client_addr.sin_addr);
                uint16_t client_port = ntohs(client_addr.sin_port);

                LOG_SUCCESS("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–ª–∏–µ–Ω—Ç: {}:{} (fd={})", client_ip, client_port, client_fd);

                // --- –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ---
                ssize_t received_bytes = recv(client_fd, buffer, sizeof(buffer) - 1, 0);
                if (received_bytes > 0)
                {
                    buffer[received_bytes] = '\0'; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–æ–∫—É
                    LOG_SUCCESS("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {}:{} ({} –±–∞–π—Ç): \"{}\"",
                                client_ip, client_port, received_bytes, buffer);

                    // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç ---
                    std::string response = "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: ";
                    std::string added_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏!";
                    response += std::to_string(added_message.size()) + "\r\n\r\n" + added_message;

                    // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
                    ssize_t sent_bytes = send(client_fd, response.c_str(), response.size(), 0);
                    if (sent_bytes < 0)
                    {
                        LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {}", strerror(errno));
                    }
                    else
                    {
                        LOG_SUCCESS("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É {}:{} ({} –±–∞–π—Ç): \"{}\"",
                                    client_ip, client_port, sent_bytes, response);
                    }
                }
                else if (received_bytes == 0)
                {
                    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º
                    LOG_INFO("‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç {}:{} –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", client_ip, client_port);
                }
                else
                {
                    LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}", strerror(errno));
                }

                // --- –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ---
                close(client_fd);
                LOG_INFO("üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {}:{} –∑–∞–∫—Ä—ã—Ç–æ.", client_ip, client_port);
            }
            else
            {
                if (errno != EAGAIN && errno != EWOULDBLOCK)
                {
                    LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ accept: {}", strerror(errno));
                }
                // –î–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
            }

            // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU
            usleep(10000); // 10 –º—Å
        }

        // --- –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ) ---
        close(sock);
        LOG_INFO("üõë –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.");
    }
    catch (const std::exception &e)
    {
        LOG_ERROR("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e.what());
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}