/**
 * @file server.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—ã—Ö HTTP/2 –∑–∞–ø—Ä–æ—Å–æ–≤ (GET, HEAD) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TLS.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∫—Å–∏.
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-27
 * @version 1.0
 * @license MIT
 */
#include "../../include/http2/server.hpp"
#include <cstring>
#include <algorithm>
#include <sstream>
#include <poll.h>

// === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Http2Server ===

Http2Server::Http2Server(int port, const std::string &backend_ip, int backend_port)
    : listen_fd_(-1), port_(port), backend_ip_(backend_ip), backend_port_(backend_port),
      ssl_ctx_(nullptr)
{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenSSL
    SSL_library_init();
    SSL_load_error_strings();
    OpenSSL_add_all_algorithms();

    // –°–æ–∑–¥–∞–Ω–∏–µ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ssl_ctx_ = SSL_CTX_new(TLS_server_method());
    if (!ssl_ctx_)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç");
        return;
    }

    // üü¢ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–ï –§–ê–ô–õ–´ –ò–ó /opt/quic-proxy/
    const char *cert_path = "/opt/quic-proxy/fullchain.pem";
    const char *key_path = "/opt/quic-proxy/privkey.pk8";

    // üü° –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í
    if (access(cert_path, R_OK) != 0)
    {
        LOG_ERROR("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", cert_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    if (access(key_path, R_OK) != 0)
    {
        LOG_ERROR("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", key_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞
    if (SSL_CTX_use_certificate_file(ssl_ctx_, cert_path, SSL_FILETYPE_PEM) <= 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    if (SSL_CTX_use_PrivateKey_file(ssl_ctx_, key_path, SSL_FILETYPE_PEM) <= 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (!SSL_CTX_check_private_key(ssl_ctx_))
    {
        LOG_ERROR("‚ùå –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    LOG_INFO("‚úÖ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ALPN –¥–ª—è HTTP/2
    static const unsigned char alpn_protos[] = {0x02, 'h', '2'};
    SSL_CTX_set_alpn_select_cb(ssl_ctx_, [](SSL *ssl, const unsigned char **out, unsigned char *outlen, const unsigned char *in, unsigned int inlen, void *arg) -> int {
        if (nghttp2_is_fatal(nghttp2_select_next_protocol((unsigned char **)out, outlen, in, inlen)) != 0) {
            return SSL_TLSEXT_ERR_NOACK;
        }
        return SSL_TLSEXT_ERR_OK;
    }, nullptr);

    LOG_INFO("‚úÖ ALPN –¥–ª—è HTTP/2 –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
}

Http2Server::~Http2Server()
{
    if (ssl_ctx_)
    {
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
    }
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for (auto &[fd, ssl] : ssl_connections_)
    {
        SSL_free(ssl);
    }
    ssl_connections_.clear();

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö nghttp2_session
    for (auto &[fd, info] : connections_)
    {
        if (info.session)
        {
            nghttp2_session_del(info.session);
        }
    }
}

bool Http2Server::run()
{
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(port_);
    if (bind(listen_fd_, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    LOG_INFO("HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_)
    {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        FD_SET(listen_fd_, &read_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const auto &conn : connections_)
        {
            int client_fd = conn.first;
            const ConnectionInfo &info = conn.second;
            FD_SET(client_fd, &read_fds);
            FD_SET(info.backend_fd, &read_fds);
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        int max_fd = listen_fd_;
        for (const auto &conn : connections_)
        {
            int client_fd = conn.first;
            const ConnectionInfo &info = conn.second;
            max_fd = std::max({max_fd, client_fd, info.backend_fd});
        }

        timeval timeout{.tv_sec = 1, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity < 0 && errno != EINTR)
        {
            LOG_ERROR("–û—à–∏–±–∫–∞ select: {}", strerror(errno));
            continue;
        }
        if (activity > 0)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if (FD_ISSET(listen_fd_, &read_fds))
            {
                handle_new_connection();
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
            handle_io_events();
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end();)
        {
            if (now - it->second > 30)
            { // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                int client_fd = it->first;
                ::close(client_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}", client_fd);
            }
            else
            {
                ++it;
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto &conn : connections_)
    {
        int client_fd = conn.first;
        const ConnectionInfo &info = conn.second;
        ::close(client_fd);
        ::close(info.backend_fd);
    }
    connections_.clear();
    if (listen_fd_ != -1)
    {
        ::close(listen_fd_);
    }
    LOG_INFO("HTTP/2 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return true;
}

void Http2Server::stop()
{
    running_ = false;
}

bool Http2Server::set_nonblocking(int fd) noexcept
{
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1)
    {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

int Http2Server::connect_to_backend() noexcept
{
    int backend_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (backend_fd < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(backend_fd))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        ::close(backend_fd);
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    backend_addr.sin_port = htons(backend_port_);
    if (inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr) <= 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {}", backend_ip_);
        ::close(backend_fd);
        return -1;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    if (connect(backend_fd, (struct sockaddr *)&backend_addr, sizeof(backend_addr)) < 0)
    {
        if (errno != EINPROGRESS)
        {
            LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        LOG_DEBUG("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", backend_ip_, backend_port_);
        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        fd_set write_fds;
        FD_ZERO(&write_fds);
        FD_SET(backend_fd, &write_fds);
        timeval timeout{.tv_sec = 5, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        int activity = select(backend_fd + 1, nullptr, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            LOG_ERROR("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{} (errno={})", backend_ip_, backend_port_, errno);
            ::close(backend_fd);
            return -1;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        int error = 0;
        socklen_t len = sizeof(error);
        if (getsockopt(backend_fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        if (error != 0)
        {
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{}: {}", backend_ip_, backend_port_, strerror(error));
            ::close(backend_fd);
            return -1;
        }
        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", backend_ip_, backend_port_);
    }
    else
    {
        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)", backend_ip_, backend_port_);
    }
    return backend_fd;
}

void Http2Server::handle_new_connection() noexcept
{
    struct sockaddr_in client_addr{};
    socklen_t client_len = sizeof(client_addr);
    int client_fd = accept(listen_fd_, (struct sockaddr *)&client_addr, &client_len);
    if (client_fd < 0)
    {
        if (errno != EAGAIN && errno != EWOULDBLOCK)
        {
            LOG_ERROR("[server.cpp:258] ‚ùå –û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(client_fd))
    {
        LOG_ERROR("[server.cpp:267] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
    std::string client_ip_str = inet_ntoa(client_addr.sin_addr);
    uint16_t client_port_num = ntohs(client_addr.sin_port);
    LOG_INFO("[server.cpp:273] üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})",
             client_ip_str, client_port_num, client_fd);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏
    int backend_fd = connect_to_backend();
    if (backend_fd == -1)
    {
        LOG_ERROR("[server.cpp:284] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.");
        ::close(client_fd);
        return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ SSL-–æ–±—ä–µ–∫—Ç–∞ –¥–ª—è TLS-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    SSL *ssl = SSL_new(ssl_ctx_);
    if (!ssl)
    {
        LOG_ERROR("[server.cpp:292] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ SSL –∫ —Å–æ–∫–µ—Ç—É
    SSL_set_fd(ssl, client_fd);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è SSL
    SSL_set_mode(ssl, SSL_MODE_ENABLE_PARTIAL_WRITE | SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è nghttp2_session
    nghttp2_session *session = init_nghttp2_session(client_fd, ssl);
    if (!session)
    {
        LOG_ERROR("[server.cpp:308] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å nghttp2_session –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        SSL_free(ssl);
        ::close(client_fd);
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ connections_
    ConnectionInfo info;
    info.backend_fd = backend_fd;
    info.ssl = ssl;
    info.handshake_done = false;
    info.session = session;
    connections_[client_fd] = info;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    timeouts_[client_fd] = time(nullptr);

    LOG_INFO("[server.cpp:308] ‚úÖ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ handshake –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.");

    // –ó–∞–ø—É—Å–∫–∞–µ–º TLS handshake
    int ssl_accept_result = SSL_accept(ssl);
    if (ssl_accept_result <= 0)
    {
        int ssl_error = SSL_get_error(ssl, ssl_accept_result);
        if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
        {
            LOG_DEBUG("[server.cpp:318] ‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE). –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ connections_ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
            return; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ select()
        }
        else
        {
            LOG_ERROR("[server.cpp:323] ‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
            SSL_free(ssl);
            connections_.erase(client_fd);
            timeouts_.erase(client_fd);
            ::close(client_fd);
            return;
        }
    }

    // HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù
    LOG_INFO("[server.cpp:330] ‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})",
             client_ip_str, client_port_num, client_fd);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –ø–æ–º–µ—á–∞–µ–º handshake –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
    info.handshake_done = true;
    connections_[client_fd] = info;
    LOG_INFO("[server.cpp:337] ‚úÖ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})",
             client_ip_str, client_port_num, client_fd);
}

void Http2Server::handle_io_events() noexcept
{
    // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    auto connections_copy = connections_;
    // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–æ–ø–∏–∏
    for (const auto &conn : connections_copy)
    {
        int client_fd = conn.first;               // –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        const ConnectionInfo &info = conn.second; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏

        // üü° –ü–†–û–í–ï–†–ö–ê: –≠–¢–û SSL-–°–û–ï–î–ò–ù–ï–ù–ò–ï?
        bool is_ssl = info.ssl != nullptr;

        // üü† –ï–°–õ–ò HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù ‚Äî –ü–û–ü–´–¢–ö–ê –ó–ê–í–ï–†–®–ò–¢–¨ –ï–ì–û
        if (is_ssl && !info.handshake_done)
        {
            int ssl_accept_result = SSL_accept(info.ssl);
            if (ssl_accept_result <= 0)
            {
                int ssl_error = SSL_get_error(info.ssl, ssl_accept_result);
                if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
                {
                    // üü° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø SSL
                    LOG_DEBUG("üîí SSL state: {}", SSL_state_string_long(info.ssl));
                    // üü¢ –ü–û–ü–´–¢–ö–ê –ü–†–û–ß–ò–¢–ê–¢–¨ ClientHello (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                    char client_hello[8192];
                    int bytes_read = SSL_read(info.ssl, client_hello, sizeof(client_hello));
                    if (bytes_read > 0)
                    {
                        // üü£ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ClientHello
                        LOG_INFO("üìã ClientHello –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}:
{}", client_fd, std::string(client_hello, bytes_read).substr(0, 512));
                    }
                    else if (bytes_read == 0)
                    {
                        LOG_WARN("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {} –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è handshake", client_fd);
                        SSL_free(info.ssl);
                        connections_.erase(client_fd);
                        ::close(client_fd);
                        continue;
                    }
                    else
                    {
                        int ssl_error_after_read = SSL_get_error(info.ssl, bytes_read);
                        if (ssl_error_after_read != SSL_ERROR_WANT_READ && ssl_error_after_read != SSL_ERROR_WANT_WRITE)
                        {
                            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ClientHello: {}", ERR_error_string(ERR_get_error(), nullptr));
                            SSL_free(info.ssl);
                            connections_.erase(client_fd);
                            ::close(client_fd);
                            continue;
                        }
                    }
                    LOG_DEBUG("‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE)");
                    continue; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                }
                else
                {
                    LOG_ERROR("‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
                    SSL_free(info.ssl);
                    connections_.erase(client_fd);
                    ::close(client_fd);
                    continue;
                }
            }
            // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù
            LOG_INFO("‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {} (fd={})", client_fd, client_fd);
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –ø–æ–º–µ—á–∞–µ–º handshake –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
            ConnectionInfo &mutable_info = connections_[client_fd];
            mutable_info.handshake_done = true;
        }

        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        FD_SET(client_fd, &read_fds);
        FD_SET(info.backend_fd, &read_fds);                  // üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º info.backend_fd
        int max_fd = std::max({client_fd, info.backend_fd}); // üëà std::max —Å initializer list
        timeval timeout{.tv_sec = 0, .tv_usec = 1000};       // 1 –º—Å ‚Äî —É—Å–∫–æ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            continue;
        }

        // üü¢ –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –ö–õ–ò–ï–ù–¢–ê –ö –°–ï–†–í–ï–†–£
        if (FD_ISSET(client_fd, &read_fds))
        {
            LOG_INFO("[server.cpp:375] üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {} (fd={})", client_fd, client_fd);
            LOG_DEBUG("[server.cpp:376] üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ forward_data: from_fd={}, to_fd={}", client_fd, info.backend_fd);
            if (info.ssl != nullptr)
            {
                LOG_DEBUG("[server.cpp:379] üîê SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —á—Ç–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SSL");
            }
            bool keep_alive = forward_data(client_fd, info.backend_fd, info.ssl, info.session); // üëà –ü–µ—Ä–µ–¥–∞—ë–º session
            if (!keep_alive)
            {
                // üü¢ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º SSL_shutdown()
                if (is_ssl && info.ssl)
                {
                    // üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–∑–≤–∞–Ω SSL_shutdown()
                    int shutdown_state = SSL_get_shutdown(info.ssl);
                    if (shutdown_state & SSL_RECEIVED_SHUTDOWN)
                    {
                        LOG_DEBUG("[server.cpp:575] üü° –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. SSL_shutdown() –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
                    }
                    else
                    {
                        LOG_DEBUG("[server.cpp:578] üîÑ –í—ã–∑–æ–≤ SSL_shutdown() –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                        int shutdown_result = SSL_shutdown(info.ssl);
                        if (shutdown_result < 0)
                        {
                            LOG_WARN("[server.cpp:581] ‚ö†Ô∏è SSL_shutdown() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {}",
                                     ERR_error_string(ERR_get_error(), nullptr));
                        }
                        else
                        {
                            LOG_INFO("[server.cpp:584] ‚úÖ SSL_shutdown() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                        }
                    }
                }
                // üü¢ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
                ::close(client_fd);
                ::close(info.backend_fd);
                // üü¢ –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SSL-–æ–±—ä–µ–∫—Ç
                if (is_ssl && info.ssl)
                {
                    SSL_free(info.ssl);
                }
                // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º nghttp2_session
                if (info.session)
                {
                    nghttp2_session_del(info.session);
                }
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, info.backend_fd);
            }
            else
            {
                timeouts_[client_fd] = time(nullptr);
            }
        }
        // üü° –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –°–ï–†–í–ï–†–ê –ö –ö–õ–ò–ï–ù–¢–£
        if (FD_ISSET(info.backend_fd, &read_fds))
        {
            LOG_INFO("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {}", info.backend_fd);
            if (!forward_data(info.backend_fd, client_fd, nullptr, nullptr)) // üëà –ü–µ—Ä–µ–¥–∞—ë–º nullptr –¥–ª—è session
            {
                // üü¢ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º SSL_shutdown()
                if (is_ssl && info.ssl)
                {
                    // üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–∑–≤–∞–Ω SSL_shutdown()
                    int shutdown_state = SSL_get_shutdown(info.ssl);
                    if (shutdown_state & SSL_RECEIVED_SHUTDOWN)
                    {
                        LOG_DEBUG("[server.cpp:575] üü° –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. SSL_shutdown() –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
                    }
                    else
                    {
                        LOG_DEBUG("[server.cpp:578] üîÑ –í—ã–∑–æ–≤ SSL_shutdown() –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                        int shutdown_result = SSL_shutdown(info.ssl);
                        if (shutdown_result < 0)
                        {
                            LOG_WARN("[server.cpp:581] ‚ö†Ô∏è SSL_shutdown() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {}",
                                     ERR_error_string(ERR_get_error(), nullptr));
                        }
                        else
                        {
                            LOG_INFO("[server.cpp:584] ‚úÖ SSL_shutdown() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                        }
                    }
                }
                // üü¢ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
                ::close(client_fd);
                ::close(info.backend_fd);
                // üü¢ –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SSL-–æ–±—ä–µ–∫—Ç
                if (is_ssl && info.ssl)
                {
                    SSL_free(info.ssl);
                }
                // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º nghttp2_session
                if (info.session)
                {
                    nghttp2_session_del(info.session);
                }
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, info.backend_fd);
            }
            else
            {
                timeouts_[client_fd] = time(nullptr);
            }
        }
    }
}

bool Http2Server::forward_data(int from_fd, int to_fd, SSL *ssl, nghttp2_session *session) noexcept
{
    // üü¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ê –í –§–£–ù–ö–¶–ò–Æ
    LOG_DEBUG("[server.cpp:460] üîÑ –ù–∞—á–∞–ª–æ forward_data(from_fd={}, to_fd={}, ssl={}, session={})",
              from_fd, to_fd, ssl ? "true" : "false", session ? "true" : "false");

    // üü° –ë–£–§–ï–† –î–õ–Ø –ü–†–ò–Å–ú–ê –î–ê–ù–ù–´–•
    char buffer[8192];

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.
    LOG_DEBUG("üì¶ –ë—É—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω: —Ä–∞–∑–º–µ—Ä {} –±–∞–π—Ç", sizeof(buffer));

    // üü† –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø: SSL –ò–õ–ò –ù–ï–¢
    bool use_ssl = (ssl != nullptr);
    bool use_http2 = (session != nullptr);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî –≤–∞–∂–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    LOG_DEBUG("üîí use_ssl = {}", use_ssl ? "true" : "false");
    LOG_DEBUG("üåê use_http2 = {}", use_http2 ? "true" : "false");

    // üü£ –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–ß–ò–¢–ê–ù–ù–´–• –ë–ê–ô–¢
    ssize_t bytes_read = 0;

    // üü§ –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• –°–û –°–û–ö–ï–¢–ê –ò–°–¢–û–ß–ù–ò–ö–ê (–° –£–ß–Å–¢–û–ú TLS)
    if (use_ssl)
    {
        // üü¢ –ß–¢–ï–ù–ò–ï –ß–ï–†–ï–ó SSL
        LOG_DEBUG("[server.cpp:479] üü¢ –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SSL –¥–ª—è client_fd={}", from_fd);
        bytes_read = SSL_read(ssl, buffer, sizeof(buffer));
        if (bytes_read <= 0)
        {
            int ssl_error = SSL_get_error(ssl, bytes_read);
            LOG_DEBUG("[server.cpp:483] üî¥ SSL_read –≤–µ—Ä–Ω—É–ª {} –±–∞–π—Ç. –ö–æ–¥ –æ—à–∏–±–∫–∏: {}", bytes_read, ssl_error);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
            {
                LOG_WARN("[server.cpp:486] ‚è∏Ô∏è SSL_read —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {} (SSL_ERROR_WANT_READ/WRITE)",
                         SSL_state_string_long(ssl));
                return true;
            }
            else if (bytes_read == 0)
            {
                // üëá –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —É–¥–∞–ª—ë–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                LOG_INFO("[server.cpp:495] üîö –ö–ª–∏–µ–Ω—Ç (from_fd={}) –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", from_fd);
                return false;
            }
            else
            {
                // üëá –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
                LOG_ERROR("[server.cpp:500] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ SSL_read: {} (–∫–æ–¥ –æ—à–∏–±–∫–∏: {})",
                          ERR_error_string(ERR_get_error(), nullptr), ssl_error);
                return false;
            }
        }
        LOG_INFO("[server.cpp:495] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ TLS", bytes_read);
    }
    else
    {
        // üü° –ß–¢–ï–ù–ò–ï –ß–ï–†–ï–ó TCP (–ë–ï–ó SSL)
        bytes_read = recv(from_fd, buffer, sizeof(buffer), 0);
        if (bytes_read < 0 && errno != EAGAIN && errno != EWOULDBLOCK)
        {
            // üü• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚Äî –ó–ê–ö–†–´–¢–¨ –°–û–ï–î–ò–ù–ï–ù–ò–ï
            LOG_ERROR("‚ùå recv() –æ—à–∏–±–∫–∞: {}", strerror(errno));
            return false;
        }
    }

    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ß–¢–ï–ù–ò–Ø (bytes_read > 0)
    if (bytes_read > 0)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        LOG_INFO("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (from_fd={})", bytes_read, from_fd);

        // üü£ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–í–û–ì–û HTTP-–ó–ê–ü–†–û–°–ê (–¢–û–õ–¨–ö–û –ï–°–õ–ò –≠–¢–û –ö–õ–ò–ï–ù–¢ –ò TLS)
        if (use_ssl)
        {
            std::string request_str(buffer, static_cast<size_t>(bytes_read));
            for (char &c : request_str)
            {
                if (c < 32 && c != '\n' && c != '\r' && c != '\t')
                    c = '?';
            }
            LOG_INFO("üìã –ü–µ—Ä–≤—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
{}", request_str.substr(0, 512));
        }

        // üü§ –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ù–ê –°–û–ö–ï–¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
        ssize_t total_sent = 0;
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        LOG_DEBUG("üìå total_sent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {}", total_sent);

        // üü§ –¶–ò–ö–õ –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–• (–ü–û–ö–ê –ù–ï –í–°–ï –ë–ê–ô–¢–´ –û–¢–ü–†–ê–í–õ–ï–ù–´)
        while (total_sent < bytes_read)
        {
            // üü† –†–ê–°–ß–Å–¢ –û–°–¢–ê–í–®–ò–•–°–Ø –ë–ê–ô–¢ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò
            size_t remaining = static_cast<size_t>(bytes_read - total_sent);
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –æ–±—ä—ë–º ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è.
            LOG_DEBUG("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {} –±–∞–π—Ç (total_sent={}, bytes_read={})", remaining, total_sent, bytes_read);

            // üü¢ –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ù–ê –°–û–ö–ï–¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
            ssize_t bytes_sent = 0;

            // üëá –ü–†–û–í–ï–†–ö–ê: –ï–°–õ–ò –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï ‚Äî –≠–¢–û –ö–õ–ò–ï–ù–¢ –° TLS ‚Äî –ò–°–ü–û–õ–¨–ó–£–ï–ú SSL_WRITE
            if (use_ssl && to_fd == from_fd)
            { // ‚ùó –í–ê–ñ–ù–û: –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –ù–ï –≤–µ—Ä–Ω–æ!
                // üü° –ù–æ –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ to_fd –∫–ª–∏–µ–Ω—Ç–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                // üö´ –ü–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
                // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –º—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.
                // ‚ö†Ô∏è –£–î–ê–õ–ò–ú –≠–¢–û –£–°–õ–û–í–ò–ï –ò –ü–†–ò–ú–ï–ù–ò–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ï–¢–û–î.
            }
            // üü¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–î–•–û–î: –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ `ssl != nullptr`, —Ç–æ `from_fd` ‚Äî —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç.
            // –ê –∑–Ω–∞—á–∏—Ç, `to_fd` ‚Äî —ç—Ç–æ –±—ç–∫–µ–Ω–¥, –∏ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            // ‚ùå –ù–æ —ç—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ! –ù–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å.
            // üü† –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ú—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ forward_data –Ω–µ —Ç–æ–ª—å–∫–æ `ssl`, –Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—É–¥–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
            // üö´ –ù–æ –≤ —Ç–µ–∫—É—â–µ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç.
            // üí° –í–´–•–û–î: –ú—ã –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `SSL_write` —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ `to_fd` ‚Äî —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç, –∏ —É –Ω–∞—Å –µ—Å—Ç—å `SSL*`.
            // üìå –î–õ–Ø –≠–¢–û–ì–û –ù–£–ñ–ù–û –ò–ó–ú–ï–ù–ò–¢–¨ –ö–û–ù–°–¢–†–£–ö–¶–ò–Æ –ö–õ–ê–°–°–ê.
            // üî• –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã):
            // –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ –≤ handle_io_events –º—ã –≤—ã–∑—ã–≤–∞–µ–º forward_data –¥–≤–∞–∂–¥—ã:
            // 1. client_fd -> backend_fd (—Å use_ssl=true) ‚Äî –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ SSL.
            // 2. backend_fd -> client_fd (—Å use_ssl=nullptr) ‚Äî –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å SSL!
            // üéØ –ó–Ω–∞—á–∏—Ç, –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ forward_data –Ω–µ —Ç–æ–ª—å–∫–æ `ssl`, –Ω–æ –∏ —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∫—É–¥–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
            // üõë –ü–û–ö–ê –ù–ï –ë–£–î–ï–ú –ú–ï–ù–Ø–¢–¨ –°–ò–ì–ù–ê–¢–£–†–£ –§–£–ù–ö–¶–ò–ò.
            // üí° –í–ú–ï–°–¢–û –≠–¢–û–ì–û, –í–û–°–ü–û–õ–¨–ó–£–ï–ú–°–Ø –¢–ï–ú, –ß–¢–û –í connections_ –•–†–ê–ù–ò–¢–°–Ø SSL* –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê.
            // –ú—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ SSL* –ø–æ to_fd, –µ—Å–ª–∏ to_fd ‚Äî —ç—Ç–æ client_fd.
            // üü¢ –ü–û–ò–°–ö SSL* –ü–û to_fd
            SSL *target_ssl = nullptr;
            for (const auto &conn : connections_)
            {
                if (conn.first == to_fd)
                {
                    target_ssl = conn.second.ssl;
                    break;
                }
            }
            if (target_ssl != nullptr)
            {
                // üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SSL_write
                LOG_DEBUG("üîí –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SSL_write –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (to_fd={})", to_fd);
                bytes_sent = SSL_write(target_ssl, buffer + total_sent, remaining);
                if (bytes_sent <= 0)
                {
                    int ssl_error = SSL_get_error(target_ssl, bytes_sent);
                    if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
                    {
                        LOG_WARN("‚è∏Ô∏è SSL_write —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏");
                        return true; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                    }
                    else
                    {
                        LOG_ERROR("‚ùå SSL_write –æ—à–∏–±–∫–∞: {}", ERR_error_string(ERR_get_error(), nullptr));
                        return false;
                    }
                }
            }
            else
            {
                // üü° –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ send
                LOG_DEBUG("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ send (to_fd={})", to_fd);
                bytes_sent = send(to_fd, buffer + total_sent, remaining, 0);
                if (bytes_sent < 0 && errno != EAGAIN && errno != EWOULDBLOCK)
                {
                    LOG_ERROR("‚ùå send() –æ—à–∏–±–∫–∞: {}", strerror(errno));
                    return false;
                }
            }

            // üü° –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ô –û–¢–ü–†–ê–í–ö–ò (bytes_sent > 0)
            if (bytes_sent > 0)
            {
                std::string sent_chunk(buffer + total_sent, static_cast<size_t>(bytes_sent));
                for (char &c : sent_chunk)
                {
                    if (c < 32 && c != '\n' && c != '\r' && c != '\t')
                        c = '?';
                }
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 256 –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
                LOG_DEBUG("üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ {} –±–∞–π—Ç):
{}",
                          std::min<size_t>(256, sent_chunk.size()),
                          sent_chunk.substr(0, std::min<size_t>(256, sent_chunk.size())));
            }

            // üü• –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –û–¢–ü–†–ê–í–ö–ò (bytes_sent < 0)
            if (bytes_sent < 0)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ.
                LOG_ERROR("‚ùå send() –∏–ª–∏ SSL_write –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: errno={} ({})", errno, strerror(errno));
                // üü® –ü–†–û–í–ï–†–ö–ê –ù–ê EAGAIN / EWOULDBLOCK
                if (errno == EAGAIN || errno == EWOULDBLOCK)
                {
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –Ω–µ –æ—à–∏–±–∫–∞, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                    LOG_WARN("‚è∏Ô∏è –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {}/{} –±–∞–π—Ç", total_sent, bytes_read);
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.
                    return true;
                }
                else
                {
                    // üü• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚Äî –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).
                    LOG_ERROR("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {}", strerror(errno));
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
                    return false;
                }
            }

            // üü¢ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–Å–¢–ß–ò–ö–ê –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–• –ë–ê–ô–¢
            total_sent += bytes_sent;
            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏.
            LOG_DEBUG("üìà total_sent –æ–±–Ω–æ–≤–ª—ë–Ω: {} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç)", total_sent, bytes_sent);

            // üü° –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò 0 –ë–ê–ô–¢
            if (bytes_sent == 0)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                LOG_WARN("‚ö†Ô∏è send() –∏–ª–∏ SSL_write –≤–µ—Ä–Ω—É–ª 0 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
                // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ ‚Äî –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞.
                break;
            }
        }

        // üü¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û–ô –ü–ï–†–ï–î–ê–ß–ò –í–°–ï–• –î–ê–ù–ù–´–•
        LOG_SUCCESS("üéâ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –æ—Ç {} –∫ {}", bytes_read, from_fd, to_fd);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.
        return true;
    }
    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø (bytes_read == 0)
    else if (bytes_read == 0)
    {
        LOG_INFO("üîö –ö–ª–∏–µ–Ω—Ç (from_fd={}) –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", from_fd);
        return false;
    }
    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –ß–¢–ï–ù–ò–Ø (bytes_read < 0)
    else
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á—Ç–µ–Ω–∏—è ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        LOG_DEBUG("‚è∏Ô∏è recv() –∏–ª–∏ SSL_read() –≤–µ—Ä–Ω—É–ª -1");
        return true;
    }
}

nghttp2_session *Http2Server::init_nghttp2_session(int client_fd, SSL *ssl) noexcept
{
    // –°–æ–∑–¥–∞–µ–º nghttp2_session
    nghttp2_session_callbacks callbacks;
    memset(&callbacks, 0, sizeof(callbacks));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    callbacks.on_header_callback = on_header;
    callbacks.on_data_chunk_recv_callback = on_data_chunk_recv;
    callbacks.on_frame_recv_callback = on_frame_recv;
    callbacks.send_callback = send_callback;

    nghttp2_session *session = nullptr;
    int rv = nghttp2_session_client_new(&session, &callbacks, this);
    if (rv != 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å nghttp2_session: {}", nghttp2_strerror(rv));
        return nullptr;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    nghttp2_session_set_user_data(session, this);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    nghttp2_session_set_send_callback(session, send_callback);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    nghttp2_session_set_recv_callback(session, [](nghttp2_session *session, const uint8_t *data, size_t len, int flags, void *user_data) -> int {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return 0;
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    nghttp2_session_set_error_callback(session, [](nghttp2_session *session, int error_code, const char *msg, size_t msglen, void *user_data) -> int {
        LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ nghttp2: {} ({})", msg, error_code);
        return 0;
    });

    return session;
}

int Http2Server::on_header(nghttp2_session *session, const nghttp2_frame *frame, const uint8_t *name, size_t namelen, const uint8_t *value, size_t valuelen, uint8_t flags, void *user_data)
{
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    std::string header_name(reinterpret_cast<const char *>(name), namelen);
    std::string header_value(reinterpret_cast<const char *>(value), valuelen);

    LOG_DEBUG("üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {} = {}", header_name, header_value);

    return 0;
}

int Http2Server::on_data_chunk_recv(nghttp2_session *session, const nghttp2_frame *frame, const uint8_t *data, size_t len, void *user_data)
{
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    LOG_DEBUG("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {} –±–∞–π—Ç", len);

    return 0;
}

int Http2Server::on_frame_recv(nghttp2_session *session, const nghttp2_frame *frame, void *user_data)
{
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–µ–π–º–æ–≤
    LOG_DEBUG("üì¶ –ü–æ–ª—É—á–µ–Ω —Ñ—Ä–µ–π–º: —Ç–∏–ø {}", frame->hd.type);

    return 0;
}

int Http2Server::send_callback(nghttp2_session *session, const uint8_t *data, size_t len, int flags, void *user_data)
{
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    LOG_DEBUG("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {} –±–∞–π—Ç", len);

    return 0;
}

std::string Http2Server::generate_index_html() const
{
    return R"(<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>ErosJ</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
    <h1>Proxy —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP/2)</h1>
    <p>–≠—Ç–æ HTTP/2 —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8586.</p>
    <script src="/js/main.js"></script>
</body>
</html>)";
}

std::string Http2Server::generate_favicon() const
{
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç favicon.ico
    // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    return "";
}

std::string Http2Server::generate_main_css() const
{
    return "body { background: #eee; font-family: Arial, sans-serif; }";
}

std::string Http2Server::generate_main_js() const
{
    return "console.log('Hello from Russia! (HTTP/2)');";
}