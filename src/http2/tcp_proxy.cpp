// src/tcp_proxy.cpp
/**
 * @file tcp_proxy.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è TCP-–ø—Ä–æ–∫—Å–∏ –¥–ª—è HTTP/2 –∏ HTTP/1.1.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π I/O (select) –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-22
 * @version 1.0
 * @license MIT
 */

#include "../../include/http2/tcp_proxy.hpp"
#include "../../include/config.h"
#include <cstring>
#include <algorithm>


const AppConfig app_config{};

TcpProxy::TcpProxy(int listen_port, const std::string& backend_ip, int backend_port)
    : listen_fd_(-1), backend_port_(backend_port), backend_ip_(backend_ip), listen_port_(listen_port), ssl_ctx_(nullptr) {
    // === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenSSL ===
    OPENSSL_init_ssl(OPENSSL_INIT_LOAD_CONFIG, nullptr);
    // –í TcpProxy::TcpProxy(...) –ø–µ—Ä–µ–¥ SSL_CTX_new()
    if (!OPENSSL_init_ssl(OPENSSL_INIT_LOAD_CONFIG, nullptr)) {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenSSL");
        ERR_print_errors_fp(stderr);
        return;
    }
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    ssl_ctx_ = SSL_CTX_new(TLS_server_method());
    if (!ssl_ctx_) {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç");
        ERR_print_errors_fp(stderr); // üëà –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ OpenSSL
        return;
    }
SSL_CTX_set_min_proto_version(ssl_ctx_, TLS1_2_VERSION);
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á
    auto fullchain_path = std::string(AppConfig::SSL_DIR) + "/" + std::string(AppConfig::FULLCHAIN_FILE);
    if (SSL_CTX_use_certificate_file(ssl_ctx_, fullchain_path.c_str(), SSL_FILETYPE_PEM) <= 0) {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç");
        ERR_print_errors_fp(stderr);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    auto privkey_path = std::string(AppConfig::SSL_DIR) + "/" + std::string(AppConfig::PRIVEKEY_FILE);
    if (SSL_CTX_use_PrivateKey_file(ssl_ctx_, privkey_path.c_str(), SSL_FILETYPE_PEM) <= 0) {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á");
        ERR_print_errors_fp(stderr);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (!SSL_CTX_check_private_key(ssl_ctx_)) {
        LOG_ERROR("‚ùå –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        ERR_print_errors_fp(stderr);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    LOG_INFO("‚úÖ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
}




bool TcpProxy::run() {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(listen_port_);

    if (bind(listen_fd_, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", listen_port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    LOG_INFO("TCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {} –¥–ª—è {}:{}",
             listen_port_, backend_ip_, backend_port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_) {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        FD_SET(listen_fd_, &read_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const auto& [client_fd, backend_fd] : connections_) {
            FD_SET(client_fd, &read_fds);
            FD_SET(backend_fd, &read_fds);
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        int max_fd = listen_fd_;
        for (const auto& [client_fd, backend_fd] : connections_) {
            max_fd = std::max({max_fd, client_fd, backend_fd});
        }

        timeval timeout{.tv_sec = 1, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);

        if (activity < 0 && errno != EINTR) {
            LOG_ERROR("–û—à–∏–±–∫–∞ select: {}", strerror(errno));
            continue;
        }

        if (activity > 0) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if (FD_ISSET(listen_fd_, &read_fds)) {
                handle_new_connection();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
            handle_io_events();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end(); ) {
            if (now - it->second > 30) { // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                int client_fd = it->first;
                int backend_fd = connections_[client_fd];
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            } else {
                ++it;
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto& [client_fd, backend_fd] : connections_) {
        ::close(client_fd);
        ::close(backend_fd);
    }
    connections_.clear();

    if (listen_fd_ != -1) {
        ::close(listen_fd_);
    }

    LOG_INFO("TCP-–ø—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return true;
}

void TcpProxy::stop() {
    running_ = false;
}

bool TcpProxy::set_nonblocking(int fd) noexcept {
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1) {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

int TcpProxy::connect_to_backend() noexcept {
    int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock < 0) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É: {}", strerror(errno));
        return -1;
    }

    if (!set_nonblocking(sock)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –±—ç–∫–µ–Ω–¥–∞");
        ::close(sock);
        return -1;
    }

    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr);
    backend_addr.sin_port = htons(backend_port_);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—ç–∫–µ–Ω–¥—É
    if (::connect(sock, (struct sockaddr*)&backend_addr, sizeof(backend_addr)) < 0) {
        if (errno != EINPROGRESS) { // EINPROGRESS –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å–æ–∫–µ—Ç–∞
            LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—ç–∫–µ–Ω–¥—É {}: {}", backend_ip_, strerror(errno));
            ::close(sock);
            return -1;
        }
    }

    return sock;
}

// src/http2/tcp_proxy.cpp
void TcpProxy::handle_new_connection() noexcept {
    struct sockaddr_in client_addr{};
    socklen_t client_len = sizeof(client_addr);
    int client_fd = accept(listen_fd_, (struct sockaddr*)&client_addr, &client_len);
    if (client_fd < 0) {
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            LOG_ERROR("–û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(client_fd)) {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

       // === –°–æ–∑–¥–∞–Ω–∏–µ SSL-–æ–±—ä–µ–∫—Ç–∞ ===
    SSL *ssl = SSL_new(ssl_ctx_);
    if (!ssl) {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–æ–±—ä–µ–∫—Ç. ssl_ctx_ = {:p}", static_cast<void*>(ssl_ctx_));
        ::close(client_fd);
        return;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è handshake
    pending_ssl_accepts_[client_fd] = ssl;

    // üëá –õ–û–ì–ò–†–£–ï–ú –ê–î–†–ï–° –ö–õ–ò–ï–ù–¢–ê –ò –ü–û–†–¢
    std::string client_ip_str = inet_ntoa(client_addr.sin_addr);
    uint16_t client_port_num = ntohs(client_addr.sin_port);
    LOG_INFO("üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);

    // üëá –õ–û–ì–ò–†–£–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï SSL-–ö–û–ù–¢–ï–ö–°–¢–ê (ssl_ctx_)
    if (!ssl_ctx_) {
        LOG_ERROR("‚ùå SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        SSL_free(ssl);
        ::close(client_fd);
        return;
    }

    // üëá –õ–û–ì–ò–†–£–ï–ú –ú–ï–¢–û–î TLS (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å TLS_server_method())
    const SSL_METHOD *method = SSL_CTX_get_ssl_method(ssl_ctx_);
    if (!method) {
        LOG_ERROR("‚ùå SSL-–º–µ—Ç–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω!");
        SSL_free(ssl);
        ::close(client_fd);
        return;
    }
    LOG_DEBUG("‚úÖ SSL-–º–µ—Ç–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {}", SSL_get_version(ssl)); // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å "TLSv1.3" –∏–ª–∏ "TLSv1.2"

    // üëá –õ–û–ì–ò–†–£–ï–ú –í–ï–†–°–ò–Æ SSL
    long ssl_options = SSL_CTX_get_options(ssl_ctx_);
    LOG_DEBUG("‚úÖ SSL-–æ–ø—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: 0x{:X}", ssl_options);

 // üëá –õ–û–ì–ò–†–£–ï–ú ALPN (–µ—Å–ª–∏ –µ—Å—Ç—å)
    // –í OpenSSL –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ SSL_CTX_get_alpn_select_cb.
    // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL_get0_alpn_selected,
    // –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è handshake.
    LOG_DEBUG("‚úÖ ALPN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ SSL_CTX_set_alpn_select_cb)");

    // üëá –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
    SSL_set_fd(ssl, client_fd);
    LOG_DEBUG("‚úÖ SSL_set_fd(ssl={}, fd={}) –≤—ã–ø–æ–ª–Ω–µ–Ω", static_cast<void*>(ssl), client_fd);

    // üëá –õ–û–ì–ò–†–£–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï SSL-–û–ë–™–ï–ö–¢–ê –ü–ï–†–ï–î HANDSHAKE
    LOG_DEBUG("üìå SSL-–æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ SSL_accept:");
    LOG_DEBUG("   - SSL_state: {}", SSL_state_string_long(ssl));
    LOG_DEBUG("   - SSL_version: {}", SSL_get_version(ssl));
    LOG_DEBUG("   - SSL_cipher: {}", SSL_get_cipher_name(ssl) ? SSL_get_cipher_name(ssl) : "N/A");
    LOG_DEBUG("   - SSL_session_reused: {}", SSL_session_reused(ssl) ? "true" : "false");

     pending_ssl_accepts_[client_fd] = ssl;

    // === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ===
    int ret = SSL_accept(ssl);
LOG_INFO("‚úÖ –í—ã–∑–≤–∞–Ω SSL_accept(ssl={:p}, fd={})", static_cast<void*>(ssl), client_fd);
if (ret <= 0) {
    int ssl_error = SSL_get_error(ssl, ret);
    switch (ssl_error) {
        case SSL_ERROR_WANT_READ:
            LOG_DEBUG("‚ö†Ô∏è SSL_accept: —Ç—Ä–µ–±—É–µ—Ç—Å—è —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ–º...");
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            pending_ssl_accepts_[client_fd] = ssl;
            return; // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        case SSL_ERROR_WANT_WRITE:
            LOG_DEBUG("‚ö†Ô∏è SSL_accept: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ–º...");
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            pending_ssl_accepts_[client_fd] = ssl;
            return; // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        default:
            LOG_ERROR("‚ùå SSL_accept –≤–µ—Ä–Ω—É–ª {}, –æ—à–∏–±–∫–∞: {}", ret, ssl_error);
            ERR_print_errors_fp(stderr);
            SSL_free(ssl);
            ::close(client_fd);
            return;
    }
}

    // üëá –õ–û–ì–ò–†–£–ï–ú –£–°–ü–ï–®–ù–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï
    LOG_SUCCESS("‚úÖ SSL_accept —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}:{} (fd={})", client_ip_str, client_port_num, client_fd);
    LOG_INFO("üìå SSL-–æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ handshake:");
    LOG_INFO("   - SSL_state: {}", SSL_state_string_long(ssl));
    LOG_INFO("   - SSL_version: {}", SSL_get_version(ssl));
    LOG_INFO("   - SSL_cipher: {}", SSL_get_cipher_name(ssl) ? SSL_get_cipher_name(ssl) : "N/A");
    LOG_INFO("   - SSL_session_reused: {}", SSL_session_reused(ssl) ? "true" : "false");

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—ç–∫–µ–Ω–¥—É (–±–µ–∑ TLS)
    int backend_fd = connect_to_backend();
    if (backend_fd == -1) {
        SSL_free(ssl);
        ::close(client_fd);
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connections_[client_fd] = backend_fd;
    timeouts_[client_fd] = time(nullptr); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    LOG_INFO("‚úÖ –ù–æ–≤–æ–µ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç {}:{}, –±—ç–∫–µ–Ω–¥ {}:{}",
             client_ip_str, client_port_num,
             backend_ip_, backend_port_);
}

void TcpProxy::handle_io_events() noexcept {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    auto connections_copy = connections_;
    for (const auto& [client_fd, backend_fd] : connections_copy) {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        FD_SET(client_fd, &read_fds);
        int max_fd = client_fd;
        timeval timeout{.tv_sec = 0, .tv_usec = 10000}; // 10 –º—Å
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity <= 0) {
            continue;
        }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
        if (FD_ISSET(client_fd, &read_fds)) {
            // üëá –õ–û–ì–ò–†–£–ï–ú –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –û–¢ –ö–õ–ò–ï–ù–¢–ê
            LOG_INFO("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
            if (!forward_data(client_fd, backend_fd)) {
                // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                timeouts_[client_fd] = time(nullptr);
            }
        }
    }
}

/**
 * @brief –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º –≤ –¥–≤—É—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.
 * @param client_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
 * @param backend_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏.
 * @return true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, false ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
 */
[[nodiscard]] bool Http1Server::forward_data(int client_fd, int backend_fd) noexcept {
    // –ë—É—Ñ–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    char buffer[8192];

    // === –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–õ–ò–ï–ù–¢ ‚Üí –°–ï–†–í–ï–† ===
    ssize_t bytes_read = recv(client_fd, buffer, sizeof(buffer), 0);
    if (bytes_read > 0) {
        LOG_INFO("üì• –ü–æ–ª—É—á–µ–Ω—ã {} –±–∞–π—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", bytes_read, client_fd);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –†–æ—Å—Å–∏–∏
        ssize_t total_sent = 0;
        while (total_sent < bytes_read) {
            ssize_t bytes_sent = send(backend_fd, buffer + total_sent, bytes_read - total_sent, 0);
            if (bytes_sent < 0) {
                if (errno == EAGAIN || errno == EWOULDBLOCK) {
                    // –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
                    LOG_DEBUG("–ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ");
                    return true; // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                } else {
                    LOG_ERROR("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {}", strerror(errno));
                    return false; // –û—à–∏–±–∫–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                }
            }
            total_sent += bytes_sent;
        }
        LOG_DEBUG("‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä {}", total_sent, backend_fd);

        // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 —Å–µ–∫—É–Ω–¥)
        timeval timeout{.tv_sec = 5, .tv_usec = 0};
        fd_set read_fds;
        FD_ZERO(&read_fds);
        FD_SET(backend_fd, &read_fds);

        int activity = select(backend_fd + 1, &read_fds, nullptr, nullptr, &timeout);
        if (activity <= 0) {
            LOG_WARN("‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ({} —Å–µ–∫)", timeout.tv_sec);
            return true; // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∂–¥—ë–º –¥–∞–ª—å—à–µ
        }

        // === –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ï–†–í–ï–† ‚Üí –ö–õ–ò–ï–ù–¢ ===
        bytes_read = recv(backend_fd, buffer, sizeof(buffer), 0);
        if (bytes_read > 0) {
            LOG_INFO("üì§ –ü–æ–ª—É—á–µ–Ω—ã {} –±–∞–π—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {}", bytes_read, backend_fd);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            total_sent = 0;
            while (total_sent < bytes_read) {
                ssize_t bytes_sent = send(client_fd, buffer + total_sent, bytes_read - total_sent, 0);
                if (bytes_sent < 0) {
                    if (errno == EAGAIN || errno == EWOULDBLOCK) {
                        // –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
                        LOG_DEBUG("–ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ");
                        return true; // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    } else {
                        LOG_ERROR("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É: {}", strerror(errno));
                        return false; // –û—à–∏–±–∫–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    }
                }
                total_sent += bytes_sent;
            }
            LOG_DEBUG("‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –∫–ª–∏–µ–Ω—Ç—É {}", total_sent, client_fd);
            return true; // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        } else if (bytes_read == 0) {
            // –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            LOG_INFO("üõë –°–µ—Ä–≤–µ—Ä {} –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", backend_fd);
            return false; // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        } else {
            // –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if (errno != EAGAIN && errno != EWOULDBLOCK) {
                LOG_ERROR("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {}", strerror(errno));
                return false; // –û—à–∏–±–∫–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            }
            return true; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }
    } else if (bytes_read == 0) {
        // –ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        LOG_INFO("üõë –ö–ª–∏–µ–Ω—Ç {} –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", client_fd);
        return false; // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    } else {
        // –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            LOG_ERROR("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}", strerror(errno));
            return false; // –û—à–∏–±–∫–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        }
        return true; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
}