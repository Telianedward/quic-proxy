// src/test_client_netherlands.cpp
/**
 * @file test_client_netherlands.cpp
 * @brief –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP/2 –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –†–æ—Å—Å–∏–∏.
 *
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP/2 –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π IP –∏ –ø–æ—Ä—Ç.
 * –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –ª–æ–≥.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#include "logger/logger.h"
#include <iostream>
#include <string>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <fcntl.h> // –î–ª—è fcntl

int main()
{
    try
    {
        // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
        const std::string backend_ip = "10.8.0.11"; // IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ WireGuard
        const int backend_port = 8587;              // –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç)
        const std::string message = "GET / HTTP/2.0\r\nHost: erosj.com\r\nUser-Agent: TestClient/1.0\r\nAccept: */*\r\n\r\n";

        LOG_INFO("üöÄ [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...");
        LOG_INFO("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {}:{}", backend_ip, backend_port);

        // --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ ---
        int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
        if (sock < 0)
        {
            LOG_ERROR("‚ùå [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç: {}", strerror(errno));
            return EXIT_FAILURE;
        }
        LOG_SUCCESS("‚úÖ [–ù–ò–î–ï–†–õ–ê–ù–î–´] –°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: fd={}", sock);

        // // --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) ---
        // int flags = fcntl(sock, F_GETFL, 0);
        // if (flags == -1)
        // {
        //     LOG_WARN("‚ö†Ô∏è [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥–∏ —Å–æ–∫–µ—Ç–∞");
        // }
        // else
        // {
        //     if (fcntl(sock, F_SETFL, flags | O_NONBLOCK) == -1)
        //     {
        //         LOG_WARN("‚ö†Ô∏è [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º");
        //     }
        // }

        // --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É ---
        struct sockaddr_in server_addr{};
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(backend_port);
        if (inet_pton(AF_INET, backend_ip.c_str(), &server_addr.sin_addr) <= 0)
        {
            LOG_ERROR("‚ùå [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å: {}", backend_ip);
            close(sock);
            return EXIT_FAILURE;
        }

        if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        {
            if (errno != EINPROGRESS)
            {
                LOG_ERROR("‚ùå [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {}", strerror(errno));
                close(sock);
                return EXIT_FAILURE;
            }
        }

        LOG_SUCCESS("‚úÖ [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {}:{}", backend_ip, backend_port);

        // --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        ssize_t sent_bytes = send(sock, message.c_str(), message.size(), 0);
        if (sent_bytes < 0)
        {
            LOG_ERROR("‚ùå [–ù–ò–î–ï–†–õ–ê–ù–î–´] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", strerror(errno));
            close(sock);
            return EXIT_FAILURE;
        }

        LOG_SUCCESS("‚úÖ [–ù–ò–î–ï–†–õ–ê–ù–î–´] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: \"{}\" ({} –±–∞–π—Ç)", message, sent_bytes);

        // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
        char buffer[1024];
        ssize_t received_bytes = recv(sock, buffer, sizeof(buffer) - 1, 0);
        if (received_bytes > 0)
        {
            buffer[received_bytes] = '\0'; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–æ–∫—É
            LOG_SUCCESS("‚úÖ [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \"{}\"", buffer);
        }
        else if (received_bytes == 0)
        {
            // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º
            LOG_INFO("‚ÑπÔ∏è [–ù–ò–î–ï–†–õ–ê–ù–î–´] –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
        }
        else
        {
            LOG_ERROR("‚ùå [–ù–ò–î–ï–†–õ–ê–ù–î–´] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {}", strerror(errno));
        }

        // --- –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞ ---
        close(sock);
        LOG_INFO("üõë [–ù–ò–î–ï–†–õ–ê–ù–î–´] –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.");
    }
    catch (const std::exception &e)
    {
        LOG_ERROR("‚ùå [–ù–ò–î–ï–†–õ–ê–ù–î–´] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e.what());
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}