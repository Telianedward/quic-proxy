/**
 * @file server.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—ã—Ö HTTP/1.1 –∑–∞–ø—Ä–æ—Å–æ–≤ (GET, HEAD) –±–µ–∑ TLS.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∫—Å–∏.
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#include "../../include/http1/server.hpp"
#include <cstring>
#include <algorithm>
#include <sstream>
#include <poll.h>

// === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Http1Server ===

Http1Server::Http1Server(int port, const std::string &backend_ip, int backend_port)
    : listen_fd_(-1), port_(port), backend_ip_(backend_ip), backend_port_(backend_port),
      ssl_ctx_(nullptr)
{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenSSL
    SSL_library_init();
    SSL_load_error_strings();
    OpenSSL_add_all_algorithms();

    // –°–æ–∑–¥–∞–Ω–∏–µ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ssl_ctx_ = SSL_CTX_new(TLS_server_method());
    if (!ssl_ctx_)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç");
        return;
    }

    // üü¢ –ù–ê–°–¢–†–û–ô–ö–ò SSL –î–û –ó–ê–ì–†–£–ó–ö–ò –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í
    SSL_CTX_set_options(ssl_ctx_, SSL_OP_ALL | SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3);
    SSL_CTX_set_mode(ssl_ctx_, SSL_MODE_ENABLE_PARTIAL_WRITE | SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);
    SSL_CTX_set_read_ahead(ssl_ctx_, 1);


    // üü¢ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–ï –§–ê–ô–õ–´ –ò–ó /opt/quic-proxy/
    const char *cert_path = "/opt/quic-proxy/fullchain.pem";
    const char *key_path = "/opt/quic-proxy/privkey.pk8";

    // üü° –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í
    if (access(cert_path, R_OK) != 0)
    {
        LOG_ERROR("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", cert_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    if (access(key_path, R_OK) != 0)
    {
        LOG_ERROR("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", key_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞
    if (SSL_CTX_use_certificate_file(ssl_ctx_, cert_path, SSL_FILETYPE_PEM) <= 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    if (SSL_CTX_use_PrivateKey_file(ssl_ctx_, key_path, SSL_FILETYPE_PEM) <= 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (!SSL_CTX_check_private_key(ssl_ctx_))
    {
        LOG_ERROR("‚ùå –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    LOG_INFO("‚úÖ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
}

Http1Server::~Http1Server()
{
    if (ssl_ctx_)
    {
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
            SSL_CTX_set_max_send_fragment(ssl_ctx_, 16384); // 16KB —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
            SSL_CTX_set_read_ahead(ssl_ctx_, 1); // –í–∫–ª—é—á–∏—Ç—å read-ahead
    }
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for (auto &[fd, ssl] : ssl_connections_)
    {
        SSL_free(ssl);
    }
    ssl_connections_.clear();
}
bool Http1Server::run()
{
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(port_);
    if (bind(listen_fd_, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_)
    {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        FD_SET(listen_fd_, &read_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const auto &conn : connections_)
        {
            int client_fd = conn.first;
            const ConnectionInfo &info = conn.second;
            FD_SET(client_fd, &read_fds);
            FD_SET(info.backend_fd, &read_fds);
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        int max_fd = listen_fd_;
        for (const auto &conn : connections_)
        {
            int client_fd = conn.first;
            const ConnectionInfo &info = conn.second;
            max_fd = std::max({max_fd, client_fd, info.backend_fd});
        }

        timeval timeout{.tv_sec = 1, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity < 0 && errno != EINTR)
        {
            LOG_ERROR("–û—à–∏–±–∫–∞ select: {}", strerror(errno));
            continue;
        }

        if (activity > 0)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if (FD_ISSET(listen_fd_, &read_fds))
            {
                handle_new_connection();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
            handle_io_events();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end();)
        {
            if (now - it->second > 30)
            { // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                int client_fd = it->first;
                ::close(client_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}", client_fd);
            }
            else
            {
                ++it;
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto &conn : connections_)
    {
        int client_fd = conn.first;
        const ConnectionInfo &info = conn.second;
        ::close(client_fd);
        ::close(info.backend_fd);
    }
    connections_.clear();

    if (listen_fd_ != -1)
    {
        ::close(listen_fd_);
    }

    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return true;
}
void Http1Server::stop()
{
    running_ = false;
}

bool Http1Server::set_nonblocking(int fd) noexcept
{
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1)
    {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

int Http1Server::connect_to_backend() noexcept
{
    int backend_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (backend_fd < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(backend_fd))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        ::close(backend_fd);
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    backend_addr.sin_port = htons(backend_port_);
    if (inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr) <= 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {}", backend_ip_);
        ::close(backend_fd);
        return -1;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    if (connect(backend_fd, (struct sockaddr *)&backend_addr, sizeof(backend_addr)) < 0)
    {
        if (errno != EINPROGRESS)
        {
            LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        LOG_DEBUG("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", backend_ip_, backend_port_);

        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        fd_set write_fds;
        FD_ZERO(&write_fds);
        FD_SET(backend_fd, &write_fds);

        timeval timeout{.tv_sec = 5, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        int activity = select(backend_fd + 1, nullptr, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            LOG_ERROR("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{} (errno={})", backend_ip_, backend_port_, errno);
            ::close(backend_fd);
            return -1;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        int error = 0;
        socklen_t len = sizeof(error);
        if (getsockopt(backend_fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }

        if (error != 0)
        {
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{}: {}", backend_ip_, backend_port_, strerror(error));
            ::close(backend_fd);
            return -1;
        }

        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", backend_ip_, backend_port_);
    }
    else
    {
        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)", backend_ip_, backend_port_);
    }

    return backend_fd;
}
void Http1Server::handle_new_connection() noexcept
{
    // üü° –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –ê–î–†–ï–°–ê –ö–õ–ò–ï–ù–¢–ê
    struct sockaddr_in client_addr{};
    socklen_t client_len = sizeof(client_addr);

    // üü¢ –ü–†–ò–ï–ú –ù–û–í–û–ì–û –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    int client_fd = accept(listen_fd_, (struct sockaddr *)&client_addr, &client_len);
    if (client_fd < 0)
    {
        if (errno != EAGAIN && errno != EWOULDBLOCK)
        {
            LOG_ERROR("[server.cpp:258] ‚ùå –û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }

    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê
    if (!set_nonblocking(client_fd))
    {
        LOG_ERROR("[server.cpp:267] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // üü§ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–õ–ò–ï–ù–¢–ï
    std::string client_ip_str = inet_ntoa(client_addr.sin_addr);
    uint16_t client_port_num = ntohs(client_addr.sin_port);
    LOG_INFO("[server.cpp:273] üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})",
             client_ip_str, client_port_num, client_fd);

    // üü¢ –û–ë–™–Ø–í–õ–Ø–ï–ú backend_fd –í–ù–ê–ß–ê–õ–ï –ú–ï–¢–û–î–ê
    int backend_fd = -1;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏
    backend_fd = connect_to_backend();
    if (backend_fd == -1)
    {
        LOG_ERROR("[server.cpp:284] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.");
        ::close(client_fd);
        return;
    }

    // üü¢ –°–û–ó–î–ê–ù–ò–ï SSL-–û–ë–™–ï–ö–¢–ê –î–õ–Ø TLS-–®–ò–§–†–û–í–ê–ù–ò–Ø
    SSL *ssl = SSL_new(ssl_ctx_);
    if (!ssl)
    {
        LOG_ERROR("[server.cpp:292] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // üü† –ü–†–ò–í–Ø–ó–ö–ê SSL –ö –°–û–ö–ï–¢–£
    SSL_set_fd(ssl, client_fd);

    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê –î–õ–Ø SSL
    SSL_set_mode(ssl, SSL_MODE_ENABLE_PARTIAL_WRITE | SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);

    // üü¢ –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï –í connections_ –î–ê–ñ–ï –ï–°–õ–ò HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù
    ConnectionInfo info;
    info.backend_fd = backend_fd;
    info.ssl = ssl;
    info.handshake_done = false; // üëà –ü–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω
    connections_[client_fd] = info;

    // üü¢ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¢–ê–ô–ú–ê–£–¢
    timeouts_[client_fd] = time(nullptr);

    LOG_INFO("[server.cpp:308] ‚úÖ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ handshake –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.");

    // üü¢ –ó–ê–ü–£–°–ö–ê–ï–ú TLS HANDSHAKE
    int ssl_accept_result = SSL_accept(ssl);
    if (ssl_accept_result <= 0)
    {
        int ssl_error = SSL_get_error(ssl, ssl_accept_result);
        if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
        {
            LOG_DEBUG("[server.cpp:318] ‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE). –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ connections_ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
            return; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ select()
        }
        else
        {
            LOG_ERROR("[server.cpp:323] ‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
            SSL_free(ssl);
            connections_.erase(client_fd);
            timeouts_.erase(client_fd);
            ::close(client_fd);
            return;
        }
    }

    // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù
    LOG_INFO("[server.cpp:330] ‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})",
             client_ip_str, client_port_num, client_fd);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –ø–æ–º–µ—á–∞–µ–º handshake –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
    info.handshake_done = true;
    connections_[client_fd] = info;

    LOG_INFO("[server.cpp:337] ‚úÖ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})",
             client_ip_str, client_port_num, client_fd);
}
/**
 * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –±—ç–∫–µ–Ω–¥–∞,
 * –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏—Ö —á–µ—Ä–µ–∑ forward_data. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
 *
 * @throws –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è noexcept.
 * @note –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main loop –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ select().
 */
void Http1Server::handle_io_events() noexcept
{
    // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    auto connections_copy = connections_;

    // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–æ–ø–∏–∏
    for (const auto &conn : connections_copy)
    {
        int client_fd = conn.first;               // –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        const ConnectionInfo &info = conn.second; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏

        // üü° –ü–†–û–í–ï–†–ö–ê: –≠–¢–û SSL-–°–û–ï–î–ò–ù–ï–ù–ò–ï?
        bool is_ssl = info.ssl != nullptr;

        // üü† –ï–°–õ–ò HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù ‚Äî –ü–û–ü–´–¢–ö–ê –ó–ê–í–ï–†–®–ò–¢–¨ –ï–ì–û
        // üü† –ï–°–õ–ò HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù ‚Äî –ü–û–ü–´–¢–ö–ê –ó–ê–í–ï–†–®–ò–¢–¨ –ï–ì–û
        if (is_ssl && !info.handshake_done)
        {
            int ssl_accept_result = SSL_accept(info.ssl);
            if (ssl_accept_result <= 0)
            {
                int ssl_error = SSL_get_error(info.ssl, ssl_accept_result);
                if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
                {
                    // üü° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø SSL
                    LOG_DEBUG("üîí SSL state: {}", SSL_state_string_long(info.ssl));

                    // üü¢ –ü–û–ü–´–¢–ö–ê –ü–†–û–ß–ò–¢–ê–¢–¨ ClientHello (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                    char client_hello[8192];
                    int bytes_read = SSL_read(info.ssl, client_hello, sizeof(client_hello));
                    if (bytes_read > 0)
                    {
                        // üü£ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ClientHello
                        LOG_INFO("üìã ClientHello –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}:\n{}", client_fd, std::string(client_hello, bytes_read).substr(0, 512));
                    }
                    else if (bytes_read == 0)
                    {
                        LOG_WARN("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {} –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è handshake", client_fd);
                        SSL_free(info.ssl);
                        connections_.erase(client_fd);
                        ::close(client_fd);
                        continue;
                    }
                    else
                    {
                        int ssl_error_after_read = SSL_get_error(info.ssl, bytes_read);
                        if (ssl_error_after_read != SSL_ERROR_WANT_READ && ssl_error_after_read != SSL_ERROR_WANT_WRITE)
                        {
                            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ClientHello: {}", ERR_error_string(ERR_get_error(), nullptr));
                            SSL_free(info.ssl);
                            connections_.erase(client_fd);
                            ::close(client_fd);
                            continue;
                        }
                    }

                    LOG_DEBUG("‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE)");
                    continue; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                }
                else
                {
                    LOG_ERROR("‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
                    SSL_free(info.ssl);
                    connections_.erase(client_fd);
                    ::close(client_fd);
                    continue;
                }
            }

            // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù
            LOG_INFO("‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {} (fd={})", client_fd, client_fd);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –ø–æ–º–µ—á–∞–µ–º handshake –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
            ConnectionInfo &mutable_info = connections_[client_fd];
            mutable_info.handshake_done = true;
        }

        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        FD_SET(client_fd, &read_fds);
        FD_SET(info.backend_fd, &read_fds);                  // üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º info.backend_fd
        int max_fd = std::max({client_fd, info.backend_fd}); // üëà std::max —Å initializer list
        timeval timeout{.tv_sec = 0, .tv_usec = 1000};       // 1 –º—Å ‚Äî —É—Å–∫–æ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            continue;
        }

       // üü¢ –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –ö–õ–ò–ï–ù–¢–ê –ö –°–ï–†–í–ï–†–£
        if (FD_ISSET(client_fd, &read_fds))
        {
            LOG_INFO("[server.cpp:375] üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {} (fd={})", client_fd, client_fd);
            LOG_DEBUG("[server.cpp:376] üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ forward_data: from_fd={}, to_fd={}", client_fd, info.backend_fd);

            if (info.ssl != nullptr)
            {
                LOG_DEBUG("[server.cpp:379] üîê SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —á—Ç–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SSL");
            }

            bool keep_alive = forward_data(client_fd, info.backend_fd, info.ssl); // üëà –ü–µ—Ä–µ–¥–∞—ë–º ssl

            if (!keep_alive)
            {
                // üü¢ –û–ë–†–ê–ë–û–¢–ö–ê SSL SHUTDOWN –ü–ï–†–ï–î –ó–ê–ö–†–´–¢–ò–ï–ú
                if (is_ssl && info.ssl)
                {
                    // üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–∑–≤–∞–Ω SSL_shutdown()
                    int shutdown_state = SSL_get_shutdown(info.ssl);
                    if (shutdown_state & SSL_RECEIVED_SHUTDOWN)
                    {
                        LOG_DEBUG("üü° –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. SSL_shutdown() –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
                    }
                    else
                    {
                        LOG_DEBUG("üîÑ –í—ã–∑–æ–≤ SSL_shutdown() –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                        int shutdown_result = SSL_shutdown(info.ssl);
                        if (shutdown_result < 0)
                        {
                            LOG_WARN("‚ö†Ô∏è SSL_shutdown() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {}",
                                    ERR_error_string(ERR_get_error(), nullptr));
                        }
                        else
                        {
                            LOG_INFO("‚úÖ SSL_shutdown() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                        }
                    }
                }

                // üü¢ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
                ::close(client_fd);
                ::close(info.backend_fd);

                // üü¢ –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);

                // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SSL-–æ–±—ä–µ–∫—Ç
                if (is_ssl && info.ssl)
                {
                    SSL_free(info.ssl);
                }

                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, info.backend_fd);
            }
            else
            {
                timeouts_[client_fd] = time(nullptr);
            }
        }

        // üü° –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –°–ï–†–í–ï–†–ê –ö –ö–õ–ò–ï–ù–¢–£
        if (FD_ISSET(info.backend_fd, &read_fds))
        {
            LOG_INFO("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {}", info.backend_fd);
            if (!forward_data(info.backend_fd, client_fd, nullptr))
            {
                // üü¢ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º SSL_shutdown()
                if (is_ssl && info.ssl)
                {
                    // üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–∑–≤–∞–Ω SSL_shutdown()
                    int shutdown_state = SSL_get_shutdown(info.ssl);
                    if (shutdown_state & SSL_RECEIVED_SHUTDOWN)
                    {
                        LOG_DEBUG("[server.cpp:575] üü° –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. SSL_shutdown() –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
                    }
                    else
                    {
                        LOG_DEBUG("[server.cpp:578] üîÑ –í—ã–∑–æ–≤ SSL_shutdown() –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                        int shutdown_result = SSL_shutdown(info.ssl);
                        if (shutdown_result < 0)
                        {
                            LOG_WARN("[server.cpp:581] ‚ö†Ô∏è SSL_shutdown() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {}",
                                     ERR_error_string(ERR_get_error(), nullptr));
                        }
                        else
                        {
                            LOG_INFO("[server.cpp:584] ‚úÖ SSL_shutdown() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                        }
                    }
                }

                // üü¢ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
                ::close(client_fd);
                ::close(info.backend_fd);

                // üü¢ –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);

                // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SSL-–æ–±—ä–µ–∫—Ç
                if (is_ssl && info.ssl)
                {
                    SSL_free(info.ssl);
                }

                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, info.backend_fd);
            }
            else
            {
                timeouts_[client_fd] = time(nullptr);
            }
        }
    }
}

SSL* Http1Server::get_ssl_for_fd(int fd) noexcept
{
    for (const auto &conn : connections_)
    {
        if (conn.first == fd)
        {
            return conn.second.ssl;
        }
    }
    return nullptr;
}

/**
 * @brief –ü–µ—Ä–µ–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–æ–∫–µ—Ç–∞–º–∏ (–∫–ª–∏–µ–Ω—Ç ‚Üî –±—ç–∫–µ–Ω–¥) –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TLS.
 *
 * –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–¥–Ω–æ–≥–æ —Å–æ–∫–µ—Ç–∞ (`from_fd`) –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ –¥—Ä—É–≥–æ–π (`to_fd`),
 * –ø—Ä–∏ —ç—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è:
 * - —á–∞—Å—Ç–∏—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É (EAGAIN/EWOULDBLOCK),
 * - –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏,
 * - –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è,
 * - TLS-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ).
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è HTTP/1.1 —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ WireGuard-—Ç—É–Ω–Ω–µ–ª—å.
 * TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥ –≤ –†–æ—Å—Å–∏–∏ –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ HTTP.
 *
 * @param from_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –±—ç–∫–µ–Ω–¥).
 * @param to_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–±—ç–∫–µ–Ω–¥ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç).
 * @param ssl –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ SSL-–æ–±—ä–µ–∫—Ç (nullptr, –µ—Å–ª–∏ –Ω–µ—Ç TLS).
 * @return true –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, false –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
 * @throws –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è noexcept.
 * @warning –ù–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ busy-waiting.
 * @note –ï—Å–ª–∏ `from_fd` —Å–≤—è–∑–∞–Ω —Å SSL-–æ–±—ä–µ–∫—Ç–æ–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SSL_read(). –ò–Ω–∞—á–µ ‚Äî recv().
 */
/**
 * @brief –ü–µ—Ä–µ–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–æ–∫–µ—Ç–∞–º–∏ (–∫–ª–∏–µ–Ω—Ç ‚Üî –±—ç–∫–µ–Ω–¥) –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TLS.
 */
bool Http1Server::forward_data(int from_fd, int to_fd, SSL *ssl) noexcept
{
    LOG_DEBUG("[server.cpp:460] üîÑ –ù–∞—á–∞–ª–æ forward_data(from_fd={}, to_fd={}, ssl={})",
              from_fd, to_fd, ssl ? "true" : "false");

    // üü¢ –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –†–ê–ó–ú–ï–† –ë–£–§–ï–†–ê –î–õ–Ø SSL
    const size_t MAX_SSL_BUFFER = 16384; // 16KB - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è TLS –∑–∞–ø–∏—Å–∏
    char buffer[MAX_SSL_BUFFER];
    bool use_ssl = (ssl != nullptr);

    // üü° –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–•
    ssize_t bytes_read = 0;
    if (use_ssl) {
        // üü¢ –ß–ò–¢–ê–ï–ú –ú–ï–ù–¨–®–ò–ï –ß–ê–ù–ö–ò –î–õ–Ø SSL
        bytes_read = SSL_read(ssl, buffer, sizeof(buffer));
    } else {
        bytes_read = recv(from_fd, buffer, sizeof(buffer), 0);
    }

    if (bytes_read <= 0) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        if (use_ssl) {
            int ssl_error = SSL_get_error(ssl, bytes_read);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE) {
                return true;
            } else if (bytes_read == 0) {
                LOG_INFO("üîö SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º (from_fd={})", from_fd);
                return false;
            }
        } else {
            if (errno == EAGAIN || errno == EWOULDBLOCK) {
                return true;
            } else if (bytes_read == 0) {
                LOG_INFO("üîö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º (from_fd={})", from_fd);
                return false;
            }
        }
        LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: bytes_read={}, use_ssl={}", bytes_read, use_ssl);
        return false;
    }

    LOG_INFO("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç {} (fd={})", bytes_read, use_ssl ? "–∫–ª–∏–µ–Ω—Ç–∞" : "—Å–µ—Ä–≤–µ—Ä–∞", from_fd);

    // üü¢ –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –° –£–ß–Å–¢–û–ú –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô SSL
    SSL *target_ssl = get_ssl_for_fd(to_fd);
    ssize_t total_sent = 0;

    while (total_sent < bytes_read) {
        size_t remaining = static_cast<size_t>(bytes_read - total_sent);

        // üü¢ –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –†–ê–ó–ú–ï–† –ó–ê–ü–ò–°–ò –î–õ–Ø SSL
        size_t chunk_size = remaining;
        if (target_ssl != nullptr) {
            // –î–ª—è SSL –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–µ —á–∞–Ω–∫–∏
            chunk_size = std::min(remaining, static_cast<size_t>(4096)); // 4KB –º–∞–∫—Å–∏–º—É–º –¥–ª—è SSL
        }

        LOG_DEBUG("üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞ {}/{} –±–∞–π—Ç", chunk_size, remaining);

        ssize_t bytes_sent = 0;

        // üü¢ –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø SSL –ü–ï–†–ï–î –ó–ê–ü–ò–°–¨–Æ
        if (target_ssl != nullptr) {
            if (!SSL_is_init_finished(target_ssl)) {
                LOG_ERROR("‚ùå SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏");
                return false;
            }

            // üü¢ –ò–°–ü–û–õ–¨–ó–£–ï–ú SSL_write –° –û–ì–†–ê–ù–ò–ß–ï–ù–ù–´–ú –†–ê–ó–ú–ï–†–û–ú
            bytes_sent = SSL_write(target_ssl, buffer + total_sent, chunk_size);
        } else {
            bytes_sent = send(to_fd, buffer + total_sent, chunk_size, MSG_NOSIGNAL);
        }
        // –í –º–µ—Ç–æ–¥–µ forward_data –ø–æ—Å–ª–µ SSL_write –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        if (target_ssl != nullptr) {
            int pending = SSL_pending(target_ssl);
            if (pending > 0) {
                LOG_DEBUG("üìä SSL_pending: {} –±–∞–π—Ç –≤ –±—É—Ñ–µ—Ä–µ", pending);
            }
        }
        if (bytes_sent <= 0) {
            if (target_ssl != nullptr) {
                int ssl_error = SSL_get_error(target_ssl, bytes_sent);
                if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE) {
                    LOG_WARN("‚è∏Ô∏è SSL_write —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (–æ—Å—Ç–∞–ª–æ—Å—å {}/{} –±–∞–π—Ç)", remaining, bytes_read);

                    // üü¢ –°–û–•–†–ê–ù–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ü–û–í–¢–û–†–ù–û–ô –û–¢–ü–†–ê–í–ö–ò
                    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å pending sends –¥–ª—è SSL
                    return true;
                } else if (ssl_error == SSL_ERROR_SSL) {
                    LOG_ERROR("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ SSL: {}", ERR_error_string(ERR_get_error(), nullptr));
                    return false;
                } else {
                    LOG_ERROR("‚ùå SSL_write –æ—à–∏–±–∫–∞: –∫–æ–¥={}, {}", ssl_error, ERR_error_string(ERR_get_error(), nullptr));
                    return false;
                }
            } else {
                if (errno == EAGAIN || errno == EWOULDBLOCK) {
                    LOG_WARN("‚è∏Ô∏è –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω (–æ—Å—Ç–∞–ª–æ—Å—å {}/{} –±–∞–π—Ç)", remaining, bytes_read);
                    return true;
                } else if (errno == EPIPE || errno == ECONNRESET) {
                    LOG_WARN("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º");
                    return false;
                } else {
                    LOG_ERROR("‚ùå send() –æ—à–∏–±–∫–∞: {} (errno={})", strerror(errno), errno);
                    return false;
                }
            }
        }

        total_sent += bytes_sent;
        LOG_DEBUG("üìà –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç, –≤—Å–µ–≥–æ {}/{}", bytes_sent, total_sent, bytes_read);

        // üü¢ –ö–û–†–û–¢–ö–ê–Ø –ü–ê–£–ó–ê –î–õ–Ø SSL, –ß–¢–û–ë–´ –ò–ó–ë–ï–ñ–ê–¢–¨ –ü–ï–†–ï–ü–û–õ–ù–ï–ù–ò–Ø –ë–£–§–ï–†–û–í
        if (target_ssl != nullptr && bytes_sent > 0) {
            std::this_thread::sleep_for(std::chrono::microseconds(50));
        }
    }

    LOG_SUCCESS("üéâ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –æ—Ç {} –∫ {}", bytes_read, from_fd, to_fd);
    return true;
}