/**
 * @file server.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º epoll.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—ã—Ö HTTP/1.1 –∑–∞–ø—Ä–æ—Å–æ–≤ (GET, HEAD) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TLS.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API OpenSSL 3.0+ –∏ epoll –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞.
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-11-02
 * @version 1.0
 * @license MIT
 */
#include "server.hpp"
#include <cstring>
#include <algorithm>
#include <sstream>
#include <poll.h>

// === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Http1Server ===

Http1Server::Http1Server(int port, const std::string &backend_ip, int backend_port)
    : listen_fd_(-1), port_(port), backend_ip_(backend_ip), backend_port_(backend_port),
      ssl_ctx_(nullptr), epoll_fd_(-1) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenSSL 3.0+
    if (OPENSSL_init_ssl(OPENSSL_INIT_LOAD_CONFIG, nullptr) != 1) {
        LOG_ERROR("[ERROR] [server.cpp:65] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenSSL");
        return;
    }
    LOG_INFO("[INFO] [server.cpp:69] ‚úÖ OpenSSL 3.0+ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    // –°–æ–∑–¥–∞–Ω–∏–µ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ssl_ctx_ = SSL_CTX_new(TLS_server_method());
    if (!ssl_ctx_) {
        LOG_ERROR("[ERROR] [server.cpp:75] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç");
        return;
    }

    // üü¢ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–ï –§–ê–ô–õ–´ –ò–ó /opt/quic-proxy/
    const char *cert_path = "/opt/quic-proxy/fullchain.pem";
    const char *key_path = "/opt/quic-proxy/privkey.pk8";

    // üü° –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í
    if (access(cert_path, R_OK) != 0) {
        LOG_ERROR("[ERROR] [server.cpp:85] ‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", cert_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    if (access(key_path, R_OK) != 0) {
        LOG_ERROR("[ERROR] [server.cpp:90] ‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", key_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞
    if (SSL_CTX_use_certificate_file(ssl_ctx_, cert_path, SSL_FILETYPE_PEM) <= 0) {
        LOG_ERROR("[ERROR] [server.cpp:97] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    if (SSL_CTX_use_PrivateKey_file(ssl_ctx_, key_path, SSL_FILETYPE_PEM) <= 0) {
        LOG_ERROR("[ERROR] [server.cpp:102] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (!SSL_CTX_check_private_key(ssl_ctx_)) {
        LOG_ERROR("[ERROR] [server.cpp:108] ‚ùå –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    LOG_INFO("[INFO] [server.cpp:113] ‚úÖ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
}

Http1Server::~Http1Server() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º epoll
    if (epoll_fd_ != -1) {
        ::close(epoll_fd_);
        epoll_fd_ = -1;
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for (auto &[fd, ssl] : ssl_connections_) {
        SSL_free(ssl);
    }
    ssl_connections_.clear();

    if (ssl_ctx_) {
        SSL_CTX_set_max_send_fragment(ssl_ctx_, 16384); // 16KB —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
        SSL_CTX_set_read_ahead(ssl_ctx_, 1);            // –í–∫–ª—é—á–∏—Ç—å read-ahead
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto &conn : connections_) {
        int client_fd = conn.first;
        const ConnectionInfo &info = conn.second;
        ::close(client_fd);
        ::close(info.backend_fd);
    }
    connections_.clear();
    if (listen_fd_ != -1) {
        ::close(listen_fd_);
    }
    LOG_INFO("[INFO] [server.cpp:146] HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
}

bool Http1Server::run() {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0) {
        LOG_ERROR("[ERROR] [server.cpp:156] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("[ERROR] [server.cpp:163] setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0) {
        LOG_ERROR("[ERROR] [server.cpp:168] setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_)) {
        LOG_ERROR("[ERROR] [server.cpp:175] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(port_);
    if (bind(listen_fd_, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
        LOG_ERROR("[ERROR] [server.cpp:185] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0) {
        LOG_ERROR("[ERROR] [server.cpp:191] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –°–æ–∑–¥–∞–µ–º epoll
    epoll_fd_ = epoll_create1(0);
    if (epoll_fd_ == -1) {
        LOG_ERROR("[ERROR] [server.cpp:198] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å epoll: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º listen_fd –≤ epoll
    if (!add_epoll_event(listen_fd_, EPOLLIN)) {
        LOG_ERROR("[ERROR] [server.cpp:204] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å listen_fd –≤ epoll");
        ::close(listen_fd_);
        ::close(epoll_fd_);
        return false;
    }

    LOG_INFO("[INFO] [server.cpp:209] HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º epoll", port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_.load()) {
        struct epoll_event events[64];
        int nfds = epoll_wait(epoll_fd_, events, 64, 1000); // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞

        if (nfds == -1) {
            if (errno == EINTR) {
                continue; // –ü—Ä–µ—Ä–≤–∞–Ω —Å–∏–≥–Ω–∞–ª–æ–º
            }
            LOG_ERROR("[ERROR] [server.cpp:220] –û—à–∏–±–∫–∞ epoll_wait: {}", strerror(errno));
            continue;
        }

        for (int i = 0; i < nfds; ++i) {
            int fd = events[i].data.fd;
            uint32_t events_mask = events[i].events;

            if (fd == listen_fd_) {
                // –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                handle_new_connection();
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –±—ç–∫–µ–Ω–¥–∞
                handle_io_events(fd, events_mask);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end();) {
            if (now - it->second > 60) { // –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
                int client_fd = it->first;
                ::close(client_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("[INFO] [server.cpp:244] TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}", client_fd);
            } else {
                ++it;
            }
        }
    }

    return true;
}

void Http1Server::stop() {
    running_.store(false);
}

bool Http1Server::set_nonblocking(int fd) noexcept {
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1) {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

int Http1Server::connect_to_backend() noexcept {
    int backend_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (backend_fd < 0) {
        LOG_ERROR("[ERROR] [server.cpp:267] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(backend_fd)) {
        LOG_ERROR("[ERROR] [server.cpp:273] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        ::close(backend_fd);
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    backend_addr.sin_port = htons(backend_port_);
    if (inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr) <= 0) {
        LOG_ERROR("[ERROR] [server.cpp:282] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {}", backend_ip_);
        ::close(backend_fd);
        return -1;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    if (connect(backend_fd, (struct sockaddr *)&backend_addr, sizeof(backend_addr)) < 0) {
        if (errno != EINPROGRESS) {
            LOG_ERROR("[ERROR] [server.cpp:290] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        LOG_DEBUG("[DEBUG] [server.cpp:294] ‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", backend_ip_, backend_port_);

        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        fd_set write_fds;
        FD_ZERO(&write_fds);
        FD_SET(backend_fd, &write_fds);
        timeval timeout{.tv_sec = 5, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        int activity = select(backend_fd + 1, nullptr, &write_fds, nullptr, &timeout);
        if (activity <= 0) {
            LOG_ERROR("[ERROR] [server.cpp:302] ‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{} (errno={})", backend_ip_, backend_port_, errno);
            ::close(backend_fd);
            return -1;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        int error = 0;
        socklen_t len = sizeof(error);
        if (getsockopt(backend_fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0) {
            LOG_ERROR("[ERROR] [server.cpp:310] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        if (error != 0) {
            LOG_ERROR("[ERROR] [server.cpp:315] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{}: {}", backend_ip_, backend_port_, strerror(error));
            ::close(backend_fd);
            return -1;
        }
        LOG_INFO("[INFO] [server.cpp:319] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", backend_ip_, backend_port_);
    } else {
        LOG_INFO("[INFO] [server.cpp:322] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)", backend_ip_, backend_port_);
    }
    return backend_fd;
}

void Http1Server::handle_new_connection() noexcept {
    // üü° –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –ê–î–†–ï–°–ê –ö–õ–ò–ï–ù–¢–ê
    struct sockaddr_in client_addr{};
    socklen_t client_len = sizeof(client_addr);
    // üü¢ –ü–†–ò–ï–ú –ù–û–í–û–ì–û –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    int client_fd = accept(listen_fd_, (struct sockaddr *)&client_addr, &client_len);
    if (client_fd < 0) {
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            LOG_ERROR("[ERROR] [server.cpp:337] ‚ùå –û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }

    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê
    if (!set_nonblocking(client_fd)) {
        LOG_ERROR("[ERROR] [server.cpp:343] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // üü§ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–õ–ò–ï–ù–¢–ï
    std::string client_ip_str = inet_ntoa(client_addr.sin_addr);
    uint16_t client_port_num = ntohs(client_addr.sin_port);
    LOG_INFO("[INFO] [server.cpp:350] üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);

    // üü¢ –û–ë–™–Ø–í–õ–Ø–ï–ú backend_fd –í–ù–ê–ß–ê–õ–ï –ú–ï–¢–û–î–ê
    int backend_fd = -1;
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏
    backend_fd = connect_to_backend();
    if (backend_fd == -1) {
        LOG_ERROR("[ERROR] [server.cpp:357] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.");
        ::close(client_fd);
        return;
    }

    // üü¢ –°–û–ó–î–ê–ù–ò–ï SSL-–û–ë–™–ï–ö–¢–ê –î–õ–Ø TLS-–®–ò–§–†–û–í–ê–ù–ò–Ø
    SSL *ssl = SSL_new(ssl_ctx_);
    if (!ssl) {
        LOG_ERROR("[ERROR] [server.cpp:364] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // üü† –ü–†–ò–í–Ø–ó–ö–ê SSL –ö –°–û–ö–ï–¢–£
    SSL_set_fd(ssl, client_fd);

    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê –î–õ–Ø SSL
    SSL_set_mode(ssl, SSL_MODE_ENABLE_PARTIAL_WRITE | SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);

    // üü¢ –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï –í connections_ –î–ê–ñ–ï –ï–°–õ–ò HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù
    ConnectionInfo info;
    info.backend_fd = backend_fd;
    info.ssl = ssl;
    info.handshake_done = false; // üëà –ü–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω
    connections_[client_fd] = info;

    // üü¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú chunked_complete_ –î–õ–Ø –ù–û–í–û–ì–û –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    chunked_complete_[client_fd] = false;

    // üü¢ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¢–ê–ô–ú–ê–£–¢
    timeouts_[client_fd] = time(nullptr);

    // üü¢ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú client_fd –í epoll
    if (!add_epoll_event(client_fd, EPOLLIN)) {
        LOG_ERROR("[ERROR] [server.cpp:387] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å client_fd –≤ epoll");
        SSL_free(ssl);
        connections_.erase(client_fd);
        timeouts_.erase(client_fd);
        ::close(client_fd);
        return;
    }

    // üü¢ –ó–ê–ü–£–°–ö–ê–ï–ú TLS HANDSHAKE
    int ssl_accept_result = SSL_accept(ssl);
    if (ssl_accept_result <= 0) {
        int ssl_error = SSL_get_error(ssl, ssl_accept_result);
        if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE) {
            LOG_DEBUG("[DEBUG] [server.cpp:397] ‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE). –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ connections_ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
            return; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ epoll
        } else {
            LOG_ERROR("[ERROR] [server.cpp:401] ‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
            SSL_free(ssl);
            connections_.erase(client_fd);
            timeouts_.erase(client_fd);
            ::close(client_fd);
            return;
        }
    }

    // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù
    LOG_INFO("[INFO] [server.cpp:409] ‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –ø–æ–º–µ—á–∞–µ–º handshake –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
    info.handshake_done = true;
    connections_[client_fd] = info;
    LOG_INFO("[INFO] [server.cpp:414] ‚úÖ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);
}

void Http1Server::handle_io_events(int fd, uint32_t events_mask) noexcept {
    auto it = connections_.find(fd);
    if (it == connections_.end()) {
        LOG_WARN("[WARN] [server.cpp:423] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π fd={} –≤ connections_", fd);
        return;
    }

    int client_fd = it->first;
    ConnectionInfo &info = it->second;

    // üü° –ü–†–û–í–ï–†–ö–ê: –≠–¢–û SSL-–°–û–ï–î–ò–ù–ï–ù–ò–ï?
    bool is_ssl = info.ssl != nullptr;

    // üü† –ï–°–õ–ò HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù ‚Äî –ü–û–ü–´–¢–ö–ê –ó–ê–í–ï–†–®–ò–¢–¨ –ï–ì–û
    if (is_ssl && !info.handshake_done) {
        int ssl_accept_result = SSL_accept(info.ssl);
        if (ssl_accept_result <= 0) {
            int ssl_error = SSL_get_error(info.ssl, ssl_accept_result);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE) {
                // üü° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø SSL
                LOG_DEBUG("[DEBUG] [server.cpp:439] üîí SSL state: {}", SSL_state_string_long(info.ssl));
                // üü¢ –ü–û–ü–´–¢–ö–ê –ü–†–û–ß–ò–¢–ê–¢–¨ ClientHello (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                char client_hello[8192];
                int bytes_read = SSL_read(info.ssl, client_hello, sizeof(client_hello));
                if (bytes_read > 0) {
                    // üü£ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ClientHello
                    LOG_INFO("[INFO] [server.cpp:445] üìã ClientHello –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}:\n{}", client_fd, std::string(client_hello, bytes_read).substr(0, 512));
                } else if (bytes_read == 0) {
                    LOG_WARN("[WARN] [server.cpp:449] ‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {} –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è handshake", client_fd);
                    SSL_free(info.ssl);
                    connections_.erase(client_fd);
                    ::close(client_fd);
                    remove_epoll_event(client_fd);
                    return;
                } else {
                    int ssl_error_after_read = SSL_get_error(info.ssl, bytes_read);
                    if (ssl_error_after_read != SSL_ERROR_WANT_READ && ssl_error_after_read != SSL_ERROR_WANT_WRITE) {
                        LOG_ERROR("[ERROR] [server.cpp:456] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ClientHello: {}", ERR_error_string(ERR_get_error(), nullptr));
                        SSL_free(info.ssl);
                        connections_.erase(client_fd);
                        ::close(client_fd);
                        remove_epoll_event(client_fd);
                        return;
                    }
                }
                LOG_DEBUG("[DEBUG] [server.cpp:462] ‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE)");
                return; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            } else {
                LOG_ERROR("[ERROR] [server.cpp:467] ‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
                SSL_free(info.ssl);
                connections_.erase(client_fd);
                ::close(client_fd);
                remove_epoll_event(client_fd);
                return;
            }
        }
        // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù
        LOG_INFO("[INFO] [server.cpp:475] ‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {} (fd={})", client_fd, client_fd);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –ø–æ–º–µ—á–∞–µ–º handshake –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
        info.handshake_done = true;
    }

    // üü¢ –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –ö–õ–ò–ï–ù–¢–ê –ö –°–ï–†–í–ï–†–£
    if (events_mask & EPOLLIN) {
        LOG_INFO("[INFO] [server.cpp:484] üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {} (fd={})", client_fd, client_fd);
        LOG_DEBUG("[DEBUG] [server.cpp:485] üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ forward_data: from_fd={}, to_fd={}", client_fd, info.backend_fd);

        // üü¢ –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–ó–ê–í–ï–†–®–Å–ù–ù–´–ï –û–¢–ü–†–ê–í–ö–ò –î–õ–Ø –ë–≠–ö–ï–ù–î–ê
        if (!pending_sends_.empty() && pending_sends_.find(info.backend_fd) != pending_sends_.end() && !pending_sends_[info.backend_fd].empty()) {
            auto &pending_queue = pending_sends_[info.backend_fd];
            while (!pending_queue.empty()) {
                auto &pending = pending_queue.front();
                if (pending.fd != info.backend_fd) {
                    pending_queue.pop();
                    continue;
                }
                ssize_t bytes_sent = send(pending.fd, pending.data.get() + pending.sent, pending.len - pending.sent, MSG_NOSIGNAL);
                if (bytes_sent <= 0) {
                    if (errno == EAGAIN || errno == EWOULDBLOCK) {
                        LOG_WARN("[WARN] [server.cpp:500] ‚è∏Ô∏è –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω");
                        break; // –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏
                    } else {
                        LOG_ERROR("[ERROR] [server.cpp:504] ‚ùå send() –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –±—ç–∫–µ–Ω–¥: {}", strerror(errno));
                        pending_queue.pop();
                        break;
                    }
                }
                pending.sent += bytes_sent;
                LOG_DEBUG("[DEBUG] [server.cpp:510] üìà –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥, –≤—Å–µ–≥–æ {}/{}", bytes_sent, pending.sent, pending.len);
                if (pending.sent >= pending.len) {
                    pending_queue.pop(); // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å—é –ø–æ—Ä—Ü–∏—é
                } else {
                    break; // –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                }
            }
        }

        // üü¢ –¢–ï–ü–ï–†–¨ –ß–ò–¢–ê–ï–ú –ù–û–í–´–ï –î–ê–ù–ù–´–ï –û–¢ –ö–õ–ò–ï–ù–¢–ê
        bool keep_alive = forward_data(client_fd, info.backend_fd, info.ssl); // üëà –ü–µ—Ä–µ–¥–∞—ë–º ssl
        if (!keep_alive) {
            // üü¢ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º SSL_shutdown()
            if (SSL_is_init_finished(info.ssl)) {
                LOG_DEBUG("[DEBUG] [server.cpp:526] üîÑ –ù–∞—á–∞–ª–æ SSL_shutdown() –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                int shutdown_result = SSL_shutdown(info.ssl);
                if (shutdown_result == 1) {
                    // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    LOG_INFO("[INFO] [server.cpp:530] ‚úÖ SSL_shutdown() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω (–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                } else if (shutdown_result == 0) {
                    // –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤
                    LOG_DEBUG("[DEBUG] [server.cpp:534] ‚è∏Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ SSL_shutdown() –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                    int second_shutdown = SSL_shutdown(info.ssl);
                    if (second_shutdown == 1) {
                        LOG_INFO("[INFO] [server.cpp:538] ‚úÖ SSL_shutdown() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω (–≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                    } else {
                        LOG_WARN("[WARN] [server.cpp:541] ‚ö†Ô∏è –í—Ç–æ—Ä–æ–π SSL_shutdown() –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}: {}", client_fd, ERR_error_string(ERR_get_error(), nullptr));
                    }
                } else {
                    // –û—à–∏–±–∫–∞
                    int shutdown_error = SSL_get_error(info.ssl, shutdown_result);
                    LOG_ERROR("[ERROR] [server.cpp:547] ‚ùå SSL_shutdown() –æ—à–∏–±–∫–∞: {} (–∫–æ–¥={})", ERR_error_string(shutdown_error, nullptr), shutdown_error);
                }
            } else {
                LOG_DEBUG("[DEBUG] [server.cpp:552] ‚è∏Ô∏è SSL –Ω–µ –≥–æ—Ç–æ–≤ –∫ shutdown - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            }
            // üü¢ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
            ::close(client_fd);
            ::close(info.backend_fd);
            // üü¢ –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç
            connections_.erase(client_fd);
            timeouts_.erase(client_fd);
            // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SSL-–æ–±—ä–µ–∫—Ç
            if (is_ssl && info.ssl) {
                SSL_free(info.ssl);
            }
            remove_epoll_event(client_fd);
            LOG_INFO("[INFO] [server.cpp:564] TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, info.backend_fd);
        } else {
            timeouts_[client_fd] = time(nullptr);
        }
    }

    // üü¢ –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –ë–≠–ö–ï–ù–î–ê –ö –ö–õ–ò–ï–ù–¢–£
    if (events_mask & EPOLLIN) {
        LOG_INFO("[INFO] [server.cpp:573] üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {}", info.backend_fd);
        // üî¥ –ü–†–û–í–ï–†–ö–ê: –ó–ê–í–ï–†–®–Å–ù –õ–ò HANDSHAKE?
        if (info.ssl != nullptr && !info.handshake_done) {
            LOG_WARN("[WARN] [server.cpp:577] ‚ùó –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É, –ø–æ–∫–∞ handshake –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é, –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è handshake
        }
        // üü¢ –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ
        bool keep_alive = forward_data(info.backend_fd, client_fd, nullptr); // üëà –ü–µ—Ä–µ–¥–∞—ë–º nullptr, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –Ω–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è
        if (!keep_alive) {
            // üü¢ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º SSL_shutdown()
            if (is_ssl && info.ssl) {
                // üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–∑–≤–∞–Ω SSL_shutdown()
                int shutdown_state = SSL_get_shutdown(info.ssl);
                if (shutdown_state & SSL_RECEIVED_SHUTDOWN) {
                    LOG_DEBUG("[DEBUG] [server.cpp:590] üü° –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. SSL_shutdown() –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
                } else {
                    LOG_DEBUG("[DEBUG] [server.cpp:593] üîÑ –í—ã–∑–æ–≤ SSL_shutdown() –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                    int shutdown_result = SSL_shutdown(info.ssl);
                    if (shutdown_result < 0) {
                        LOG_WARN("[WARN] [server.cpp:597] ‚ö†Ô∏è SSL_shutdown() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {}", ERR_error_string(ERR_get_error(), nullptr));
                    } else {
                        LOG_INFO("[INFO] [server.cpp:600] ‚úÖ SSL_shutdown() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                    }
                }
            }
            // üü¢ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
            ::close(client_fd);
            ::close(info.backend_fd);
            // üü¢ –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç
            connections_.erase(client_fd);
            timeouts_.erase(client_fd);
            // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SSL-–æ–±—ä–µ–∫—Ç
            if (is_ssl && info.ssl) {
                SSL_free(info.ssl);
            }
            remove_epoll_event(client_fd);
            LOG_INFO("[INFO] [server.cpp:612] TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, info.backend_fd);
        } else {
            // üü¢ –ü–†–û–í–ï–†–Ø–ï–ú, –ó–ê–í–ï–†–®–ï–ù –õ–ò –ß–ê–ù–ö
            if (chunked_complete_.find(client_fd) != chunked_complete_.end()) {
                if (chunked_complete_[client_fd]) {
                    // üü¢ –ß–∞–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚Äî –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    LOG_INFO("[INFO] [server.cpp:620] ‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                    ::close(client_fd);
                    ::close(info.backend_fd);
                    connections_.erase(client_fd);
                    timeouts_.erase(client_fd);
                    if (is_ssl && info.ssl) {
                        SSL_free(info.ssl);
                    }
                    remove_epoll_event(client_fd);
                    LOG_INFO("[INFO] [server.cpp:627] TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, info.backend_fd);
                } else {
                    // üü° –ß–∞–Ω–∫–∏ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                    timeouts_[client_fd] = time(nullptr);
                }
            } else {
                // üü° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                timeouts_[client_fd] = time(nullptr);
            }
        }
    }
}

SSL *Http1Server::get_ssl_for_fd(int fd) noexcept {
    for (const auto &conn : connections_) {
        if (conn.first == fd) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SSL-–æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (conn.second.ssl != nullptr) {
                return conn.second.ssl;
            } else {
                LOG_WARN("[WARN] [server.cpp:648] ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω fd={}, –Ω–æ SSL-–æ–±—ä–µ–∫—Ç —Ä–∞–≤–µ–Ω nullptr", fd);
                return nullptr;
            }
        }
    }
    return nullptr;
}

bool Http1Server::forward_data(int from_fd, int to_fd, SSL *ssl) noexcept {
    LOG_DEBUG("[DEBUG] [server.cpp:657] üîÑ –ù–∞—á–∞–ª–æ forward_data(from_fd={}, to_fd={}, ssl={})", from_fd, to_fd, ssl ? "true" : "false");

    // üü° –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–•
    char buffer[8192];
    bool use_ssl = (ssl != nullptr);
    ssize_t bytes_read = 0;

    if (use_ssl) {
        LOG_INFO("[INFO] [server.cpp:665] [READ] üîê –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ SSL –∏–∑ fd={}", from_fd);
        bytes_read = SSL_read(ssl, buffer, sizeof(buffer));
        if (bytes_read < 0) {
            int ssl_error = SSL_get_error(ssl, bytes_read);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE) {
                LOG_WARN("[WARN] [server.cpp:671] [READ] ‚è≥ SSL_ERROR_WANT_READ/WRITE ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∑–∂–µ");
                return true;
            } else if (ssl_error == SSL_ERROR_ZERO_RETURN) {
                LOG_INFO("[INFO] [server.cpp:675] [READ] ‚úÖ –ö–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (SSL_ERROR_ZERO_RETURN)");
                return false;
            } else {
                LOG_ERROR("[ERROR] [server.cpp:679] [READ] ‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ SSL: {}", ERR_error_string(ERR_get_error(), nullptr));
                return false;
            }
        } else if (bytes_read == 0) {
            LOG_WARN("[WARN] [server.cpp:684] [READ] ‚ö†Ô∏è SSL_read –≤–µ—Ä–Ω—É–ª 0 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.");
            return false;
        } else {
            LOG_INFO("[INFO] [server.cpp:688] [READ] ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {} –±–∞–π—Ç —á–µ—Ä–µ–∑ SSL", bytes_read);
        }
    } else {
        LOG_INFO("[INFO] [server.cpp:692] [READ] üì• –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ recv –∏–∑ fd={}", from_fd);
        bytes_read = recv(from_fd, buffer, sizeof(buffer), 0);
        if (bytes_read < 0) {
            if (errno == EAGAIN || errno == EWOULDBLOCK) {
                LOG_WARN("[WARN] [server.cpp:697] [READ] ‚è≥ recv() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî –±—É—Ñ–µ—Ä –ø—É—Å—Ç");
                return true;
            } else {
                LOG_ERROR("[ERROR] [server.cpp:701] [READ] ‚ùå recv –æ—à–∏–±–∫–∞: {} (errno={})", strerror(errno), errno);
                return false;
            }
        } else if (bytes_read == 0) {
            LOG_WARN("[WARN] [server.cpp:706] [READ] ‚ö†Ô∏è recv –≤–µ—Ä–Ω—É–ª 0 ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.");
            return false;
        } else {
            LOG_INFO("[INFO] [server.cpp:710] [READ] ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {} –±–∞–π—Ç —á–µ—Ä–µ–∑ recv", bytes_read);
        }
    }

    if (bytes_read <= 0) {
        LOG_DEBUG("[DEBUG] [server.cpp:715] [READ] üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
        if (use_ssl) {
            int ssl_error = SSL_get_error(ssl, bytes_read);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE) {
                LOG_WARN("[WARN] [server.cpp:720] [READ] ‚è≥ SSL_ERROR_WANT_READ/WRITE ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∑–∂–µ");
                return true;
            } else {
                LOG_ERROR("[ERROR] [server.cpp:724] [READ] ‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ SSL: {}", ERR_error_string(ERR_get_error(), nullptr));
                return false;
            }
        } else {
            if (errno == EAGAIN || errno == EWOULDBLOCK) {
                LOG_WARN("[WARN] [server.cpp:729] [READ] ‚è≥ recv() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî –±—É—Ñ–µ—Ä –ø—É—Å—Ç");
                return true;
            } else {
                LOG_ERROR("[ERROR] [server.cpp:733] [READ] ‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ recv(): {}", strerror(errno));
                return false;
            }
        }
    }

    LOG_INFO("[INFO] [server.cpp:738] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç {} (fd={})", bytes_read, use_ssl ? "–∫–ª–∏–µ–Ω—Ç–∞" : "—Å–µ—Ä–≤–µ—Ä–∞", from_fd);

    // üü¢ –ü–†–û–°–¢–ê–Ø –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –ë–ï–ó CHUNKED PROCESSING
    SSL *target_ssl = get_ssl_for_fd(to_fd);
    LOG_DEBUG("[DEBUG] [server.cpp:743] [WRITE] üéØ –¶–µ–ª–µ–≤–æ–π fd={} –∏–º–µ–µ—Ç SSL? {}", to_fd, target_ssl ? "–¥–∞" : "–Ω–µ—Ç");

    // üü¢ –ü–†–û–í–ï–†–ö–ê: –ï–°–¢–¨ –õ–ò –ù–ï–ó–ê–í–ï–†–®–Å–ù–ù–´–ï –û–¢–ü–†–ê–í–ö–ò?
    if (!pending_sends_.empty() && pending_sends_.find(to_fd) != pending_sends_.end() && !pending_sends_[to_fd].empty()) {
        LOG_INFO("[INFO] [server.cpp:748] [PENDING] üïí –ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è fd={}", to_fd);
        auto &pending_queue = pending_sends_[to_fd];
        while (!pending_queue.empty()) {
            auto &pending = pending_queue.front();
            if (pending.fd != to_fd) {
                LOG_WARN("[WARN] [server.cpp:753] [PENDING] üóëÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π fd –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç");
                pending_queue.pop();
                continue;
            }
            // üü† –ü–û–ü–´–¢–ö–ê –û–¢–ü–†–ê–í–ò–¢–¨ –û–°–¢–ê–í–®–ò–ï–°–Ø –î–ê–ù–ù–´–ï
            LOG_DEBUG("[DEBUG] [server.cpp:758] [PENDING] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {} –±–∞–π—Ç –∏–∑ {} (—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {})", pending.len - pending.sent, pending.len, pending.sent);
            ssize_t bytes_sent = 0;
            if (target_ssl != nullptr) {
                LOG_INFO("[INFO] [server.cpp:762] [PENDING] üîê SSL_write –¥–ª—è fd={}", to_fd);
                bytes_sent = SSL_write(target_ssl, pending.data.get() + pending.sent, pending.len - pending.sent);
            } else {
                LOG_INFO("[INFO] [server.cpp:766] [PENDING] üì§ send() –¥–ª—è fd={}", to_fd);
                bytes_sent = send(to_fd, pending.data.get() + pending.sent, pending.len - pending.sent, MSG_NOSIGNAL);
            }
            if (bytes_sent <= 0) {
                if (target_ssl != nullptr) {
                    int ssl_error = SSL_get_error(target_ssl, bytes_sent);
                    if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE) {
                        LOG_WARN("[WARN] [server.cpp:773] [PENDING] ‚è≥ SSL_write —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏");
                        return true; // –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏
                    } else {
                        LOG_ERROR("[ERROR] [server.cpp:777] [PENDING] ‚ùå SSL_write —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {}", ERR_error_string(ERR_get_error(), nullptr));
                        pending_queue.pop(); // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ
                        return false;
                    }
                } else {
                    if (errno == EAGAIN || errno == EWOULDBLOCK) {
                        LOG_WARN("[WARN] [server.cpp:783] [PENDING] ‚è≥ send() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî –±—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω");
                        return true;
                    } else {
                        LOG_ERROR("[ERROR] [server.cpp:787] [PENDING] ‚ùå send() —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {}", strerror(errno));
                        pending_queue.pop();
                        return false;
                    }
                }
            }
            pending.sent += static_cast<size_t>(bytes_sent);
            LOG_DEBUG("[DEBUG] [server.cpp:793] [PENDING] üìà –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç, –≤—Å–µ–≥–æ {}/{}", bytes_sent, pending.sent, pending.len);
            if (pending.sent >= pending.len) {
                LOG_SUCCESS("[SUCCESS] [server.cpp:796] ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Ä—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ({} –±–∞–π—Ç)", pending.len);
                pending_queue.pop(); // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å—é –ø–æ—Ä—Ü–∏—é
            } else {
                LOG_INFO("[INFO] [server.cpp:800] [PENDING] üì• –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {} –±–∞–π—Ç", pending.len - pending.sent);
                return true; // –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
        }
    }

    // üü¢ –ó–ê–ü–ò–°–¨ –ù–û–í–´–• –î–ê–ù–ù–´–•
    LOG_INFO("[INFO] [server.cpp:806] [NEW] üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {} –±–∞–π—Ç –Ω–∞ fd={}", bytes_read, to_fd);
    PendingSend new_send;
    new_send.fd = to_fd;
    new_send.len = static_cast<size_t>(bytes_read);
    new_send.sent = 0;
    new_send.data = std::make_unique<char[]>(new_send.len);
    std::memcpy(new_send.data.get(), buffer, new_send.len);

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É
    LOG_INFO("[INFO] [server.cpp:815] [NEW] üì§ –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ {} –±–∞–π—Ç –Ω–∞ fd={}", new_send.len, to_fd);
    ssize_t bytes_sent = 0;
    if (target_ssl != nullptr) {
        LOG_INFO("[INFO] [server.cpp:819] [NEW] üîê SSL_write –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –Ω–∞ fd={}", to_fd);
        bytes_sent = SSL_write(target_ssl, new_send.data.get(), new_send.len);
    } else {
        LOG_INFO("[INFO] [server.cpp:823] [NEW] üì§ send() –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –Ω–∞ fd={}", to_fd);
        bytes_sent = send(to_fd, new_send.data.get(), new_send.len, MSG_NOSIGNAL);
    }

    if (bytes_sent <= 0) {
        if (target_ssl != nullptr) {
            int ssl_error = SSL_get_error(target_ssl, bytes_sent);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE) {
                LOG_WARN("[WARN] [server.cpp:830] [NEW] ‚è≥ SSL_write —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å");
                pending_sends_[to_fd].push(std::move(new_send));
                return true;
            } else {
                LOG_ERROR("[ERROR] [server.cpp:834] [NEW] ‚ùå SSL_write —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {}", ERR_error_string(ERR_get_error(), nullptr));
                return false;
            }
        } else {
            if (errno == EAGAIN || errno == EWOULDBLOCK) {
                LOG_WARN("[WARN] [server.cpp:839] [NEW] ‚è≥ send() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî –±—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω");
                pending_sends_[to_fd].push(std::move(new_send));
                return true;
            } else {
                LOG_ERROR("[ERROR] [server.cpp:843] [NEW] ‚ùå send() —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {}", strerror(errno));
                return false;
            }
        }
    }

    // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å—ë —Å—Ä–∞–∑—É
    LOG_SUCCESS("[SUCCESS] [server.cpp:848] üéâ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –æ—Ç {} –∫ {}", bytes_read, from_fd, to_fd);
    LOG_DEBUG("[DEBUG] [server.cpp:849] üîÑ –ö–æ–Ω–µ—Ü forward_data ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º");
    return true;
}

bool Http1Server::add_epoll_event(int fd, uint32_t events) noexcept {
    struct epoll_event ev;
    ev.events = events;
    ev.data.fd = fd;
    if (epoll_ctl(epoll_fd_, EPOLL_CTL_ADD, fd, &ev) == -1) {
        LOG_ERROR("[ERROR] [server.cpp:859] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å fd={} –≤ epoll: {}", fd, strerror(errno));
        return false;
    }
    return true;
}

bool Http1Server::remove_epoll_event(int fd) noexcept {
    if (epoll_ctl(epoll_fd_, EPOLL_CTL_DEL, fd, nullptr) == -1) {
        LOG_ERROR("[ERROR] [server.cpp:866] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å fd={} –∏–∑ epoll: {}", fd, strerror(errno));
        return false;
    }
    return true;
}