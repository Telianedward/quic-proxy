/**
 * @file server.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—ã—Ö HTTP/1.1 –∑–∞–ø—Ä–æ—Å–æ–≤ (GET, HEAD) –±–µ–∑ TLS.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∫—Å–∏.
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#include "../../include/http1/server.hpp"
#include <cstring>
#include <algorithm>
#include <sstream>
#include <poll.h>

// === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Http1Server ===

Http1Server::Http1Server(int port, const std::string &backend_ip, int backend_port)
    : listen_fd_(-1), port_(port), backend_ip_(backend_ip), backend_port_(backend_port),
      ssl_ctx_(nullptr)
{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenSSL
    SSL_library_init();
    SSL_load_error_strings();
    OpenSSL_add_all_algorithms();

    // –°–æ–∑–¥–∞–Ω–∏–µ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ssl_ctx_ = SSL_CTX_new(TLS_server_method());
    if (!ssl_ctx_)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç");
        return;
    }

    // üü¢ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–ï –§–ê–ô–õ–´ –ò–ó /opt/quic-proxy/
    const char *cert_path = "/opt/quic-proxy/fullchain.pem";
    const char *key_path = "/opt/quic-proxy/privkey.pk8";

    // üü° –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í
    if (access(cert_path, R_OK) != 0)
    {
        LOG_ERROR("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", cert_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    if (access(key_path, R_OK) != 0)
    {
        LOG_ERROR("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", key_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞
    if (SSL_CTX_use_certificate_file(ssl_ctx_, cert_path, SSL_FILETYPE_PEM) <= 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    if (SSL_CTX_use_PrivateKey_file(ssl_ctx_, key_path, SSL_FILETYPE_PEM) <= 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (!SSL_CTX_check_private_key(ssl_ctx_))
    {
        LOG_ERROR("‚ùå –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }

    LOG_INFO("‚úÖ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
}

Http1Server::~Http1Server()
{
    if (ssl_ctx_)
    {
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
    }
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for (auto &[fd, ssl] : ssl_connections_)
    {
        SSL_free(ssl);
    }
    ssl_connections_.clear();
}
bool Http1Server::run()
{
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(port_);
    if (bind(listen_fd_, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_)
    {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        FD_SET(listen_fd_, &read_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const auto &[client_fd, backend_fd] : connections_)
        {
            FD_SET(client_fd, &read_fds);
            FD_SET(backend_fd, &read_fds);
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        int max_fd = listen_fd_;
        for (const auto &[client_fd, backend_fd] : connections_)
        {
            max_fd = std::max({max_fd, client_fd, backend_fd});
        }

        timeval timeout{.tv_sec = 1, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity < 0 && errno != EINTR)
        {
            LOG_ERROR("–û—à–∏–±–∫–∞ select: {}", strerror(errno));
            continue;
        }

        if (activity > 0)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if (FD_ISSET(listen_fd_, &read_fds))
            {
                handle_new_connection();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
            handle_io_events();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end();)
        {
            if (now - it->second > 30)
            { // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                int client_fd = it->first;
                ::close(client_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}", client_fd);
            }
            else
            {
                ++it;
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto &[client_fd, backend_fd] : connections_)
    {
        ::close(client_fd);
        ::close(backend_fd);
    }
    connections_.clear();

    if (listen_fd_ != -1)
    {
        ::close(listen_fd_);
    }

    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return true;
}

void Http1Server::stop()
{
    running_ = false;
}

bool Http1Server::set_nonblocking(int fd) noexcept
{
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1)
    {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

int Http1Server::connect_to_backend() noexcept
{
    int backend_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (backend_fd < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(backend_fd))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        ::close(backend_fd);
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    backend_addr.sin_port = htons(backend_port_);
    if (inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr) <= 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {}", backend_ip_);
        ::close(backend_fd);
        return -1;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    if (connect(backend_fd, (struct sockaddr *)&backend_addr, sizeof(backend_addr)) < 0)
    {
        if (errno != EINPROGRESS)
        {
            LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        LOG_DEBUG("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", backend_ip_, backend_port_);

        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        fd_set write_fds;
        FD_ZERO(&write_fds);
        FD_SET(backend_fd, &write_fds);

        timeval timeout{.tv_sec = 5, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        int activity = select(backend_fd + 1, nullptr, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            LOG_ERROR("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{} (errno={})", backend_ip_, backend_port_, errno);
            ::close(backend_fd);
            return -1;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        int error = 0;
        socklen_t len = sizeof(error);
        if (getsockopt(backend_fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }

        if (error != 0)
        {
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{}: {}", backend_ip_, backend_port_, strerror(error));
            ::close(backend_fd);
            return -1;
        }

        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", backend_ip_, backend_port_);
    }
    else
    {
        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)", backend_ip_, backend_port_);
    }

    return backend_fd;
}
void Http1Server::handle_new_connection() noexcept
{
    // üü° –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –ê–î–†–ï–°–ê –ö–õ–ò–ï–ù–¢–ê
    /**
     * @brief –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –∏ –ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
     * @details –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤—ã–∑–æ–≤–µ accept() –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—Å—è –∫–ª–∏–µ–Ω—Ç–µ.
     *          –ü–æ–ª—è:
     *          - sin_family: AF_INET (IPv4)
     *          - sin_addr: IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
     *          - sin_port: –ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Å–µ—Ç–µ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –±–∞–π—Ç)
     */
    struct sockaddr_in client_addr{};

    // üü† –†–ê–ó–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ –ê–î–†–ï–°–ê
    /**
     * @brief –†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã client_addr.
     * @details –ü–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ accept() –∫–∞–∫ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     */
    socklen_t client_len = sizeof(client_addr);

    // üü¢ –ü–†–ò–ï–ú –ù–û–í–û–ì–û –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    /**
     * @brief –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
     * @details –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π accept() –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
     *          –ï—Å–ª–∏ < 0 ‚Äî –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (errno —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏).
     *          –û—à–∏–±–∫–∏ EAGAIN / EWOULDBLOCK ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
     */
    int client_fd = accept(listen_fd_, (struct sockaddr *)&client_addr, &client_len);
    if (client_fd < 0)
    {
        // üü• –û–ë–†–ê–ë–û–¢–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö accept()
        /**
         * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç EAGAIN/EWOULDBLOCK.
         * @details –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç —Å–µ—Ä—å—ë–∑–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π),
         *          –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
         */
        if (errno != EAGAIN && errno != EWOULDBLOCK)
        {
            LOG_ERROR("–û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }

    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê
    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
     * @details –ë–µ–∑ —ç—Ç–æ–≥–æ select() –∏ recv()/send() –±—É–¥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞.
     *          –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî —Å–æ–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.
     * @return true –µ—Å–ª–∏ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    if (!set_nonblocking(client_fd))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // üü§ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–õ–ò–ï–ù–¢–ï
    /**
     * @brief –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "192.168.1.1").
     * @details –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∏–∑ –¥–≤–æ–∏—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (client_addr.sin_addr) —Å –ø–æ–º–æ—â—å—é inet_ntoa().
     */
    std::string client_ip_str = inet_ntoa(client_addr.sin_addr);

    /**
     * @brief –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ö–æ—Å—Ç–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –±–∞–π—Ç).
     * @details –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –±–∞–π—Ç (client_addr.sin_port) —Å –ø–æ–º–æ—â—å—é ntohs().
     */
    uint16_t client_port_num = ntohs(client_addr.sin_port);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äî –∫–ª—é—á–µ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    LOG_INFO("üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);

        // üü¢ –û–ë–™–Ø–í–õ–Ø–ï–ú backend_fd –í–ù–ê–ß–ê–õ–ï –ú–ï–¢–û–î–ê
    int backend_fd = -1;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏
    backend_fd = connect_to_backend();
    if (backend_fd == -1)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.");
        ::close(client_fd);
        return; // ‚ùó –í–ê–ñ–ù–û: –ù–ï –î–û–ë–ê–í–õ–Ø–¢–¨ –í connections_!
    }

    // üü¢ –°–û–ó–î–ê–ù–ò–ï SSL-–û–ë–™–ï–ö–¢–ê –î–õ–Ø TLS-–®–ò–§–†–û–í–ê–ù–ò–Ø
    /**
     * @brief SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º.
     * @details –°–æ–∑–¥–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ accept(). –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ client_fd.
     *          –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
     */
    SSL *ssl = SSL_new(ssl_ctx_);
    if (!ssl)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // üü† –ü–†–ò–í–Ø–ó–ö–ê SSL –ö –°–û–ö–ï–¢–£
    /**
     * @brief –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç SSL-–æ–±—ä–µ–∫—Ç –∫ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—É —Å–æ–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
     * @details –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ SSL_read/SSL_write.
     */
    SSL_set_fd(ssl, client_fd);

    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê –î–õ–Ø SSL
    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ SSL.
     * @details SSL_MODE_ENABLE_PARTIAL_WRITE ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç —á–∞—Å—Ç–∏—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É.
     *          SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –∑–∞–ø–∏—Å–∏.
     */
    SSL_set_mode(ssl, SSL_MODE_ENABLE_PARTIAL_WRITE | SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);

    // üü¢ –ó–ê–ü–£–°–ö–ê–ï–ú TLS HANDSHAKE
    /**
     * @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç TLS handshake –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
     * @details SSL_accept() ‚Äî —Ñ—É–Ω–∫—Ü–∏—è OpenSSL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
     *          –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
     *          - 1: handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.
     *          - 0: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.
     *          - <0: –æ—à–∏–±–∫–∞ (SSL_get_error() –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É).
     * @note –í –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å SSL_ERROR_WANT_READ/WRITE ‚Äî –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.
     */
    int ssl_accept_result = SSL_accept(ssl);
    if (ssl_accept_result <= 0)
    {
        int ssl_error = SSL_get_error(ssl, ssl_accept_result);
        if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
        {
            LOG_DEBUG("‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE)");
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL-–æ–±—ä–µ–∫—Ç, –Ω–æ –Ω–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π ‚Äî –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤ handle_io_events
            ssl_connections_[client_fd] = ssl;
            // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ connections_ ‚Äî –ø–æ–∫–∞ handshake –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω
            return;
        }
        else
        {
            LOG_ERROR("‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
            SSL_free(ssl);
            ::close(client_fd);
            return;
        }
    }

    // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù
    LOG_INFO("‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL-–æ–±—ä–µ–∫—Ç
    ssl_connections_[client_fd] = ssl;

    // üü¢ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ê–†–´ –°–û–ï–î–ò–ù–ï–ù–ò–ô
    /**
     * @brief –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: client_fd ‚Üí backend_fd.
     * @details –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º.
     *          –ö–ª—é—á ‚Äî –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –±—ç–∫–µ–Ω–¥–∞.
     */
    connections_[client_fd] = backend_fd;

    /**
     * @brief –ö–∞—Ä—Ç–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤: client_fd ‚Üí –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
     * @details –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥).
     */
    timeouts_[client_fd] = time(nullptr); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç

    LOG_INFO("‚úÖ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);
}

/**
 * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –±—ç–∫–µ–Ω–¥–∞,
 * –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏—Ö —á–µ—Ä–µ–∑ forward_data. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
 *
 * @throws –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è noexcept.
 * @note –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main loop –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ select().
 */
void Http1Server::handle_io_events() noexcept
{
    // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    auto connections_copy = connections_;

    // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–æ–ø–∏–∏
    for (const auto &conn : connections_copy)
    {
        int client_fd = conn.first;      // –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        int backend_fd = conn.second;    // –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –±—ç–∫–µ–Ω–¥–∞

        // üü° –ü–†–û–í–ï–†–ö–ê: –≠–¢–û SSL-–°–û–ï–î–ò–ù–ï–ù–ò–ï?
        bool is_ssl = ssl_connections_.find(client_fd) != ssl_connections_.end();

        // üü† –ï–°–õ–ò –°–û–ï–î–ò–ù–ï–ù–ò–ï –ù–ï –ì–û–¢–û–í–û –ö –ü–ï–†–ï–î–ê–ß–ï –î–ê–ù–ù–´–• (HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù)
        if (is_ssl && connections_.find(client_fd) == connections_.end())
        {
            // üü¢ –ü–û–ü–´–¢–ö–ê –ó–ê–í–ï–†–®–ò–¢–¨ HANDSHAKE
            SSL* ssl = ssl_connections_[client_fd];
            int ssl_accept_result = SSL_accept(ssl);
            if (ssl_accept_result <= 0)
            {
                int ssl_error = SSL_get_error(ssl, ssl_accept_result);
                if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
                {
                    LOG_DEBUG("‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE)");
                    continue; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                }
                else
                {
                    LOG_ERROR("‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
                    SSL_free(ssl);
                    ssl_connections_.erase(client_fd);
                    ::close(client_fd);
                    continue;
                }
            }

            // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù ‚Äî –î–û–ë–ê–í–õ–Ø–ï–ú –í connections_
            connections_[client_fd] = backend_fd;
            timeouts_[client_fd] = time(nullptr);
            LOG_INFO("‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {} (fd={})", client_fd, client_fd);
        }

        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        FD_SET(client_fd, &read_fds);
        FD_SET(backend_fd, &read_fds);
        int max_fd = std::max(client_fd, backend_fd);
        timeval timeout{.tv_sec = 0, .tv_usec = 1000}; // 1 –º—Å ‚Äî —É—Å–∫–æ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            continue;
        }

        // üü¢ –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –ö–õ–ò–ï–ù–¢–ê –ö –°–ï–†–í–ï–†–£
        if (FD_ISSET(client_fd, &read_fds))
        {
            LOG_INFO("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
            LOG_DEBUG("üîÑ –í—ã–∑–æ–≤ forward_data(client_fd={}, backend_fd={})", client_fd, backend_fd);

            bool keep_alive = forward_data(client_fd, backend_fd);

            if (!keep_alive)
            {
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                if (is_ssl)
                {
                    SSL_free(ssl_connections_[client_fd]);
                    ssl_connections_.erase(client_fd);
                }
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            }
            else
            {
                timeouts_[client_fd] = time(nullptr);
            }
        }

        // üü° –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –°–ï–†–í–ï–†–ê –ö –ö–õ–ò–ï–ù–¢–£
        if (FD_ISSET(backend_fd, &read_fds))
        {
            LOG_INFO("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {}", backend_fd);
            if (!forward_data(backend_fd, client_fd))
            {
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                if (is_ssl)
                {
                    SSL_free(ssl_connections_[client_fd]);
                    ssl_connections_.erase(client_fd);
                }
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            }
            else
            {
                timeouts_[client_fd] = time(nullptr);
            }
        }
    }

    // üü¢ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô, –ö–û–¢–û–†–´–ï –ï–©–Å –ù–ï –í connections_, –ù–û –£–ñ–ï –í ssl_connections_
    // –≠—Ç–æ —Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö handshake –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    for (const auto &[client_fd, ssl] : ssl_connections_)
    {
        // üü° –ü–†–û–í–ï–†–ö–ê: –≠–¢–û –°–û–ï–î–ò–ù–ï–ù–ò–ï –£–ñ–ï –í connections_? ‚Äî –µ—Å–ª–∏ –¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (connections_.find(client_fd) != connections_.end())
            continue;

        // üü† –ü–†–û–í–ï–†–ö–ê: –ï–°–¢–¨ –õ–ò –î–ê–ù–ù–´–ï –î–õ–Ø –ß–¢–ï–ù–ò–Ø?
        fd_set read_fds;
        FD_ZERO(&read_fds);
        FD_SET(client_fd, &read_fds);
        int max_fd = client_fd;
        timeval timeout{.tv_sec = 0, .tv_usec = 1000}; // 1 –º—Å
        int activity = select(max_fd + 1, &read_fds, nullptr, nullptr, &timeout);
        if (activity <= 0)
        {
            continue;
        }

        // üü¢ –ü–û–ü–´–¢–ö–ê –ó–ê–í–ï–†–®–ò–¢–¨ HANDSHAKE
        int ssl_accept_result = SSL_accept(ssl);
        if (ssl_accept_result <= 0)
        {
            int ssl_error = SSL_get_error(ssl, ssl_accept_result);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
            {
                LOG_DEBUG("‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE)");
                continue; // –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            }
            else
            {
                LOG_ERROR("‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));
                SSL_free(ssl);
                ssl_connections_.erase(client_fd);
                ::close(client_fd);
                continue;
            }
        }

        // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù ‚Äî –î–û–ë–ê–í–õ–Ø–ï–ú –í connections_
        // –ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å backend_fd ‚Äî –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ connections_? –ù–µ—Ç.
        // –ü–æ—ç—Ç–æ–º—É ‚Äî –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å backend_fd –≥–¥–µ-—Ç–æ –µ—â—ë.

        // ‚ùó –ü–†–û–ë–õ–ï–ú–ê: –ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ connections_ –±–µ–∑ backend_fd.
        // –†–ï–®–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è—Ç—å backend_fd –≤–º–µ—Å—Ç–µ —Å SSL-–æ–±—ä–µ–∫—Ç–æ–º.

        // –î–ª—è —ç—Ç–æ–≥–æ ‚Äî –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –≤–º–µ—Å—Ç–æ std::unordered_map<int, SSL*> ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ struct.
        // –ù–æ –ø–æ–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ.
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ ‚Äî –¥–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ª–æ–≥–∏–∫–µ.

        // üõë –í—Ä–µ–º–µ–Ω–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.
        LOG_INFO("‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {} (fd={})", client_fd, client_fd);
    }
}

/**
 * @brief –ü–µ—Ä–µ–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–æ–∫–µ—Ç–∞–º–∏ (–∫–ª–∏–µ–Ω—Ç ‚Üî –±—ç–∫–µ–Ω–¥) –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TLS.
 *
 * –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–¥–Ω–æ–≥–æ —Å–æ–∫–µ—Ç–∞ (`from_fd`) –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ –¥—Ä—É–≥–æ–π (`to_fd`),
 * –ø—Ä–∏ —ç—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è:
 * - —á–∞—Å—Ç–∏—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É (EAGAIN/EWOULDBLOCK),
 * - –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏,
 * - –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è,
 * - TLS-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ).
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è HTTP/1.1 —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ WireGuard-—Ç—É–Ω–Ω–µ–ª—å.
 * TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥ –≤ –†–æ—Å—Å–∏–∏ –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ HTTP.
 *
 * @param from_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –±—ç–∫–µ–Ω–¥).
 * @param to_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–±—ç–∫–µ–Ω–¥ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç).
 * @return true –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, false –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
 * @throws –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è noexcept.
 * @warning –ù–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ busy-waiting.
 * @note –ï—Å–ª–∏ `from_fd` —Å–≤—è–∑–∞–Ω —Å SSL-–æ–±—ä–µ–∫—Ç–æ–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SSL_read(). –ò–Ω–∞—á–µ ‚Äî recv().
 */
bool Http1Server::forward_data(int from_fd, int to_fd) noexcept
{
    // üü¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ê –í –§–£–ù–ö–¶–ò–Æ
    LOG_DEBUG("üîÑ –ù–∞—á–∞–ª–æ forward_data(from_fd={}, to_fd={})", from_fd, to_fd);

    // üü° –ë–£–§–ï–† –î–õ–Ø –ü–†–ò–Å–ú–ê –î–ê–ù–ù–´–•
    /**
     * @brief –ë—É—Ñ–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∫–µ—Ç–∞.
     * @details –í—ã–¥–µ–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å—Ç–µ–∫–µ ‚Äî 8 –ö–ë (8192 –±–∞–π—Ç–∞).
     * –†–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–ª—è TCP-–ø—Ä–æ–∫—Å–∏: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞,
     * –Ω–µ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è —Å—Ç–µ–∫–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
     * –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è TCP-–±—É—Ñ–µ—Ä–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏.
     */
    char buffer[8192];
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.
    LOG_DEBUG("üì¶ –ë—É—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω: —Ä–∞–∑–º–µ—Ä {} –±–∞–π—Ç", sizeof(buffer));

    // üü† –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø: SSL –ò–õ–ò –ù–ï–¢
    /**
     * @brief –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ TLS-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ.
     * @details true ‚Äî –µ—Å–ª–∏ `from_fd` –µ—Å—Ç—å –≤ –∫–∞—Ä—Ç–µ `ssl_connections_` (—Ç–æ –µ—Å—Ç—å —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ).
     *          false ‚Äî –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –±—ç–∫–µ–Ω–¥–æ–º).
     */
    bool use_ssl = ssl_connections_.find(from_fd) != ssl_connections_.end();
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî –≤–∞–∂–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    LOG_DEBUG("üîí use_ssl = {}", use_ssl ? "true" : "false");

    // üü£ –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–ß–ò–¢–ê–ù–ù–´–• –ë–ê–ô–¢
    /**
     * @brief –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç, —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∫–µ—Ç–∞ `from_fd`.
     * @details –ó–Ω–∞—á–µ–Ω–∏—è:
     *          - >0: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–∞–π—Ç.
     *          - 0: —É–¥–∞–ª—ë–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞–∫—Ä—ã–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
     *          - -1: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è (errno —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏).
     * @note –î–ª—è TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π SSL_read(), –¥–ª—è TCP ‚Äî recv().
     */
    ssize_t bytes_read = 0;

    // üü§ –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• –°–û –°–û–ö–ï–¢–ê –ò–°–¢–û–ß–ù–ò–ö–ê (–° –£–ß–Å–¢–û–ú TLS)
    if (use_ssl)
    {
        // üü¢ –ß–¢–ï–ù–ò–ï –ß–ï–†–ï–ó SSL
        /**
         * @brief –ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenSSL.
         * @details SSL_read() ‚Äî —Ñ—É–Ω–∫—Ü–∏—è OpenSSL –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
         *          –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
         *            - ssl_connections_[from_fd]: —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ SSL-–æ–±—ä–µ–∫—Ç.
         *            - buffer: –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.
         *            - sizeof(buffer): –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á—Ç–µ–Ω–∏—è.
         * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–∞–π—Ç, –∏–ª–∏ <=0 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
         * @note SSL_read() –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å SSL_ERROR_WANT_READ/WRITE ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
         */
        bytes_read = SSL_read(ssl_connections_[from_fd], buffer, sizeof(buffer));
        if (bytes_read <= 0)
        {
            // üü• –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö SSL_READ
            /**
             * @brief –ö–æ–¥ –æ—à–∏–±–∫–∏ SSL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π SSL_get_error().
             * @details –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ SSL_read().
             *          –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
             *          - SSL_ERROR_WANT_READ: –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á—Ç–µ–Ω–∏—è.
             *          - SSL_ERROR_WANT_WRITE: –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø–∏—Å–∏.
             *          - –î—Ä—É–≥–∏–µ –∫–æ–¥—ã ‚Äî –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).
             */
            int ssl_error = SSL_get_error(ssl_connections_[from_fd], bytes_read);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
            {
                // üü® –ù–û–†–ú–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ‚Äî –ü–û–í–¢–û–†–ò–¢–¨ –ü–û–ü–´–¢–ö–£
                LOG_DEBUG("‚è∏Ô∏è SSL_read() —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE)");
                return true;
            }
            else
            {
                // üü• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚Äî –ó–ê–ö–†–´–¢–¨ –°–û–ï–î–ò–ù–ï–ù–ò–ï
                LOG_ERROR("‚ùå SSL_read() –æ—à–∏–±–∫–∞: {}", ERR_error_string(ERR_get_error(), nullptr));
                return false;
            }
        }
    }
    else
    {
        // üü° –ß–¢–ï–ù–ò–ï –ß–ï–†–ï–ó TCP (–ë–ï–ó SSL)
        /**
         * @brief –ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
         * @details recv() ‚Äî —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∫–µ—Ç–∞.
         *          –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
         *            - from_fd: –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞, –æ—Ç–∫—É–¥–∞ —á–∏—Ç–∞–µ–º.
         *            - buffer: —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.
         *            - sizeof(buffer): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è.
         *            - 0: —Ñ–ª–∞–≥–∏ ‚Äî –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π.
         * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–∞–π—Ç, –∏–ª–∏ -1 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
         * @note EAGAIN/EWOULDBLOCK ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
         */
        bytes_read = recv(from_fd, buffer, sizeof(buffer), 0);
        if (bytes_read < 0 && errno != EAGAIN && errno != EWOULDBLOCK)
        {
            // üü• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚Äî –ó–ê–ö–†–´–¢–¨ –°–û–ï–î–ò–ù–ï–ù–ò–ï
            LOG_ERROR("‚ùå recv() –æ—à–∏–±–∫–∞: {}", strerror(errno));
            return false;
        }
    }

    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ß–¢–ï–ù–ò–Ø (bytes_read > 0)
    if (bytes_read > 0)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        LOG_INFO("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (from_fd={})", bytes_read, from_fd);

        // üü£ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–í–û–ì–û HTTP-–ó–ê–ü–†–û–°–ê (–¢–û–õ–¨–ö–û –ï–°–õ–ò –≠–¢–û –ö–õ–ò–ï–ù–¢ –ò TLS)
        /**
         * @brief –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ).
         * @details –¢–æ–ª—å–∫–æ –µ—Å–ª–∏:
         *          - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SSL (use_ssl == true),
         *          - –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî –∫–ª–∏–µ–Ω—Ç (from_fd ‚Äî —ç—Ç–æ client_fd).
         *          –í—ã–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–≤—ã–µ 512 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ.
         * @note –î–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—Ç—å, —á—Ç–æ `from_fd` ‚Äî —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç. –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ ‚Äî —Å–º. –Ω–∏–∂–µ.
         */
        if (use_ssl)
        {
            // ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ from_fd –∫–ª–∏–µ–Ω—Ç–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
            // –ù–æ –µ—Å–ª–∏ –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤—ã–∑–æ–≤–∞), –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ.
            // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ use_ssl == true.
            std::string request_str(buffer, static_cast<size_t>(bytes_read));
            for (char &c : request_str)
            {
                if (c < 32 && c != '\n' && c != '\r' && c != '\t')
                    c = '?';
            }
            LOG_INFO("üìã –ü–µ—Ä–≤—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{}", request_str.substr(0, 512));
        }

        // üü§ –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ù–ê –°–û–ö–ï–¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
        /**
         * @brief –°—á—ë—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–π—Ç, —É–∂–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–æ–∫–µ—Ç `to_fd`.
         * @details –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω—É–ª—ë–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.
         *          –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ send() –∏–ª–∏ SSL_write().
         */
        ssize_t total_sent = 0;
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        LOG_DEBUG("üìå total_sent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {}", total_sent);

        // üü§ –¶–ò–ö–õ –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–• (–ü–û–ö–ê –ù–ï –í–°–ï –ë–ê–ô–¢–´ –û–¢–ü–†–ê–í–õ–ï–ù–´)
        while (total_sent < bytes_read)
        {
            // üü† –†–ê–°–ß–Å–¢ –û–°–¢–ê–í–®–ò–•–°–Ø –ë–ê–ô–¢ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò
            /**
             * @brief –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞.
             * @details –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–±—â–∏–º –æ–±—ä—ë–º–æ–º –¥–∞–Ω–Ω—ã—Ö (`bytes_read`)
             *          –∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º (`total_sent`). –ü—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ size_t –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å send().
             */
            size_t remaining = static_cast<size_t>(bytes_read - total_sent);
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –æ–±—ä—ë–º ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è.
            LOG_DEBUG("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {} –±–∞–π—Ç (total_sent={}, bytes_read={})", remaining, total_sent, bytes_read);

            // üü¢ –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ù–ê –°–û–ö–ï–¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
            /**
             * @brief –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–æ–∫–µ—Ç `to_fd` –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤.
             * @details –ó–Ω–∞—á–µ–Ω–∏—è:
             *          - >0: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–π—Ç.
             *          - 0: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (—Ä–µ–¥–∫–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ).
             *          - -1: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (errno —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏).
             * @note –î–ª—è –±—ç–∫–µ–Ω–¥–∞ (to_fd) –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π send(), —Ç–∞–∫ –∫–∞–∫ –±—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ HTTP (–±–µ–∑ TLS).
             */
            ssize_t bytes_sent = 0;

            // ‚ùó –í–ê–ñ–ù–û: –ú—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SSL –Ω–∞ –±—ç–∫–µ–Ω–¥ ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç ‚Üí —Å–µ—Ä–≤–µ—Ä.
            // –î–ª—è –±—ç–∫–µ–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π send().
            bytes_sent = send(to_fd, buffer + total_sent, remaining, 0);

            // üü° –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ô –û–¢–ü–†–ê–í–ö–ò (bytes_sent > 0)
            if (bytes_sent > 0)
            {
                /**
                 * @brief –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                 * @details –°–æ–∑–¥–∞—ë—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ.
                 *          –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ '?', —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –≤—ã–≤–æ–¥ –ª–æ–≥–∞.
                 */
                std::string sent_chunk(buffer + total_sent, static_cast<size_t>(bytes_sent));
                for (char &c : sent_chunk)
                {
                    if (c < 32 && c != '\n' && c != '\r' && c != '\t')
                        c = '?';
                }
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 256 –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
                LOG_DEBUG("üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ {} –±–∞–π—Ç):\n{}",
                          std::min<size_t>(256, sent_chunk.size()),
                          sent_chunk.substr(0, std::min<size_t>(256, sent_chunk.size())));
            }

            // üü• –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –û–¢–ü–†–ê–í–ö–ò (bytes_sent < 0)
            if (bytes_sent < 0)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ.
                LOG_ERROR("‚ùå send() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: errno={} ({})", errno, strerror(errno));

                // üü® –ü–†–û–í–ï–†–ö–ê –ù–ê EAGAIN / EWOULDBLOCK
                /**
                 * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ EAGAIN / EWOULDBLOCK –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.
                 * @details –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –±—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —è–¥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
                 *          –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
                 */
                if (errno == EAGAIN || errno == EWOULDBLOCK)
                {
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –Ω–µ –æ—à–∏–±–∫–∞, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                    LOG_WARN("‚è∏Ô∏è –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {}/{} –±–∞–π—Ç", total_sent, bytes_read);
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.
                    return true;
                }
                else
                {
                    // üü• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚Äî –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).
                    /**
                     * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.
                     * @details –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞—Ç–∞)
                     *          —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
                     */
                    LOG_ERROR("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {}", strerror(errno));
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
                    return false;
                }
            }

            // üü¢ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–Å–¢–ß–ò–ö–ê –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–• –ë–ê–ô–¢
            total_sent += bytes_sent;
            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏.
            LOG_DEBUG("üìà total_sent –æ–±–Ω–æ–≤–ª—ë–Ω: {} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç)", total_sent, bytes_sent);

            // üü° –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò 0 –ë–ê–ô–¢
            /**
             * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ send() –≤–µ—Ä–Ω—É–ª 0.
             * @details –≠—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å –≤ TCP, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞ ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
             *          –î–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞.
             */
            if (bytes_sent == 0)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                LOG_WARN("‚ö†Ô∏è send() –≤–µ—Ä–Ω—É–ª 0 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
                // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ ‚Äî –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞.
                break;
            }
        }

        // üü¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û–ô –ü–ï–†–ï–î–ê–ß–ò –í–°–ï–• –î–ê–ù–ù–´–•
        LOG_SUCCESS("üéâ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –æ—Ç {} –∫ {}", bytes_read, from_fd, to_fd);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.
        return true;
    }
    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø (bytes_read == 0)
    else if (bytes_read == 0)
    {
        /**
         * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π.
         * @details recv() –∏–ª–∏ SSL_read() –≤–µ—Ä–Ω—É–ª–∏ 0 ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –±—ç–∫–µ–Ω–¥ –∑–∞–∫—Ä—ã–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
         *          –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã.
         */
        LOG_INFO("üîö –ö–ª–∏–µ–Ω—Ç (from_fd={}) –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", from_fd);
        return false;
    }
    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –ß–¢–ï–ù–ò–Ø (bytes_read < 0)
    else
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á—Ç–µ–Ω–∏—è ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        LOG_DEBUG("‚è∏Ô∏è recv() –∏–ª–∏ SSL_read() –≤–µ—Ä–Ω—É–ª -1");
        return true;
    }
}