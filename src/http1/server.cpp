/**
 * @file server.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—ã—Ö HTTP/1.1 –∑–∞–ø—Ä–æ—Å–æ–≤ (GET, HEAD) –±–µ–∑ TLS.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∫—Å–∏.
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#include "../../include/http1/server.hpp"
#include <cstring>
#include <algorithm>
#include <sstream>
#include <poll.h>

// === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Http1Server ===

Http1Server::Http1Server(int port, const std::string &backend_ip, int backend_port)
    : listen_fd_(-1), port_(port), backend_ip_(backend_ip), backend_port_(backend_port),
      ssl_ctx_(nullptr)
{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenSSL
    SSL_library_init();
    SSL_load_error_strings();
    OpenSSL_add_all_algorithms();
    // –°–æ–∑–¥–∞–Ω–∏–µ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ssl_ctx_ = SSL_CTX_new(TLS_server_method());
    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ SSL_CTX_new()
    SSL_CTX_set_min_proto_version(ssl_ctx_, TLS1_VERSION); // –ú–∏–Ω–∏–º—É–º TLS 1.0
    SSL_CTX_set_max_proto_version(ssl_ctx_, TLS1_3_VERSION); // –ú–∞–∫—Å–∏–º—É–º TLS 1.3
    if (!ssl_ctx_)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç");
        return;
    }
    // üü¢ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–ï –§–ê–ô–õ–´ –ò–ó /opt/quic-proxy/
    const char *cert_path = "/opt/quic-proxy/fullchain.pem";
    const char *key_path = "/opt/quic-proxy/privkey.pk8";
    // üü° –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í
    if (access(cert_path, R_OK) != 0)
    {
        LOG_ERROR("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", cert_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    if (access(key_path, R_OK) != 0)
    {
        LOG_ERROR("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", key_path);
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞
    if (SSL_CTX_use_certificate_file(ssl_ctx_, cert_path, SSL_FILETYPE_PEM) <= 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    if (SSL_CTX_use_PrivateKey_file(ssl_ctx_, key_path, SSL_FILETYPE_PEM) <= 0)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {}", ERR_error_string(ERR_get_error(), nullptr));
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (!SSL_CTX_check_private_key(ssl_ctx_))
    {
        LOG_ERROR("‚ùå –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
        return;
    }
    LOG_INFO("‚úÖ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
}

Http1Server::~Http1Server()
{
    if (ssl_ctx_)
    {
        SSL_CTX_set_max_send_fragment(ssl_ctx_, 16384); // 16KB —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
        SSL_CTX_set_read_ahead(ssl_ctx_, 1);            // –í–∫–ª—é—á–∏—Ç—å read-ahead
        SSL_CTX_free(ssl_ctx_);
        ssl_ctx_ = nullptr;
    }
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for (auto &[fd, ssl] : ssl_connections_)
    {
        SSL_free(ssl);
    }
    ssl_connections_.clear();
}

bool Http1Server::run()
{
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(port_);
    if (bind(listen_fd_, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_)
    {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        FD_SET(listen_fd_, &read_fds);
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const auto &conn : connections_)
        {
            int client_fd = conn.first;
            const ConnectionInfo &info = conn.second;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã
            if (client_fd >= 0 && info.backend_fd >= 0)
            {
                FD_SET(client_fd, &read_fds);
                FD_SET(info.backend_fd, &read_fds);
            }
            else
            {
                LOG_WARN("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –≤ connections_: client_fd={}, backend_fd={}", client_fd, info.backend_fd);
            }
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        int max_fd = listen_fd_;
        LOG_DEBUG("üîç –¢–µ–∫—É—â–∏–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã: listen_fd={}, max_fd={}", listen_fd_, max_fd);
        for (const auto &conn : connections_)
        {
            int client_fd = conn.first;
            const ConnectionInfo &info = conn.second;
            LOG_DEBUG("   ‚û§ client_fd={}, backend_fd={}", client_fd, info.backend_fd);
        }

        timeval timeout{.tv_sec = 1, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
        // üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ EINTR –¥–ª—è select
        int activity;
        do {
            activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        } while (activity < 0 && errno == EINTR);

        if (activity < 0) {
            LOG_ERROR("–û—à–∏–±–∫–∞ select: {}", strerror(errno));
            continue;
        }

        if (activity > 0)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if (FD_ISSET(listen_fd_, &read_fds))
            {
                handle_new_connection();
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
            handle_io_events();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end();)
        {
            if (now - it->second > 60) // üëà –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
            {
                int client_fd = it->first;
                ::close(client_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}", client_fd);
            }
            else
            {
                ++it;
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto &conn : connections_)
    {
        int client_fd = conn.first;
        const ConnectionInfo &info = conn.second;
        ::close(client_fd);
        ::close(info.backend_fd);
    }
    connections_.clear();
    if (listen_fd_ != -1)
    {
        ::close(listen_fd_);
    }
    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return true;
}

void Http1Server::stop()
{
    running_ = false;
}

bool Http1Server::set_nonblocking(int fd) noexcept
{
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1)
    {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

int Http1Server::connect_to_backend() noexcept
{
    int backend_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (backend_fd < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
        return -1;
    }
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(backend_fd))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        ::close(backend_fd);
        return -1;
    }
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    backend_addr.sin_port = htons(backend_port_);
    if (inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr) <= 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {}", backend_ip_);
        ::close(backend_fd);
        return -1;
    }
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    if (connect(backend_fd, (struct sockaddr *)&backend_addr, sizeof(backend_addr)) < 0)
    {
        if (errno != EINPROGRESS)
        {
            LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        LOG_DEBUG("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", backend_ip_, backend_port_);
        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        fd_set write_fds;
        FD_ZERO(&write_fds);
        FD_SET(backend_fd, &write_fds);
        timeval timeout{.tv_sec = 5, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        int activity = select(backend_fd + 1, nullptr, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            LOG_ERROR("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{} (errno={})", backend_ip_, backend_port_, errno);
            ::close(backend_fd);
            return -1;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        int error = 0;
        socklen_t len = sizeof(error);
        if (getsockopt(backend_fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        if (error != 0)
        {
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{}: {}", backend_ip_, backend_port_, strerror(error));
            ::close(backend_fd);
            return -1;
        }
        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", backend_ip_, backend_port_);
    }
    else
    {
        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)", backend_ip_, backend_port_);
    }
    return backend_fd;
}

void Http1Server::handle_new_connection() noexcept
{
    // üü° –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –ê–î–†–ï–°–ê –ö–õ–ò–ï–ù–¢–ê
    struct sockaddr_in client_addr{};
    socklen_t client_len = sizeof(client_addr);
    // üü¢ –ü–†–ò–ï–ú –ù–û–í–û–ì–û –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    int client_fd = accept(listen_fd_, (struct sockaddr *)&client_addr, &client_len);
    if (client_fd < 0)
    {
        if (errno != EAGAIN && errno != EWOULDBLOCK)
        {
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }
    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê
    if (!set_nonblocking(client_fd))
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }
    // üü§ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–õ–ò–ï–ù–¢–ï
    std::string client_ip_str = inet_ntoa(client_addr.sin_addr);
    uint16_t client_port_num = ntohs(client_addr.sin_port);
    LOG_INFO("üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})",
             client_ip_str, client_port_num, client_fd);

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    if (active_connections_ >= MAX_CONNECTIONS) {
        LOG_WARN("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ({}). –û—Ç–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.", MAX_CONNECTIONS);
        ::close(client_fd);
        return;
    }
    active_connections_++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫

    // üü¢ –û–ë–™–Ø–í–õ–Ø–ï–ú backend_fd –í–ù–ê–ß–ê–õ–ï –ú–ï–¢–û–î–ê
    int backend_fd = -1;
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏
    backend_fd = connect_to_backend();
    if (backend_fd == -1)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.");
        ::close(client_fd);
        return;
    }
    // üü¢ –°–û–ó–î–ê–ù–ò–ï SSL-–û–ë–™–ï–ö–¢–ê –î–õ–Ø TLS-–®–ò–§–†–û–í–ê–ù–ò–Ø
    SSL *ssl = SSL_new(ssl_ctx_);
    if (!ssl) {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }
    // üü† –ü–†–ò–í–Ø–ó–ö–ê SSL –ö –°–û–ö–ï–¢–£
    if (SSL_set_fd(ssl, client_fd) != 1) {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å SSL –∫ —Å–æ–∫–µ—Ç—É");
        SSL_free(ssl);
        ::close(client_fd);
        return;
    }
    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê –î–õ–Ø SSL
    SSL_set_mode(ssl, SSL_MODE_ENABLE_PARTIAL_WRITE | SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);
    // üü¢ –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï –í connections_ –î–ê–ñ–ï –ï–°–õ–ò HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù
    ConnectionInfo info;
    info.backend_fd = backend_fd;
    info.ssl = ssl;
    info.handshake_done = false; // üëà –ü–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω
    connections_[client_fd] = info;
    // üü¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú chunked_complete_ –î–õ–Ø –ù–û–í–û–ì–û –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    chunked_complete_[client_fd] = false;
    // üü¢ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¢–ê–ô–ú–ê–£–¢
    timeouts_[client_fd] = time(nullptr);
    LOG_INFO("‚úÖ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ handshake –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.");

    // üü¢ –ó–ê–ü–£–°–ö–ê–ï–ú TLS HANDSHAKE
    if (!perform_tls_handshake(client_fd, info)) {
        // –ï—Å–ª–∏ handshake –Ω–µ —É–¥–∞–ª—Å—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        close_connection(client_fd, info);
        return;
    }

    LOG_INFO(" ‚úÖ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})",
             client_ip_str, client_port_num, client_fd);
}

void Http1Server::handle_io_events() noexcept
{
    // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    auto connections_copy = connections_;

    // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–æ–ø–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é —Å—Å—ã–ª–∫—É
    for (auto &conn : connections_copy)
    {
        int client_fd = conn.first;               // –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        ConnectionInfo &info = conn.second;       // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ ‚Äî —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å

        // üü° –ü–†–û–í–ï–†–ö–ê: –≠–¢–û SSL-–°–û–ï–î–ò–ù–ï–ù–ò–ï?
        bool is_ssl = info.ssl != nullptr;

        // üü† –ï–°–õ–ò HANDSHAKE –ù–ï –ó–ê–í–ï–†–®–Å–ù ‚Äî –ü–û–ü–´–¢–ö–ê –ó–ê–í–ï–†–®–ò–¢–¨ –ï–ì–û
        if (is_ssl && !info.handshake_done)
        {
            if (!perform_tls_handshake(client_fd, info)) {
                // –ï—Å–ª–∏ handshake –Ω–µ —É–¥–∞–ª—Å—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                close_connection(client_fd, info);
                continue;
            }
        }

        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        FD_SET(client_fd, &read_fds);
        FD_SET(info.backend_fd, &read_fds);

        // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ù–û–°–¢–ò –î–ï–°–ö–†–ò–ü–¢–û–†–û–í –ü–ï–†–ï–î –í–´–ß–ò–°–õ–ï–ù–ò–ï–ú max_fd
        if (client_fd < 0 || info.backend_fd < 0) {
            LOG_WARN("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ IO: client_fd={}, backend_fd={}",
                     client_fd, info.backend_fd);
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        }

        int max_fd = std::max(client_fd, info.backend_fd); // –ë–µ–∑ {} ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –¥–ª—è C++23
        timeval timeout{.tv_sec = 0, .tv_usec = 1000};     // 1 –º—Å ‚Äî —É—Å–∫–æ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            continue;
        }

        // üü¢ –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –û–¢ –ö–õ–ò–ï–ù–¢–ê –ö –°–ï–†–í–ï–†–£
        if (FD_ISSET(client_fd, &read_fds))
        {
            handle_client_data(client_fd, info);
        }

        if (FD_ISSET(info.backend_fd, &read_fds))
        {
            handle_backend_data(client_fd, info);
        }
    }
}

SSL *Http1Server::get_ssl_for_fd(int fd) noexcept
{
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ssl_connections_ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    auto it = ssl_connections_.find(fd);
    if (it != ssl_connections_.end()) {
        return it->second;
    }
    return nullptr;
}

bool Http1Server::forward_data(int from_fd, int to_fd, SSL *ssl) noexcept
{
    LOG_DEBUG(" üîÑ –ù–∞—á–∞–ª–æ forward_data(from_fd={}, to_fd={}, ssl={})",
              from_fd, to_fd, ssl ? "true" : "false");

    // üü° –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–•
    char buffer[8192];
    bool use_ssl = (ssl != nullptr);
    ssize_t bytes_read = 0;
    if (use_ssl)
    {
        LOG_INFO("[READ] üîê –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ SSL –∏–∑ fd={}", from_fd);
        bytes_read = SSL_read(ssl, buffer, sizeof(buffer));
        if (bytes_read < 0)
        {
            int ssl_error = SSL_get_error(ssl, bytes_read);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
            {
                LOG_WARN("[READ] ‚è≥ SSL_ERROR_WANT_READ/WRITE ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∑–∂–µ");
                return true; // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º true ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            }
            else if (ssl_error == SSL_ERROR_ZERO_RETURN)
            {
                LOG_INFO("[READ] ‚úÖ –ö–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (SSL_ERROR_ZERO_RETURN)");
                return false;
            }
            else
            {
                LOG_ERROR("[READ] ‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ SSL: {}", ERR_error_string(ERR_get_error(), nullptr));
                return false; // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
            }
        }
        else if (bytes_read == 0)
        {
            LOG_WARN("[READ] ‚ö†Ô∏è SSL_read –≤–µ—Ä–Ω—É–ª 0 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.");
            return false;
        }
        else
        {
            LOG_INFO("[READ] ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {} –±–∞–π—Ç —á–µ—Ä–µ–∑ SSL", bytes_read);
        }
    }
    else
    {
        LOG_INFO("[READ] üì• –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ recv –∏–∑ fd={}", from_fd);
        bytes_read = recv(from_fd, buffer, sizeof(buffer), 0);
        if (bytes_read < 0)
        {
            if (errno == EAGAIN || errno == EWOULDBLOCK)
            {
                LOG_WARN("[READ] ‚è≥ recv() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî –±—É—Ñ–µ—Ä –ø—É—Å—Ç");
                return true;
            }
            else
            {
                LOG_ERROR("[READ] ‚ùå recv –æ—à–∏–±–∫–∞: {} (errno={})", strerror(errno), errno);
                return false; // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
            }
        }
        else if (bytes_read == 0)
        {
            LOG_WARN("[READ] ‚ö†Ô∏è recv –≤–µ—Ä–Ω—É–ª 0 ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.");
            return false;
        }
        else
        {
            LOG_INFO("[READ] ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {} –±–∞–π—Ç —á–µ—Ä–µ–∑ recv", bytes_read);
        }
    }

    // üõë –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏?
    if (bytes_read <= 0)
    {
        LOG_WARN("[FORWARD] ‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
        return false;
    }

    LOG_INFO("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç {} (fd={})",
             bytes_read, use_ssl ? "–∫–ª–∏–µ–Ω—Ç–∞" : "—Å–µ—Ä–≤–µ—Ä–∞", from_fd);

    // üü¢ –ü–†–û–í–ï–†–ö–ê: –ï–°–¢–¨ –õ–ò –ù–ï–ó–ê–í–ï–†–®–Å–ù–ù–´–ï –û–¢–ü–†–ê–í–ö–ò?
    if (!pending_sends_.empty() && pending_sends_.find(to_fd) != pending_sends_.end() && !pending_sends_[to_fd].empty())
    {
        LOG_INFO("[PENDING] üïí –ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è fd={}", to_fd);
        if (!process_pending_sends(to_fd)) {
            return false;
        }
    }

    // üü¢ –ó–ê–ü–ò–°–¨ –ù–û–í–´–• –î–ê–ù–ù–´–•
    LOG_INFO("[NEW] üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {} –±–∞–π—Ç –Ω–∞ fd={}", bytes_read, to_fd);
    PendingSend new_send;
    new_send.fd = to_fd;
    new_send.len = static_cast<size_t>(bytes_read);
    new_send.sent = 0;
    new_send.data = std::make_unique<char[]>(new_send.len);
    std::memcpy(new_send.data.get(), buffer, new_send.len);

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É
    LOG_INFO("[NEW] üì§ –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ {} –±–∞–π—Ç –Ω–∞ fd={}", new_send.len, to_fd);
    ssize_t bytes_sent = try_send(to_fd, new_send.data.get(), new_send.len, get_ssl_for_fd(to_fd));

    if (bytes_sent <= 0)
    {
        LOG_WARN("[NEW] ‚è≥ send() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å");
        pending_sends_[to_fd].push(std::move(new_send));
        return true;
    }

    // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å—ë —Å—Ä–∞–∑—É
    LOG_SUCCESS("üéâ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –æ—Ç {} –∫ {}", bytes_read, from_fd, to_fd);
    LOG_DEBUG(" üîÑ –ö–æ–Ω–µ—Ü forward_data ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º");
    return true;
}

void Http1Server::handle_client_data(int client_fd, ConnectionInfo& info) noexcept
{
    LOG_INFO(" üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {} (fd={})", client_fd, client_fd);
    LOG_DEBUG("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ forward_data: from_fd={}, to_fd={}", client_fd, info.backend_fd);

    // üü¢ –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–ó–ê–í–ï–†–®–Å–ù–ù–´–ï –û–¢–ü–†–ê–í–ö–ò –î–õ–Ø –ë–≠–ö–ï–ù–î–ê
    if (!pending_sends_.empty() && pending_sends_.find(info.backend_fd) != pending_sends_.end() && !pending_sends_[info.backend_fd].empty())
    {
        if (!process_pending_sends(info.backend_fd)) {
            close_connection(client_fd, info);
            return;
        }
    }

    // üü¢ –¢–ï–ü–ï–†–¨ –ß–ò–¢–ê–ï–ú –ù–û–í–´–ï –î–ê–ù–ù–´–ï –û–¢ –ö–õ–ò–ï–ù–¢–ê
    bool keep_alive = forward_data(client_fd, info.backend_fd, info.ssl); // üëà –ü–µ—Ä–µ–¥–∞—ë–º ssl
    if (!keep_alive)
    {
        close_connection(client_fd, info);
    }
    else
    {
        timeouts_[client_fd] = time(nullptr);
    }
}

void Http1Server::handle_backend_data(int client_fd, ConnectionInfo& info) noexcept
{
    LOG_INFO("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {}", info.backend_fd);

    // üî¥ –ü–†–û–í–ï–†–ö–ê: –ó–ê–í–ï–†–®–Å–ù –õ–ò HANDSHAKE?
    if (info.ssl != nullptr && !info.handshake_done)
    {
        LOG_WARN("‚ùó –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É, –ø–æ–∫–∞ handshake –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é, –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è handshake
    }

    // üü¢ –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ
    bool keep_alive = forward_data(info.backend_fd, client_fd, nullptr); // üëà –ü–µ—Ä–µ–¥–∞—ë–º nullptr, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –Ω–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è
    if (!keep_alive)
    {
        close_connection(client_fd, info);
    }
    else
    {
        // üü¢ –ü–†–û–í–ï–†–Ø–ï–ú, –ó–ê–í–ï–†–®–ï–ù –õ–ò –ß–ê–ù–ö
        if (chunked_complete_.find(client_fd) != chunked_complete_.end())
        {
            if (chunked_complete_[client_fd])
            {
                // üü¢ –ß–∞–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚Äî –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                LOG_INFO("‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
                close_connection(client_fd, info);
            }
            else
            {
                // üü° –ß–∞–Ω–∫–∏ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                timeouts_[client_fd] = time(nullptr);
            }
        }
        else
        {
            // üü° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
            timeouts_[client_fd] = time(nullptr);
        }
    }
}

void Http1Server::close_connection(int client_fd, ConnectionInfo& info) noexcept
{
    // üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ SSL –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –∫–∞—Ä—Ç—ã
    SSL* ssl_to_free = nullptr;
    if (info.ssl)
    {
        ssl_to_free = info.ssl;
    }

    // üü¢ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
    ::close(client_fd);
    ::close(info.backend_fd);

    // üü¢ –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç (—ç—Ç–æ —É–¥–∞–ª—è–µ—Ç ConnectionInfo, –≤–∫–ª—é—á–∞—è ssl)
    connections_.erase(client_fd);
    timeouts_.erase(client_fd);

    // üü¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SSL-–æ–±—ä–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª)
    if (ssl_to_free)
    {
        SSL_free(ssl_to_free);
    }

    LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, info.backend_fd);
    active_connections_--; // –£–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
}

bool Http1Server::perform_tls_handshake(int client_fd, ConnectionInfo& info) noexcept
{
    int ssl_accept_result = SSL_accept(info.ssl);
    if (ssl_accept_result <= 0)
    {
        int ssl_error = SSL_get_error(info.ssl, ssl_accept_result);
        if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE ||
            ssl_error == SSL_ERROR_WANT_CONNECT || ssl_error == SSL_ERROR_WANT_ACCEPT) {
            LOG_DEBUG("‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ ({}).", SSL_state_string_long(info.ssl));
            // üü¢ –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ handshake
            if (!info.handshake_done && !info.logged_handshake_want)
            {
                LOG_DEBUG("‚è∏Ô∏è TLS handshake —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (SSL_ERROR_WANT_READ/WRITE)");
                info.logged_handshake_want = true; // üëà –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞
            }
            return false; // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ
        }
        else
        {
            // üü¢ –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ handshake
            info.logged_handshake_want = false;

            // üÜï –î–û–ë–ê–í–õ–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            const char *client_protocol = SSL_get_cipher_name(info.ssl);
            if (client_protocol) {
                LOG_ERROR("‚ùå –ö–ª–∏–µ–Ω—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∏—Ñ—Ä: {}", client_protocol);
            } else {
                LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∏—Ñ—Ä –∫–ª–∏–µ–Ω—Ç–∞");
            }
            LOG_ERROR("‚ùå TLS handshake –Ω–µ —É–¥–∞–ª—Å—è: {}", ERR_error_string(ERR_get_error(), nullptr));

            return false;
        }
    }

    // üü¢ HANDSHAKE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù
    LOG_INFO("‚úÖ TLS handshake —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {} (fd={})", client_fd, client_fd);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –ø–æ–º–µ—á–∞–µ–º handshake –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
    info.handshake_done = true;
    return true;
}

bool Http1Server::process_pending_sends(int fd) noexcept
{
    auto &pending_queue = pending_sends_[fd];
    while (!pending_queue.empty())
    {
        auto &pending = pending_queue.front();
        if (pending.fd != fd)
        {
            LOG_WARN("[PENDING] üóëÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π fd –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç");
            pending_queue.pop();
            continue;
        }

        // üü† –ü–û–ü–´–¢–ö–ê –û–¢–ü–†–ê–í–ò–¢–¨ –û–°–¢–ê–í–®–ò–ï–°–Ø –î–ê–ù–ù–´–ï
        LOG_DEBUG("[PENDING] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {} –±–∞–π—Ç –∏–∑ {} (—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {})",
                  pending.len - pending.sent, pending.len, pending.sent);

        ssize_t bytes_sent = try_send(pending.fd, pending.data.get() + pending.sent, pending.len - pending.sent, get_ssl_for_fd(pending.fd));

        if (bytes_sent <= 0)
        {
            if (bytes_sent == -1) {
                // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                LOG_ERROR("[PENDING] ‚ùå send() —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {}", strerror(errno));
                pending_queue.pop();
                return false;
            }
            // EAGAIN/EWOULDBLOCK –∏–ª–∏ SSL_ERROR_WANT_READ/WRITE
            LOG_WARN("[PENDING] ‚è≥ send() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏");
            return true;
        }

        pending.sent += static_cast<size_t>(bytes_sent);
        LOG_DEBUG("[PENDING] üìà –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç, –≤—Å–µ–≥–æ {}/{}", bytes_sent, pending.sent, pending.len);
        if (pending.sent >= pending.len)
        {
            LOG_SUCCESS("[PENDING] ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Ä—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ({} –±–∞–π—Ç)", pending.len);
            pending_queue.pop(); // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å—é –ø–æ—Ä—Ü–∏—é
        }
        else
        {
            LOG_INFO("[PENDING] üì• –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {} –±–∞–π—Ç", pending.len - pending.sent);
            return true; // –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
    }
    return true;
}

ssize_t Http1Server::try_send(int fd, const char* data, size_t len, SSL* ssl) noexcept
{
    if (ssl != nullptr)
    {
        LOG_INFO("[PENDING] üîê SSL_write –¥–ª—è fd={}", fd);
        ssize_t bytes_sent = SSL_write(ssl, data, len);
        if (bytes_sent <= 0)
        {
            int ssl_error = SSL_get_error(ssl, bytes_sent);
            if (ssl_error == SSL_ERROR_WANT_READ || ssl_error == SSL_ERROR_WANT_WRITE)
            {
                LOG_WARN("[PENDING] ‚è≥ SSL_write —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏");
                return -1; // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            }
            else
            {
                LOG_ERROR("[PENDING] ‚ùå SSL_write —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {}",
                          ERR_error_string(ERR_get_error(), nullptr));
                return -1;
            }
        }
        return bytes_sent;
    }
    else
    {
        LOG_INFO("[PENDING] üì§ send() –¥–ª—è fd={}", fd);
        ssize_t bytes_sent = send(fd, data, len, MSG_NOSIGNAL);
        if (bytes_sent <= 0)
        {
            if (errno == EAGAIN || errno == EWOULDBLOCK)
            {
                LOG_WARN("[PENDING] ‚è≥ send() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî –±—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω");
                return -1;
            }
            else
            {
                LOG_ERROR("[PENDING] ‚ùå send() —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {}", strerror(errno));
                return -1;
            }
        }
        return bytes_sent;
    }
}