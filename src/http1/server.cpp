/**
 * @file server.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP/1.1 —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—ã—Ö HTTP/1.1 –∑–∞–ø—Ä–æ—Å–æ–≤ (GET, HEAD) –±–µ–∑ TLS.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∫—Å–∏.
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞.
 *
 * @author Telian Edward <telianedward@icloud.com>
 * @assisted-by AI-Assistant
 * @date 2025-10-24
 * @version 1.0
 * @license MIT
 */
#include "../../include/http1/server.hpp"
#include <cstring>
#include <algorithm>
#include <sstream>
#include <poll.h>

// === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Http1Server ===

Http1Server::Http1Server(int port, const std::string &backend_ip, int backend_port)
    : listen_fd_(-1), port_(port), backend_ip_(backend_ip), backend_port_(backend_port) {}

bool Http1Server::run()
{
    // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    listen_fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listen_fd_ < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {}", strerror(errno));
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    int opt = 1;
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEADDR failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }
    if (setsockopt(listen_fd_, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0)
    {
        LOG_ERROR("setsockopt SO_REUSEPORT failed: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(listen_fd_))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        ::close(listen_fd_);
        return false;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(port_);
    if (bind(listen_fd_, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É {}: {}", port_, strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å
    if (listen(listen_fd_, SOMAXCONN) < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}", strerror(errno));
        ::close(listen_fd_);
        return false;
    }

    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", port_);

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (running_)
    {
        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        FD_SET(listen_fd_, &read_fds);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const auto &[client_fd, backend_fd] : connections_)
        {
            FD_SET(client_fd, &read_fds);
            FD_SET(backend_fd, &read_fds);
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        int max_fd = listen_fd_;
        for (const auto &[client_fd, backend_fd] : connections_)
        {
            max_fd = std::max({max_fd, client_fd, backend_fd});
        }

        timeval timeout{.tv_sec = 1, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity < 0 && errno != EINTR)
        {
            LOG_ERROR("–û—à–∏–±–∫–∞ select: {}", strerror(errno));
            continue;
        }

        if (activity > 0)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if (FD_ISSET(listen_fd_, &read_fds))
            {
                handle_new_connection();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
            handle_io_events();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        time_t now = time(nullptr);
        for (auto it = timeouts_.begin(); it != timeouts_.end();)
        {
            if (now - it->second > 30)
            { // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                int client_fd = it->first;
                ::close(client_fd);
                connections_.erase(client_fd);
                timeouts_.erase(it++);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: –∫–ª–∏–µ–Ω—Ç {}", client_fd);
            }
            else
            {
                ++it;
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const auto &[client_fd, backend_fd] : connections_)
    {
        ::close(client_fd);
        ::close(backend_fd);
    }
    connections_.clear();

    if (listen_fd_ != -1)
    {
        ::close(listen_fd_);
    }

    LOG_INFO("HTTP/1.1 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return true;
}

void Http1Server::stop()
{
    running_ = false;
}

bool Http1Server::set_nonblocking(int fd) noexcept
{
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1)
    {
        return false;
    }
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK) != -1;
}

int Http1Server::connect_to_backend() noexcept
{
    int backend_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (backend_fd < 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    if (!set_nonblocking(backend_fd))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        ::close(backend_fd);
        return -1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
    struct sockaddr_in backend_addr{};
    backend_addr.sin_family = AF_INET;
    backend_addr.sin_port = htons(backend_port_);
    if (inet_pton(AF_INET, backend_ip_.c_str(), &backend_addr.sin_addr) <= 0)
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {}", backend_ip_);
        ::close(backend_fd);
        return -1;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    if (connect(backend_fd, (struct sockaddr *)&backend_addr, sizeof(backend_addr)) < 0)
    {
        if (errno != EINPROGRESS)
        {
            LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }
        LOG_DEBUG("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", backend_ip_, backend_port_);

        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        fd_set write_fds;
        FD_ZERO(&write_fds);
        FD_SET(backend_fd, &write_fds);

        timeval timeout{.tv_sec = 5, .tv_usec = 0}; // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        int activity = select(backend_fd + 1, nullptr, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            LOG_ERROR("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{} (errno={})", backend_ip_, backend_port_, errno);
            ::close(backend_fd);
            return -1;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        int error = 0;
        socklen_t len = sizeof(error);
        if (getsockopt(backend_fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0)
        {
            LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", strerror(errno));
            ::close(backend_fd);
            return -1;
        }

        if (error != 0)
        {
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É {}:{}: {}", backend_ip_, backend_port_, strerror(error));
            ::close(backend_fd);
            return -1;
        }

        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", backend_ip_, backend_port_);
    }
    else
    {
        LOG_INFO("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É {}:{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)", backend_ip_, backend_port_);
    }

    return backend_fd;
}
/**
 * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
 *
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é accept(), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º,
 * –ª–æ–≥–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ WireGuard,
 * –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä—É (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç ‚Äî –±—ç–∫–µ–Ω–¥–æ–≤—ã–π —Å–æ–∫–µ—Ç) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è.
 *
 * @throws –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è noexcept.
 * @warning –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ connections_.
 * @note –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main loop –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ FD_ISSET(listen_fd_, &read_fds).
 */
void Http1Server::handle_new_connection() noexcept
{
    // üü° –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –ê–î–†–ï–°–ê –ö–õ–ò–ï–ù–¢–ê
    /**
     * @brief –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –∏ –ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
     * @details –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤—ã–∑–æ–≤–µ accept() –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—Å—è –∫–ª–∏–µ–Ω—Ç–µ.
     *          –ü–æ–ª—è:
     *          - sin_family: AF_INET (IPv4)
     *          - sin_addr: IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
     *          - sin_port: –ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Å–µ—Ç–µ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –±–∞–π—Ç)
     */
    struct sockaddr_in client_addr{};

    // üü† –†–ê–ó–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ –ê–î–†–ï–°–ê
    /**
     * @brief –†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã client_addr.
     * @details –ü–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ accept() –∫–∞–∫ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     */
    socklen_t client_len = sizeof(client_addr);

    // üü¢ –ü–†–ò–ï–ú –ù–û–í–û–ì–û –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    /**
     * @brief –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
     * @details –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π accept() –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
     *          –ï—Å–ª–∏ < 0 ‚Äî –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (errno —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏).
     *          –û—à–∏–±–∫–∏ EAGAIN / EWOULDBLOCK ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
     */
    int client_fd = accept(listen_fd_, (struct sockaddr *)&client_addr, &client_len);

    if (client_fd < 0)
    {
        // üü• –û–ë–†–ê–ë–û–¢–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö accept()
        /**
         * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç EAGAIN/EWOULDBLOCK.
         * @details –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç —Å–µ—Ä—å—ë–∑–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π),
         *          –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
         */
        if (errno != EAGAIN && errno != EWOULDBLOCK)
        {
            LOG_ERROR("–û—à–∏–±–∫–∞ accept: {}", strerror(errno));
        }
        return;
    }

    // üü£ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ì–û –†–ï–ñ–ò–ú–ê
    /**
     * @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
     * @details –ë–µ–∑ —ç—Ç–æ–≥–æ select() –∏ recv()/send() –±—É–¥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞.
     *          –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî —Å–æ–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.
     * @return true –µ—Å–ª–∏ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, false –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    if (!set_nonblocking(client_fd))
    {
        LOG_ERROR("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞");
        ::close(client_fd);
        return;
    }

    // üü§ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–õ–ò–ï–ù–¢–ï
    /**
     * @brief –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "192.168.1.1").
     * @details –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∏–∑ –¥–≤–æ–∏—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (client_addr.sin_addr) —Å –ø–æ–º–æ—â—å—é inet_ntoa().
     */
    std::string client_ip_str = inet_ntoa(client_addr.sin_addr);

    /**
     * @brief –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ö–æ—Å—Ç–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –±–∞–π—Ç).
     * @details –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –±–∞–π—Ç (client_addr.sin_port) —Å –ø–æ–º–æ—â—å—é ntohs().
     */
    uint16_t client_port_num = ntohs(client_addr.sin_port);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äî –∫–ª—é—á–µ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    LOG_INFO("üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {}:{} (fd={})", client_ip_str, client_port_num, client_fd);

    // üü† –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–≠–ö–ï–ù–î–£ –í –†–û–°–°–ò–ò
    /**
     * @brief –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ –∫ –±—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏.
     * @details –°–æ–∑–¥–∞—ë—Ç—Å—è —Å –ø–æ–º–æ—â—å—é connect_to_backend(). –ï—Å–ª–∏ == -1 ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.
     *          –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ connections_.
     */
    int backend_fd = connect_to_backend();
    if (backend_fd == -1)
    {
        LOG_ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –†–æ—Å—Å–∏–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.");
        ::close(client_fd);
        return; // ‚ùó –í–ê–ñ–ù–û: –ù–ï –î–û–ë–ê–í–õ–Ø–¢–¨ –í connections_!
    }

    // üü¢ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ê–†–´ –°–û–ï–î–ò–ù–ï–ù–ò–ô
    /**
     * @brief –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: client_fd ‚Üí backend_fd.
     * @details –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º.
     *          –ö–ª—é—á ‚Äî –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –±—ç–∫–µ–Ω–¥–∞.
     */
    connections_[client_fd] = backend_fd;

    /**
     * @brief –ö–∞—Ä—Ç–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤: client_fd ‚Üí –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
     * @details –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥).
     */
    timeouts_[client_fd] = time(nullptr); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
}


void Http1Server::handle_io_events() noexcept
{
    auto connections_copy = connections_;
    for (const auto &[client_fd, backend_fd] : connections_copy)
    {
        if (backend_fd == -1)
        { // üëà –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            LOG_WARN("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π backend_fd (-1) –¥–ª—è client_fd={}. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.", client_fd);
            ::close(client_fd);
            connections_.erase(client_fd);
            timeouts_.erase(client_fd);
            continue;
        }

        fd_set read_fds, write_fds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        FD_SET(client_fd, &read_fds);
        FD_SET(backend_fd, &read_fds);
        int max_fd = std::max(client_fd, backend_fd);
        timeval timeout{.tv_sec = 0, .tv_usec = 10000}; // 10 –º—Å
        int activity = select(max_fd + 1, &read_fds, &write_fds, nullptr, &timeout);
        if (activity <= 0)
        {
            continue;
        }

        // // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
        // if (FD_ISSET(client_fd, &read_fds)) {
        //     LOG_INFO("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
        //     if (!forward_data(client_fd, backend_fd)) {
        //         ::close(client_fd);
        //         ::close(backend_fd);
        //         connections_.erase(client_fd);
        //         timeouts_.erase(client_fd);
        //         LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
        //     } else {
        //         timeouts_[client_fd] = time(nullptr);
        //     }
        // }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
        if (FD_ISSET(client_fd, &read_fds))
        {
            LOG_INFO("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", client_fd);
            LOG_DEBUG("üîÑ –í—ã–∑–æ–≤ forward_data(client_fd={}, backend_fd={})", client_fd, backend_fd);

            // üü¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–í–û–ì–û HTTP-–ó–ê–ü–†–û–°–ê (–°–´–†–û–ô –î–ê–ù–ù–´–•)
            /**
             * @brief –ë—É—Ñ–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –±–∞–π—Ç HTTP-–∑–∞–ø—Ä–æ—Å–∞.
             * @details –†–∞–∑–º–µ—Ä 1024 –±–∞–π—Ç–∞ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –Ω–∞—á–∞–ª–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞.
             */
            char request_buffer[1024];
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (Peek)
            ssize_t peeked = recv(client_fd, request_buffer, sizeof(request_buffer), MSG_PEEK);
            if (peeked > 0)
            {
                // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –Ω—É–ª–µ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ)
                std::string request_str(request_buffer, static_cast<size_t>(peeked));
                // –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                for (char &c : request_str)
                {
                    if (c < 32 && c != '\n' && c != '\r' && c != '\t')
                        c = '?';
                }
                LOG_INFO("üìã –ü–µ—Ä–≤—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{}", request_str.substr(0, 512)); // –ø–µ—Ä–≤—ã–µ 512 —Å–∏–º–≤–æ–ª–æ–≤
            }
            else if (peeked == 0)
            {
                LOG_WARN("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {} –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö", client_fd);
            }
            else if (peeked < 0 && errno != EAGAIN && errno != EWOULDBLOCK)
            {
                LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ peek() –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}: {}", client_fd, strerror(errno));
            }

            bool keep_alive = forward_data(client_fd, backend_fd);

            LOG_DEBUG("‚¨ÖÔ∏è forward_data –≤–µ—Ä–Ω—É–ª: {}", keep_alive ? "true" : "false");

            if (!keep_alive)
            {
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            }
            else
            {
                timeouts_[client_fd] = time(nullptr);
                LOG_DEBUG("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è client_fd={}: {}", client_fd, timeouts_[client_fd]);
            }
        }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
        if (FD_ISSET(backend_fd, &read_fds))
        {
            LOG_INFO("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {}", backend_fd);
            if (!forward_data(backend_fd, client_fd))
            {
                ::close(client_fd);
                ::close(backend_fd);
                connections_.erase(client_fd);
                timeouts_.erase(client_fd);
                LOG_INFO("TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–ª–∏–µ–Ω—Ç {}, –±—ç–∫–µ–Ω–¥ {}", client_fd, backend_fd);
            }
            else
            {
                timeouts_[client_fd] = time(nullptr);
            }
        }
    }
}

/**
 * @brief –ü–µ—Ä–µ–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–æ–∫–µ—Ç–∞–º–∏ (–∫–ª–∏–µ–Ω—Ç ‚Üî –±—ç–∫–µ–Ω–¥) –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
 *
 * –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–¥–Ω–æ–≥–æ —Å–æ–∫–µ—Ç–∞ (`from_fd`) –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ –¥—Ä—É–≥–æ–π (`to_fd`),
 * –ø—Ä–∏ —ç—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —á–∞—Å—Ç–∏—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É (EAGAIN/EWOULDBLOCK), –æ—à–∏–±–∫–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è HTTP/1.1 —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ WireGuard-—Ç—É–Ω–Ω–µ–ª—å.
 *
 * @param from_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –±—ç–∫–µ–Ω–¥).
 * @param to_fd –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–±—ç–∫–µ–Ω–¥ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç).
 * @return true –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, false –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
 * @throws –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è noexcept.
 * @warning –ù–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ busy-waiting.
 */
bool Http1Server::forward_data(int from_fd, int to_fd) noexcept
{
    // üü¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ê –í –§–£–ù–ö–¶–ò–Æ
    // –£—Ä–æ–≤–µ–Ω—å DEBUG: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
    LOG_DEBUG("üîÑ –ù–∞—á–∞–ª–æ forward_data(from_fd={}, to_fd={})", from_fd, to_fd);

    // üü° –ë–£–§–ï–† –î–õ–Ø –ü–†–ò–Å–ú–ê –î–ê–ù–ù–´–•
    /**
     * @brief –ë—É—Ñ–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∫–µ—Ç–∞.
     * –í—ã–¥–µ–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å—Ç–µ–∫–µ ‚Äî 8 –ö–ë (8192 –±–∞–π—Ç–∞).
     * @details –†–∞–∑–º–µ—Ä 8192 –±–∞–π—Ç–∞ –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–ª—è TCP-–ø—Ä–æ–∫—Å–∏: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞,
     *          –Ω–µ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è —Å—Ç–µ–∫–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
     * –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è TCP-–±—É—Ñ–µ—Ä–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    char buffer[8192];
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.
    LOG_DEBUG("üì¶ –ë—É—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω: —Ä–∞–∑–º–µ—Ä {} –±–∞–π—Ç", sizeof(buffer));

    // üü† –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• –°–û –°–û–ö–ï–¢–ê –ò–°–¢–û–ß–ù–ò–ö–ê
        /**
     * @brief –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç, —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∫–µ—Ç–∞ `from_fd`.
    * recv() ‚Äî —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∫–µ—Ç–∞.
    * @details –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    *           - from_fd: –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞, –æ—Ç–∫—É–¥–∞ —á–∏—Ç–∞–µ–º (–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –±—ç–∫–µ–Ω–¥).
    *           - buffer: —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.
    *           - sizeof(buffer): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è.
    *           - 0: —Ñ–ª–∞–≥–∏ ‚Äî –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π.
     * @details –ó–Ω–∞—á–µ–Ω–∏—è:
     *          - >0: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–∞–π—Ç.
     *          - 0: —É–¥–∞–ª—ë–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞–∫—Ä—ã–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
     *          - -1: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è (errno —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏).
     */

    ssize_t bytes_read = recv(from_fd, buffer, sizeof(buffer), 0);
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–µ–Ω–∏—è ‚Äî –∫–ª—é—á–µ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏.
    LOG_DEBUG("üì• recv(from_fd={}, buffer_size={}) –≤–µ—Ä–Ω—É–ª bytes_read={}", from_fd, sizeof(buffer), bytes_read);

    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ß–¢–ï–ù–ò–Ø (bytes_read > 0)
    if (bytes_read > 0)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        LOG_INFO("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (from_fd={})", bytes_read, from_fd);

              // üü£ –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –°–ß–Å–¢–ê –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–• –ë–ê–ô–¢
        /**
         * @brief –°—á—ë—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–π—Ç, —É–∂–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–æ–∫–µ—Ç `to_fd`.
         * @details –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω—É–ª—ë–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.
         *          –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ send().
         *  total_sent ‚Äî —Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç —É–∂–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –±—É—Ñ–µ—Ä–∞.
         */
        ssize_t total_sent = 0;
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        LOG_DEBUG("üìå total_sent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {}", total_sent);

        // üü§ –¶–ò–ö–õ –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–• (–ü–û–ö–ê –ù–ï –í–°–ï –ë–ê–ô–¢–´ –û–¢–ü–†–ê–í–õ–ï–ù–´)
        // –¶–∏–∫–ª –Ω—É–∂–µ–Ω –ø–æ—Ç–æ–º—É, —á—Ç–æ send() –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤,
        // –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞ —è–¥—Ä–∞.
        while (total_sent < bytes_read)
        {

            // üü† –†–ê–°–ß–Å–¢ –û–°–¢–ê–í–®–ò–•–°–Ø –ë–ê–ô–¢ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò
            /**
             * @brief –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞.
             * @details –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–±—â–∏–º –æ–±—ä—ë–º–æ–º –¥–∞–Ω–Ω—ã—Ö (`bytes_read`)
             *          –∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º (`total_sent`). –ü—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ size_t –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å send().
             * remaining ‚Äî —Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç –µ—â—ë –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
             * –∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ size_t, —Ç–∞–∫ –∫–∞–∫ send() –æ–∂–∏–¥–∞–µ—Ç size_t.
             */
            size_t remaining = static_cast<size_t>(bytes_read - total_sent);
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –æ–±—ä—ë–º ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è.
            LOG_DEBUG("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {} –±–∞–π—Ç (total_sent={}, bytes_read={})", remaining, total_sent, bytes_read);

            // üü¢ –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ù–ê –°–û–ö–ï–¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
            /**
             * @brief –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–æ–∫–µ—Ç `to_fd` –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ send().
             *             // send() ‚Äî —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
            * @details  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            *           - to_fd: –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
            *           - buffer + total_sent: —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ —á–∞—Å—Ç–∏ –±—É—Ñ–µ—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.
            *           - remaining: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å.
            *           - 0: —Ñ–ª–∞–≥–∏ ‚Äî –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π.
            * @details –ó–Ω–∞—á–µ–Ω–∏—è:
            *          - >0: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–π—Ç.
            *          - 0: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (—Ä–µ–¥–∫–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ).
            *          - -1: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (errno —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏).
            */
            ssize_t bytes_sent = send(to_fd, buffer + total_sent, remaining, 0);
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
            LOG_DEBUG("üì§ send(to_fd={}, offset={}, size={}) –≤–µ—Ä–Ω—É–ª bytes_sent={}",
                      to_fd, total_sent, remaining, bytes_sent);

            // üü° –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ô –û–¢–ü–†–ê–í–ö–ò (bytes_sent > 0)
            if (bytes_sent > 0)
            {
                /**
                 * @brief –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                 * @details –°–æ–∑–¥–∞—ë—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ.
                 *          –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ '?', —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –≤—ã–≤–æ–¥ –ª–æ–≥–∞.
                 * sent_chunk ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –ª–æ–≥ (–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –æ–±—ä—ë–º–µ).
                 */
                std::string sent_chunk(buffer + total_sent, static_cast<size_t>(bytes_sent));
                // –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ª–æ–≥–∞ (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É).
                for (char &c : sent_chunk)
                {
                    // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª ‚Äî —É–ø—Ä–∞–≤–ª—è—é—â–∏–π (–º–µ–Ω—å—à–µ 32), –∫—Ä–æ–º–µ \n, \r, \t ‚Äî –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ '?'
                    if (c < 32 && c != '\n' && c != '\r' && c != '\t')
                        c = '?';
                }
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 256 –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
                LOG_DEBUG("üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ {} –±–∞–π—Ç):\n{}",
                          std::min<size_t>(256, sent_chunk.size()),
                          sent_chunk.substr(0, std::min<size_t>(256, sent_chunk.size())));
            }

            // üü• –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –û–¢–ü–†–ê–í–ö–ò (bytes_sent < 0)
            if (bytes_sent < 0)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ.
                LOG_ERROR("‚ùå send() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: errno={} ({})", errno, strerror(errno));

                // üü® –ü–†–û–í–ï–†–ö–ê –ù–ê EAGAIN / EWOULDBLOCK
                 /**
                 * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ EAGAIN / EWOULDBLOCK –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.
                 * @details –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –±—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —è–¥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
                 *          –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
                 */
                if (errno == EAGAIN || errno == EWOULDBLOCK)
                {
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –Ω–µ –æ—à–∏–±–∫–∞, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                    LOG_WARN("‚è∏Ô∏è –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {}/{} –±–∞–π—Ç", total_sent, bytes_read);
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.
                    return true;
                }
                else
                {
                    // üü• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚Äî –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).
                     /**
                     * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.
                     * @details –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞—Ç–∞)
                     *          —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
                     */
                    LOG_ERROR("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {}", strerror(errno));
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
                    return false;
                }
            }

            // üü¢ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–Å–¢–ß–ò–ö–ê –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–• –ë–ê–ô–¢
            // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–π—Ç –∫ –æ–±—â–µ–º—É —Å—á—ë—Ç—á–∏–∫—É.
            total_sent += bytes_sent;
            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏.
            LOG_DEBUG("üìà total_sent –æ–±–Ω–æ–≤–ª—ë–Ω: {} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –±–∞–π—Ç)", total_sent, bytes_sent);

            // üü° –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò 0 –ë–ê–ô–¢
            /**
             * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ send() –≤–µ—Ä–Ω—É–ª 0.
             * @details –≠—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å –≤ TCP, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞ ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
             *          –î–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞.
             * end() –≤–µ—Ä–Ω—É–ª 0 ‚Äî —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –Ω–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
             * –í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ TCP —ç—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞.
             */
            if (bytes_sent == 0)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                LOG_WARN("‚ö†Ô∏è send() –≤–µ—Ä–Ω—É–ª 0 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
                // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ ‚Äî –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞.
                break;
            }
        }

        // üü¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û–ô –ü–ï–†–ï–î–ê–ß–ò –í–°–ï–• –î–ê–ù–ù–´–•
        // –£—Ä–æ–≤–µ–Ω—å SUCCESS ‚Äî —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
        LOG_SUCCESS("üéâ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {} –±–∞–π—Ç –æ—Ç {} –∫ {}", bytes_read, from_fd, to_fd);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.
        return true;
    }
    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø (bytes_read == 0)
    else if (bytes_read == 0)
    {

                /**
         * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π.
         * @details recv() –≤–µ—Ä–Ω—É–ª 0 ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –±—ç–∫–µ–Ω–¥ –∑–∞–∫—Ä—ã–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
         *          –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã.
         */
        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        LOG_INFO("üîö –ö–ª–∏–µ–Ω—Ç (from_fd={}) –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (recv –≤–µ—Ä–Ω—É–ª 0)", from_fd);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
        return false;
    }
    // üîµ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –ß–¢–ï–ù–ò–Ø (bytes_read < 0)
    else
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á—Ç–µ–Ω–∏—è ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        LOG_DEBUG("‚è∏Ô∏è recv() –≤–µ—Ä–Ω—É–ª -1: errno={} ({})", errno, strerror(errno));

        // üü® –ü–†–û–í–ï–†–ö–ê –ù–ê EAGAIN / EWOULDBLOCK
        // –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.
        // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
                /**
         * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ EAGAIN / EWOULDBLOCK –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏.
         * @details –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
         *          –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ.
         */
        if (errno == EAGAIN || errno == EWOULDBLOCK)
        {
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–µ –æ—à–∏–±–∫–∞, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
            LOG_DEBUG("üîÅ recv() –≤–µ—Ä–Ω—É–ª EAGAIN/EWOULDBLOCK ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ");
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.
            return true;
        }
        else
        {
                        /**
             * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —á—Ç–µ–Ω–∏—è.
             * @details –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞—Ç–∞)
             *          —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
             */
            // üü• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚Äî –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).
            LOG_ERROR("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (from_fd={}): {}", from_fd, strerror(errno));
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
            return false;
        }
    }
}